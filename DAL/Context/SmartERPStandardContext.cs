using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DAL.Models;
using DAL.Models2;
using DAL.Smtp;

namespace DAL.Context
{
    public partial class SmartERPStandardContext : DbContext
    {
        public SmartERPStandardContext()
        {
        }

        public SmartERPStandardContext(DbContextOptions<SmartERPStandardContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AnAnimalDeath> AnAnimalDeath { get; set; }
        public virtual DbSet<AnAnimalDeathDetail> AnAnimalDeathDetail { get; set; }
        public virtual DbSet<AnAnimalMidicin> AnAnimalMidicin { get; set; }
        public virtual DbSet<AnAnimalType> AnAnimalType { get; set; }
        public virtual DbSet<AnAnimalWeightRate> AnAnimalWeightRate { get; set; }
        public virtual DbSet<AnAnimalWeightRateDetail> AnAnimalWeightRateDetail { get; set; }
        public virtual DbSet<AnMedicin> AnMedicin { get; set; }
        public virtual DbSet<AnNewBorn> AnNewBorn { get; set; }
        public virtual DbSet<AnNewBornDetail> AnNewBornDetail { get; set; }
        public virtual DbSet<AssetAssetAddDoc> AssetAssetAddDoc { get; set; }
        public virtual DbSet<AssetAssetAddDocDetail> AssetAssetAddDocDetail { get; set; }
        public virtual DbSet<AssetAssetCard> AssetAssetCard { get; set; }
        public virtual DbSet<AssetAssetCategory> AssetAssetCategory { get; set; }
        public virtual DbSet<AssetAssetContacts> AssetAssetContacts { get; set; }
        public virtual DbSet<AssetAssetDeductDoc> AssetAssetDeductDoc { get; set; }
        public virtual DbSet<AssetAssetDeductDocDetail> AssetAssetDeductDocDetail { get; set; }
        public virtual DbSet<AssetAssetDeliverDoc> AssetAssetDeliverDoc { get; set; }
        public virtual DbSet<AssetAssetDeliverDocDetail> AssetAssetDeliverDocDetail { get; set; }
        public virtual DbSet<AssetAssetFixDoc> AssetAssetFixDoc { get; set; }
        public virtual DbSet<AssetAssetFixDocDetail> AssetAssetFixDocDetail { get; set; }
        public virtual DbSet<AssetAssetMoveDoc> AssetAssetMoveDoc { get; set; }
        public virtual DbSet<AssetAssetMoveDocDetail> AssetAssetMoveDocDetail { get; set; }
        public virtual DbSet<AssetAssetReceiveDoc> AssetAssetReceiveDoc { get; set; }
        public virtual DbSet<AssetAssetReceiveDocDetail> AssetAssetReceiveDocDetail { get; set; }
        public virtual DbSet<AssetAssetSettingDetails> AssetAssetSettingDetails { get; set; }
        public virtual DbSet<AssetAssetSettings> AssetAssetSettings { get; set; }
        public virtual DbSet<AssetDepreciationDoc> AssetDepreciationDoc { get; set; }
        public virtual DbSet<AssetDepreciationDocDetail> AssetDepreciationDocDetail { get; set; }
        public virtual DbSet<AssetTermination> AssetTermination { get; set; }
        public virtual DbSet<BankAccountsView> BankAccountsView { get; set; }
        public virtual DbSet<BnkBankNotice> BnkBankNotice { get; set; }
        public virtual DbSet<BnkBankNoticeDetail> BnkBankNoticeDetail { get; set; }
        public virtual DbSet<BoxTran> BoxTran { get; set; }
        public virtual DbSet<CalAccChrtDailyAssist> CalAccChrtDailyAssist { get; set; }
        public virtual DbSet<CalAccountChart> CalAccountChart { get; set; }
        public virtual DbSet<CalAccountClaasiJoin> CalAccountClaasiJoin { get; set; }
        public virtual DbSet<CalAccountUsers> CalAccountUsers { get; set; }
        public virtual DbSet<CalAccountingFix> CalAccountingFix { get; set; }
        public virtual DbSet<CalAssetAccounts> CalAssetAccounts { get; set; }
        public virtual DbSet<CalBudget> CalBudget { get; set; }
        public virtual DbSet<CalBudgetDetails> CalBudgetDetails { get; set; }
        public virtual DbSet<CalBusinessPartnerAccounts> CalBusinessPartnerAccounts { get; set; }
        public virtual DbSet<CalCostCenterAccount> CalCostCenterAccount { get; set; }
        public virtual DbSet<CalCostCenters> CalCostCenters { get; set; }
        public virtual DbSet<CalCustAccounts> CalCustAccounts { get; set; }
        public virtual DbSet<CalEmpAccounts> CalEmpAccounts { get; set; }
        public virtual DbSet<CalJurnalDetail> CalJurnalDetail { get; set; }
        public virtual DbSet<CalJurnalEntry> CalJurnalEntry { get; set; }
        public virtual DbSet<CalPostOrder> CalPostOrder { get; set; }
        public virtual DbSet<CalQueueOrder> CalQueueOrder { get; set; }
        public virtual DbSet<CalVendAccounts> CalVendAccounts { get; set; }
        public virtual DbSet<CodAccountCategories> CodAccountCategories { get; set; }
        public virtual DbSet<CodAccountClassification> CodAccountClassification { get; set; }
        public virtual DbSet<CodBuildOccupTypes> CodBuildOccupTypes { get; set; }
        public virtual DbSet<CodBuildPermitActiv> CodBuildPermitActiv { get; set; }
        public virtual DbSet<CodBuildPerspective> CodBuildPerspective { get; set; }
        public virtual DbSet<CodBuildingDegree> CodBuildingDegree { get; set; }
        public virtual DbSet<CodBuildingExploitation> CodBuildingExploitation { get; set; }
        public virtual DbSet<CodBuildingFinishingLevel> CodBuildingFinishingLevel { get; set; }
        public virtual DbSet<CodBuildingInsuranceStatus> CodBuildingInsuranceStatus { get; set; }
        public virtual DbSet<CodBuildingStatus> CodBuildingStatus { get; set; }
        public virtual DbSet<CodBuildingTypes> CodBuildingTypes { get; set; }
        public virtual DbSet<CodCity> CodCity { get; set; }
        public virtual DbSet<CodColors> CodColors { get; set; }
        public virtual DbSet<CodContractType> CodContractType { get; set; }
        public virtual DbSet<CodCountry> CodCountry { get; set; }
        public virtual DbSet<CodDailyAssistance> CodDailyAssistance { get; set; }
        public virtual DbSet<CodElectInsurStatus> CodElectInsurStatus { get; set; }
        public virtual DbSet<CodExplanations> CodExplanations { get; set; }
        public virtual DbSet<CodFurnitAndEqupmnts> CodFurnitAndEqupmnts { get; set; }
        public virtual DbSet<CodInstallmentTemps> CodInstallmentTemps { get; set; }
        public virtual DbSet<CodInstallmentTempsDetail> CodInstallmentTempsDetail { get; set; }
        public virtual DbSet<CodInsurCovTypes> CodInsurCovTypes { get; set; }
        public virtual DbSet<CodInsuranceCases> CodInsuranceCases { get; set; }
        public virtual DbSet<CodLandPermitActivJoin> CodLandPermitActivJoin { get; set; }
        public virtual DbSet<CodLandPermtActiv> CodLandPermtActiv { get; set; }
        public virtual DbSet<CodLandPosJoin> CodLandPosJoin { get; set; }
        public virtual DbSet<CodLandPositions> CodLandPositions { get; set; }
        public virtual DbSet<CodLandRetainResJoin> CodLandRetainResJoin { get; set; }
        public virtual DbSet<CodLandRetainRsons> CodLandRetainRsons { get; set; }
        public virtual DbSet<CodLandStatus> CodLandStatus { get; set; }
        public virtual DbSet<CodLandTypes> CodLandTypes { get; set; }
        public virtual DbSet<CodLands> CodLands { get; set; }
        public virtual DbSet<CodMaintenanceTypes> CodMaintenanceTypes { get; set; }
        public virtual DbSet<CodNonRenewalReasons> CodNonRenewalReasons { get; set; }
        public virtual DbSet<CodOperatingOrders> CodOperatingOrders { get; set; }
        public virtual DbSet<CodOwnershipBonds> CodOwnershipBonds { get; set; }
        public virtual DbSet<CodPackingSize> CodPackingSize { get; set; }
        public virtual DbSet<CodParkings> CodParkings { get; set; }
        public virtual DbSet<CodPaymentTerms> CodPaymentTerms { get; set; }
        public virtual DbSet<CodPaymentTypes> CodPaymentTypes { get; set; }
        public virtual DbSet<CodPostalCodes> CodPostalCodes { get; set; }
        public virtual DbSet<CodRegion> CodRegion { get; set; }
        public virtual DbSet<CodRentCase> CodRentCase { get; set; }
        public virtual DbSet<CodSavingFiles> CodSavingFiles { get; set; }
        public virtual DbSet<CodServices> CodServices { get; set; }
        public virtual DbSet<CodShelves> CodShelves { get; set; }
        public virtual DbSet<CodSubRegion> CodSubRegion { get; set; }
        public virtual DbSet<CodTaskTypes> CodTaskTypes { get; set; }
        public virtual DbSet<CodTrmsModifiRsons> CodTrmsModifiRsons { get; set; }
        public virtual DbSet<CodUnitDegree> CodUnitDegree { get; set; }
        public virtual DbSet<CodUnitExploitation> CodUnitExploitation { get; set; }
        public virtual DbSet<CodUnitFinishingLevel> CodUnitFinishingLevel { get; set; }
        public virtual DbSet<CodUnitInsuranceStatus> CodUnitInsuranceStatus { get; set; }
        public virtual DbSet<CodUnitOccupancyTypes> CodUnitOccupancyTypes { get; set; }
        public virtual DbSet<CodUnitPermittedActivity> CodUnitPermittedActivity { get; set; }
        public virtual DbSet<CodUnitPerspective> CodUnitPerspective { get; set; }
        public virtual DbSet<CodUnitServices> CodUnitServices { get; set; }
        public virtual DbSet<CodUnitStatus> CodUnitStatus { get; set; }
        public virtual DbSet<CodUnitTypes> CodUnitTypes { get; set; }
        public virtual DbSet<CodUntMntanItmBylndownrTnant> CodUntMntanItmBylndownrTnant { get; set; }
        public virtual DbSet<CodeSubUnitTypes> CodeSubUnitTypes { get; set; }
        public virtual DbSet<ContrInstallMent> ContrInstallMent { get; set; }
        public virtual DbSet<ContrInstallMentDetail> ContrInstallMentDetail { get; set; }
        public virtual DbSet<CrmLeadTypes> CrmLeadTypes { get; set; }
        public virtual DbSet<CrmLeads> CrmLeads { get; set; }
        public virtual DbSet<CrmLeadsMembers> CrmLeadsMembers { get; set; }
        public virtual DbSet<CrmLeadsMembersDetails> CrmLeadsMembersDetails { get; set; }
        public virtual DbSet<CrmLeadsMembersJoin> CrmLeadsMembersJoin { get; set; }
        public virtual DbSet<CrmMarketChannels> CrmMarketChannels { get; set; }
        public virtual DbSet<CrmSalesPlan> CrmSalesPlan { get; set; }
        public virtual DbSet<CrmSalesPlanDetail> CrmSalesPlanDetail { get; set; }
        public virtual DbSet<CrmSurvey> CrmSurvey { get; set; }
        public virtual DbSet<CrmSurveyMemberJoin> CrmSurveyMemberJoin { get; set; }
        public virtual DbSet<CrmTeamMembers> CrmTeamMembers { get; set; }
        public virtual DbSet<CrmTeams> CrmTeams { get; set; }
        public virtual DbSet<CrmVisitSurveys> CrmVisitSurveys { get; set; }
        public virtual DbSet<CrmVisitTypes> CrmVisitTypes { get; set; }
        public virtual DbSet<CrmVisits> CrmVisits { get; set; }
        public virtual DbSet<DeliverCustSearch> DeliverCustSearch { get; set; }
        public virtual DbSet<DeliverSearch> DeliverSearch { get; set; }
        public virtual DbSet<GPrintLog> GPrintLog { get; set; }
        public virtual DbSet<GUserGroups> GUserGroups { get; set; }
        public virtual DbSet<GUserModule> GUserModule { get; set; }
        public virtual DbSet<GUserRole> GUserRole { get; set; }
        public virtual DbSet<GUserRolePermissions> GUserRolePermissions { get; set; }
        public virtual DbSet<GUserScreenFields> GUserScreenFields { get; set; }
        public virtual DbSet<GUsers> GUsers { get; set; }
        public virtual DbSet<HrActivityDetailElements> HrActivityDetailElements { get; set; }
        public virtual DbSet<HrAttend> HrAttend { get; set; }
        public virtual DbSet<HrAttendDocDetails> HrAttendDocDetails { get; set; }
        public virtual DbSet<HrAttendDocFactElements> HrAttendDocFactElements { get; set; }
        public virtual DbSet<HrAttendElementTrans> HrAttendElementTrans { get; set; }
        public virtual DbSet<HrAttendanceDoc> HrAttendanceDoc { get; set; }
        public virtual DbSet<HrAttendanceElements> HrAttendanceElements { get; set; }
        public virtual DbSet<HrAttendrole> HrAttendrole { get; set; }
        public virtual DbSet<HrDepartments> HrDepartments { get; set; }
        public virtual DbSet<HrDevicesCon> HrDevicesCon { get; set; }
        public virtual DbSet<HrEducation> HrEducation { get; set; }
        public virtual DbSet<HrEmpActivity> HrEmpActivity { get; set; }
        public virtual DbSet<HrEmpActivityDetail> HrEmpActivityDetail { get; set; }
        public virtual DbSet<HrEmpDocTypes> HrEmpDocTypes { get; set; }
        public virtual DbSet<HrEmpDocuments> HrEmpDocuments { get; set; }
        public virtual DbSet<HrEmpElementPeriodBalance> HrEmpElementPeriodBalance { get; set; }
        public virtual DbSet<HrEmpGroups> HrEmpGroups { get; set; }
        public virtual DbSet<HrEmpLoanRequest> HrEmpLoanRequest { get; set; }
        public virtual DbSet<HrEmpLoans> HrEmpLoans { get; set; }
        public virtual DbSet<HrEmpMovePromotDetail> HrEmpMovePromotDetail { get; set; }
        public virtual DbSet<HrEmpMovePromotion> HrEmpMovePromotion { get; set; }
        public virtual DbSet<HrEmpSalaryDistribution> HrEmpSalaryDistribution { get; set; }
        public virtual DbSet<HrEmpSalaryTypes> HrEmpSalaryTypes { get; set; }
        public virtual DbSet<HrEmpVacation> HrEmpVacation { get; set; }
        public virtual DbSet<HrEmpVacationsDetails> HrEmpVacationsDetails { get; set; }
        public virtual DbSet<HrEmployees> HrEmployees { get; set; }
        public virtual DbSet<HrEmpsSalaryTemp> HrEmpsSalaryTemp { get; set; }
        public virtual DbSet<HrJobs> HrJobs { get; set; }
        public virtual DbSet<HrKpis> HrKpis { get; set; }
        public virtual DbSet<HrLeavPermissionRequest> HrLeavPermissionRequest { get; set; }
        public virtual DbSet<HrLeavePermision> HrLeavePermision { get; set; }
        public virtual DbSet<HrMobileSetting> HrMobileSetting { get; set; }
        public virtual DbSet<HrPeriodTableDetail> HrPeriodTableDetail { get; set; }
        public virtual DbSet<HrPeriodTablePolicy> HrPeriodTablePolicy { get; set; }
        public virtual DbSet<HrPeriodTableVacations> HrPeriodTableVacations { get; set; }
        public virtual DbSet<HrPeriodsTables> HrPeriodsTables { get; set; }
        public virtual DbSet<HrRewardAndPenalty> HrRewardAndPenalty { get; set; }
        public virtual DbSet<HrSalaryCalcMethod> HrSalaryCalcMethod { get; set; }
        public virtual DbSet<HrSalaryIssueDetails> HrSalaryIssueDetails { get; set; }
        public virtual DbSet<HrSalaryIssueDistribution> HrSalaryIssueDistribution { get; set; }
        public virtual DbSet<HrSalaryIssueDoc> HrSalaryIssueDoc { get; set; }
        public virtual DbSet<HrSalaryTypes> HrSalaryTypes { get; set; }
        public virtual DbSet<HrSegments> HrSegments { get; set; }
        public virtual DbSet<HrShifts> HrShifts { get; set; }
        public virtual DbSet<HrTermination> HrTermination { get; set; }
        public virtual DbSet<HrVacationDoc> HrVacationDoc { get; set; }
        public virtual DbSet<HrVacationEdit> HrVacationEdit { get; set; }
        public virtual DbSet<HrVacationRequest> HrVacationRequest { get; set; }
        public virtual DbSet<LaLands> LaLands { get; set; }
        public virtual DbSet<LaPropSerial> LaPropSerial { get; set; }
        public virtual DbSet<MobSalesInvoice> MobSalesInvoice { get; set; }
        public virtual DbSet<MobSalesInvoiceItemCard> MobSalesInvoiceItemCard { get; set; }
        public virtual DbSet<MsReturnSalesReq> MsReturnSalesReq { get; set; } 

        public virtual DbSet<MsReturnSalesReqItemCard> MsReturnSalesReqItemCard { get; set; }
        
        public virtual DbSet<ReturnSalesReqSearch> ReturnSalesReqSearch { get; set; }

        public virtual DbSet<MsAdjustMents> MsAdjustMents { get; set; }
        public virtual DbSet<MsAttachments> MsAttachments { get; set; }
        public virtual DbSet<MsBankAccount> MsBankAccount { get; set; }
        public virtual DbSet<MsBoxBank> MsBoxBank { get; set; }
        public virtual DbSet<MsBoxCurrency> MsBoxCurrency { get; set; }
        public virtual DbSet<MsBoxTransferDetail> MsBoxTransferDetail { get; set; }
        public virtual DbSet<MsBoxTransferNote> MsBoxTransferNote { get; set; }
        public virtual DbSet<MsBoxUsers> MsBoxUsers { get; set; }
        public virtual DbSet<MsBusinessPartnerCategory> MsBusinessPartnerCategory { get; set; }
        public virtual DbSet<MsBusinessPartnerType> MsBusinessPartnerType { get; set; }
        public virtual DbSet<MsBusinessPartners> MsBusinessPartners { get; set; }
        public virtual DbSet<MsCashTransactionDetail> MsCashTransactionDetail { get; set; }
        public virtual DbSet<MsCheqBooks> MsCheqBooks { get; set; }
        public virtual DbSet<MsChequeTransfer> MsChequeTransfer { get; set; }
        public virtual DbSet<MsChequeTransferDetail> MsChequeTransferDetail { get; set; }
        public virtual DbSet<MsChequesOpenning> MsChequesOpenning { get; set; }
        public virtual DbSet<MsCommission> MsCommission { get; set; }
        public virtual DbSet<MsCompany> MsCompany { get; set; }
        public virtual DbSet<MsCurrency> MsCurrency { get; set; }
        public virtual DbSet<MsCurrencyCategory> MsCurrencyCategory { get; set; }
        public virtual DbSet<MsCurrencyCategoryJoin> MsCurrencyCategoryJoin { get; set; }
        public virtual DbSet<MsCurrencyDailyRateChanges> MsCurrencyDailyRateChanges { get; set; }
        public virtual DbSet<MsCurrencyRate> MsCurrencyRate { get; set; }
        public virtual DbSet<MsCusromerUsers> MsCusromerUsers { get; set; }
        public virtual DbSet<MsCustImgs> MsCustImgs { get; set; }
        public virtual DbSet<MsCustomer> MsCustomer { get; set; }
        public virtual DbSet<MsCustomerBranches> MsCustomerBranches { get; set; }
        public virtual DbSet<MsCustomerCategory> MsCustomerCategory { get; set; }
        public virtual DbSet<MsCustomerContacts> MsCustomerContacts { get; set; }
        public virtual DbSet<MsCustomerFollowUpTypes> MsCustomerFollowUpTypes { get; set; }
        public virtual DbSet<MsCustomerTypes> MsCustomerTypes { get; set; }
        public virtual DbSet<MsCustomersFollowUp> MsCustomersFollowUp { get; set; }
        public virtual DbSet<MsDeliverItemCard> MsDeliverItemCard { get; set; }
        public virtual DbSet<MsDeliverSalesInvoice> MsDeliverSalesInvoice { get; set; }
        public virtual DbSet<MsDeliverSalesInvoiceExpenses> MsDeliverSalesInvoiceExpenses { get; set; }
        public virtual DbSet<MsDeliverSalesInvoiceMultiAccounts> MsDeliverSalesInvoiceMultiAccounts { get; set; }
        public virtual DbSet<MsDescription> MsDescription { get; set; }
        public virtual DbSet<MsExpenses> MsExpenses { get; set; }
        public virtual DbSet<MsGaCapacity> MsGaCapacity { get; set; }
        public virtual DbSet<MsGaLetterExport> MsGaLetterExport { get; set; }
        public virtual DbSet<MsGaLetterExportDetail> MsGaLetterExportDetail { get; set; }
        public virtual DbSet<MsGaLetterFayum> MsGaLetterFayum { get; set; }
        public virtual DbSet<MsGaLetterFayumDetail> MsGaLetterFayumDetail { get; set; }
        public virtual DbSet<MsGaLetterNormal> MsGaLetterNormal { get; set; }
        public virtual DbSet<MsGaLetterNormalDetail> MsGaLetterNormalDetail { get; set; }
        public virtual DbSet<MsGaLetterQuery> MsGaLetterQuery { get; set; }
        public virtual DbSet<MsGaLetterTax> MsGaLetterTax { get; set; }
        public virtual DbSet<MsGaLetterTempTax> MsGaLetterTempTax { get; set; }
        public virtual DbSet<MsGaMachineType> MsGaMachineType { get; set; }
        public virtual DbSet<MsGaMoror> MsGaMoror { get; set; }
        public virtual DbSet<MsGaMotorSn> MsGaMotorSn { get; set; }
        public virtual DbSet<MsGaMotorSndetail> MsGaMotorSndetail { get; set; }
        public virtual DbSet<MsGaPeriodicBook> MsGaPeriodicBook { get; set; }
        public virtual DbSet<MsGaPeriodicBookDetail> MsGaPeriodicBookDetail { get; set; }
        public virtual DbSet<MsGaShipment> MsGaShipment { get; set; }
        public virtual DbSet<MsGaShipmentDetail> MsGaShipmentDetail { get; set; }
        public virtual DbSet<MsItemAlternatives> MsItemAlternatives { get; set; }
        public virtual DbSet<MsItemCard> MsItemCard { get; set; }
        public virtual DbSet<MsItemCardOffers> MsItemCardOffers { get; set; }
        public virtual DbSet<MsItemCardVendors> MsItemCardVendors { get; set; }
        public virtual DbSet<MsItemCategory> MsItemCategory { get; set; }
        public virtual DbSet<MsItemCollection> MsItemCollection { get; set; }
        public virtual DbSet<MsItemCostHistory> MsItemCostHistory { get; set; }
        public virtual DbSet<MsItemImages> MsItemImages { get; set; }
        public virtual DbSet<MsItemPartition> MsItemPartition { get; set; }
        public virtual DbSet<MsItemSerials> MsItemSerials { get; set; }
        public virtual DbSet<MsItemSerialsTransactions> MsItemSerialsTransactions { get; set; }
        public virtual DbSet<MsItemShortage> MsItemShortage { get; set; }
        public virtual DbSet<MsItemStartQty> MsItemStartQty { get; set; }
        public virtual DbSet<MsItemStockAdjustment> MsItemStockAdjustment { get; set; }
        public virtual DbSet<MsItemStockAdjustmentDetail> MsItemStockAdjustmentDetail { get; set; }
        public virtual DbSet<MsItemUnit> MsItemUnit { get; set; }
        public virtual DbSet<MsItemUnitPackingJoin> MsItemUnitPackingJoin { get; set; }
        public virtual DbSet<MsItemVendors> MsItemVendors { get; set; }
        public virtual DbSet<MsJewelryPricing> MsJewelryPricing { get; set; }
        public virtual DbSet<MsKeeperBank> MsKeeperBank { get; set; }
        public virtual DbSet<MsKeeperBankDetail> MsKeeperBankDetail { get; set; }
        public virtual DbSet<MsLetterOfGuarantee> MsLetterOfGuarantee { get; set; }
        public virtual DbSet<MsLetterOfGuaranteeCategory> MsLetterOfGuaranteeCategory { get; set; }
        public virtual DbSet<MsLetterOfGuaranteeStatus> MsLetterOfGuaranteeStatus { get; set; }
        public virtual DbSet<MsLetterOfGuaranteeTrans> MsLetterOfGuaranteeTrans { get; set; }
        public virtual DbSet<MsLetterOfGuaranteeTypes> MsLetterOfGuaranteeTypes { get; set; }
        public virtual DbSet<MsLotNumberConfiguration> MsLotNumberConfiguration { get; set; }
        public virtual DbSet<MsLotNumberExpiry> MsLotNumberExpiry { get; set; }
        public virtual DbSet<MsMobSettings> MsMobSettings { get; set; }
        public virtual DbSet<MsPartition> MsPartition { get; set; }
        public virtual DbSet<MsPaymentNote> MsPaymentNote { get; set; }
        public virtual DbSet<MsPaymentNoteCurrencies> MsPaymentNoteCurrencies { get; set; }
        public virtual DbSet<MsPaymentNoteItems> MsPaymentNoteItems { get; set; }
        public virtual DbSet<MsPettyCashDetails> MsPettyCashDetails { get; set; }
        public virtual DbSet<MsPettyPaymentJoin> MsPettyPaymentJoin { get; set; }
        public virtual DbSet<MsPettycash> MsPettycash { get; set; }
        public virtual DbSet<MsPosItemCategory> MsPosItemCategory { get; set; }
        public virtual DbSet<MsPosPaymentMethods> MsPosPaymentMethods { get; set; }
        public virtual DbSet<MsPosShifts> MsPosShifts { get; set; }
        public virtual DbSet<MsPosSpecialItems> MsPosSpecialItems { get; set; }
        public virtual DbSet<MsPossettings> MsPossettings { get; set; }
        public virtual DbSet<MsPurchInvVehicleJobOrderJoin> MsPurchInvVehicleJobOrderJoin { get; set; }
        public virtual DbSet<MsItemCardDefaulPartitions> MsItemCardDefaulPartitions { get; set; }
        public virtual DbSet<MsPurchOrderDetail> MsPurchOrderDetail { get; set; }
        public virtual DbSet<MsPurchOrderReqDetail> MsPurchOrderReqDetail { get; set; }
        public virtual DbSet<MsPurchasInvoice> MsPurchasInvoice { get; set; }
        public virtual DbSet<MsPurchasInvoiceCurrencies> MsPurchasInvoiceCurrencies { get; set; }
        public virtual DbSet<MsPurchasInvoiceMultiAccounts> MsPurchasInvoiceMultiAccounts { get; set; }
        public virtual DbSet<MsPurchasOrder> MsPurchasOrder { get; set; }
        public virtual DbSet<MsPurchasOrderRequest> MsPurchasOrderRequest { get; set; }
        public virtual DbSet<MsPurchaseInvoiceCostReceived> MsPurchaseInvoiceCostReceived { get; set; }
        public virtual DbSet<MsPurchaseInvoiceExpenses> MsPurchaseInvoiceExpenses { get; set; }
        public virtual DbSet<MsPurchaseInvoiceItemCard> MsPurchaseInvoiceItemCard { get; set; }
        public virtual DbSet<MsRecPayDocJoin> MsRecPayDocJoin { get; set; }
        public virtual DbSet<MsReceiptNote> MsReceiptNote { get; set; }
        public virtual DbSet<MsReceiptNoteCurrencies> MsReceiptNoteCurrencies { get; set; }
        public virtual DbSet<MsReturnPurchase> MsReturnPurchase { get; set; }
        public virtual DbSet<MsReturnPurchaseCurrencies> MsReturnPurchaseCurrencies { get; set; }
        public virtual DbSet<MsReturnPurchaseExpenses> MsReturnPurchaseExpenses { get; set; }
        public virtual DbSet<MsReturnPurchaseItem> MsReturnPurchaseItem { get; set; }
        public virtual DbSet<MsReturnPurchaseMultiAccounts> MsReturnPurchaseMultiAccounts { get; set; }
        public virtual DbSet<MsReturnSales> MsReturnSales { get; set; }
        public virtual DbSet<MsReturnSalesCurrencies> MsReturnSalesCurrencies { get; set; }
        public virtual DbSet<MsReturnSalesExpenses> MsReturnSalesExpenses { get; set; }
        public virtual DbSet<MsReturnSalesItemCard> MsReturnSalesItemCard { get; set; }
        public virtual DbSet<MsReturnSalesMultiAccounts> MsReturnSalesMultiAccounts { get; set; }
        public virtual DbSet<MsSalesInvJobOrderJoin> MsSalesInvJobOrderJoin { get; set; }
        public virtual DbSet<MsSalesInvVehiclJobOrderJoin> MsSalesInvVehiclJobOrderJoin { get; set; }
        public virtual DbSet<MsSalesInvoice> MsSalesInvoice { get; set; }
        public virtual DbSet<MsSalesInvoiceCostDeliver> MsSalesInvoiceCostDeliver { get; set; }
        public virtual DbSet<MsSalesInvoiceCurrencies> MsSalesInvoiceCurrencies { get; set; }
        public virtual DbSet<MsSalesInvoiceExpenses> MsSalesInvoiceExpenses { get; set; }
        public virtual DbSet<MsSalesInvoiceItemCard> MsSalesInvoiceItemCard { get; set; }
        public virtual DbSet<MsSalesInvoiceItemCardDeleted> MsSalesInvoiceItemCardDeleted { get; set; }
        public virtual DbSet<MsSalesInvoiceMultiAccounts> MsSalesInvoiceMultiAccounts { get; set; }
        public virtual DbSet<MsSalesInvoiceQualityDeliveryDocs> MsSalesInvoiceQualityDeliveryDocs { get; set; }
        public virtual DbSet<MsSalesInvoiceQualityMissedItems> MsSalesInvoiceQualityMissedItems { get; set; }
        public virtual DbSet<MsSalesItemsOffers> MsSalesItemsOffers { get; set; }
        public virtual DbSet<MsSalesItemsOffersDetails> MsSalesItemsOffersDetails { get; set; }
        public virtual DbSet<MsSalesOffer> MsSalesOffer { get; set; }
        public virtual DbSet<MsSalesOfferItemCard> MsSalesOfferItemCard { get; set; }
        public virtual DbSet<MsSalesOfferItemRequest> MsSalesOfferItemRequest { get; set; }
        public virtual DbSet<MsSalesOfferRequest> MsSalesOfferRequest { get; set; }
        public virtual DbSet<MsSalesOrder> MsSalesOrder { get; set; }
        public virtual DbSet<MsSalesOrderItemCard> MsSalesOrderItemCard { get; set; }
        public virtual DbSet<MsSettings> MsSettings { get; set; }
        public virtual DbSet<MsStockReceiptItemCard> MsStockReceiptItemCard { get; set; }
        public virtual DbSet<MsStockRecript> MsStockRecript { get; set; }
        public virtual DbSet<MsStockRecriptExpenses> MsStockRecriptExpenses { get; set; }
        public virtual DbSet<MsStockRecriptMultiAccounts> MsStockRecriptMultiAccounts { get; set; }
        public virtual DbSet<MsStockTranItemCard> MsStockTranItemCard { get; set; }
        public virtual DbSet<MsStockTranItemCardReq> MsStockTranItemCardReq { get; set; }
        public virtual DbSet<MsStockTransferNote> MsStockTransferNote { get; set; }
        public virtual DbSet<MsStockTransferNoteRequest> MsStockTransferNoteRequest { get; set; }
        public virtual DbSet<MsStores> MsStores { get; set; }
        public virtual DbSet<MsTaxes> MsTaxes { get; set; }
        public virtual DbSet<MsTerms> MsTerms { get; set; }
        public virtual DbSet<MsTermsCostCenter> MsTermsCostCenter { get; set; }
        public virtual DbSet<MsTermsDetails> MsTermsDetails { get; set; }
        public virtual DbSet<MsUpdateReplication> MsUpdateReplication { get; set; }
        public virtual DbSet<MsUserAuthentications> MsUserAuthentications { get; set; }
        public virtual DbSet<MsVendImgs> MsVendImgs { get; set; }
        public virtual DbSet<MsVendor> MsVendor { get; set; }
        public virtual DbSet<MsVendorBranches> MsVendorBranches { get; set; }
        public virtual DbSet<MsVendorCategory> MsVendorCategory { get; set; }
        public virtual DbSet<MsVendorContacts> MsVendorContacts { get; set; }
        public virtual DbSet<MsVendorTypes> MsVendorTypes { get; set; }
        public virtual DbSet<MsVendorUsers> MsVendorUsers { get; set; }
        public virtual DbSet<MsVwAssetExcelExport> MsVwAssetExcelExport { get; set; }
        public virtual DbSet<MsVwBankTran> MsVwBankTran { get; set; }
        public virtual DbSet<MsVwCustomerExcelExport> MsVwCustomerExcelExport { get; set; }
        public virtual DbSet<MsVwItemBatchStores> MsVwItemBatchStores { get; set; }
        public virtual DbSet<MsVwItemBatchesQtyInStores> MsVwItemBatchesQtyInStores { get; set; }
        public virtual DbSet<MsVwItemCardExcelExport> MsVwItemCardExcelExport { get; set; }
        public virtual DbSet<MsVwItemStores> MsVwItemStores { get; set; }
        public virtual DbSet<MsVwLetterDocSearch> MsVwLetterDocSearch { get; set; }
        public virtual DbSet<MsVwLetterSearchresult> MsVwLetterSearchresult { get; set; }
        public virtual DbSet<MsVwLetterTaxSearch> MsVwLetterTaxSearch { get; set; }
        public virtual DbSet<MsVwQtyInStores> MsVwQtyInStores { get; set; }
        public virtual DbSet<MsVwVendorExcelExport> MsVwVendorExcelExport { get; set; }
        public virtual DbSet<MsWeightCard> MsWeightCard { get; set; }
        public virtual DbSet<MsWeightcardItems> MsWeightcardItems { get; set; }
        public virtual DbSet<MsgaCity> MsgaCity { get; set; }
        public virtual DbSet<Names> Names { get; set; }
        public virtual DbSet<PayNoteSearch> PayNoteSearch { get; set; }
        public virtual DbSet<PrintBoxType> PrintBoxType { get; set; }
        public virtual DbSet<PrintBreakType> PrintBreakType { get; set; }
        public virtual DbSet<PrintClosing> PrintClosing { get; set; }
        public virtual DbSet<PrintConnectionType> PrintConnectionType { get; set; }
        public virtual DbSet<PrintCoverType> PrintCoverType { get; set; }
        public virtual DbSet<PrintCutterTypeId> PrintCutterTypeId { get; set; }
        public virtual DbSet<PrintDistribution> PrintDistribution { get; set; }
        public virtual DbSet<PrintEditType> PrintEditType { get; set; }
        public virtual DbSet<PrintFaceType> PrintFaceType { get; set; }
        public virtual DbSet<PrintGofferType> PrintGofferType { get; set; }
        public virtual DbSet<PrintGradeType> PrintGradeType { get; set; }
        public virtual DbSet<PrintGramType> PrintGramType { get; set; }
        public virtual DbSet<PrintIndustry> PrintIndustry { get; set; }
        public virtual DbSet<PrintJobOrderCreationType> PrintJobOrderCreationType { get; set; }
        public virtual DbSet<PrintPadingType> PrintPadingType { get; set; }
        public virtual DbSet<PrintPricing> PrintPricing { get; set; }
        public virtual DbSet<PrintPricingDetails> PrintPricingDetails { get; set; }
        public virtual DbSet<PrintQoutation> PrintQoutation { get; set; }
        public virtual DbSet<PrintQoutationDetails> PrintQoutationDetails { get; set; }
        public virtual DbSet<PrintQoutationDetailsItems> PrintQoutationDetailsItems { get; set; }
        public virtual DbSet<PrintSectors> PrintSectors { get; set; }
        public virtual DbSet<PrintSizeType> PrintSizeType { get; set; }
        public virtual DbSet<PrintStickyType> PrintStickyType { get; set; }
        public virtual DbSet<PrintStocking> PrintStocking { get; set; }
        public virtual DbSet<ProdAttributeValue> ProdAttributeValue { get; set; }
        public virtual DbSet<ProdBasicUnits> ProdBasicUnits { get; set; }
        public virtual DbSet<ProdBillOfMaterial> ProdBillOfMaterial { get; set; }
        public virtual DbSet<ProdBillOfMaterialItems> ProdBillOfMaterialItems { get; set; }
        public virtual DbSet<ProdBillOfMaterialSecondaryItems> ProdBillOfMaterialSecondaryItems { get; set; }
        public virtual DbSet<ProdEmpEquipDistrib> ProdEmpEquipDistrib { get; set; }
        public virtual DbSet<ProdEmpEquipDistribDetail> ProdEmpEquipDistribDetail { get; set; }
        public virtual DbSet<ProdEmpJobOrderDistrib> ProdEmpJobOrderDistrib { get; set; }
        public virtual DbSet<ProdEmpJobOrderDistribDetail> ProdEmpJobOrderDistribDetail { get; set; }
        public virtual DbSet<ProdEquipProfile> ProdEquipProfile { get; set; }
        public virtual DbSet<ProdEquipments> ProdEquipments { get; set; }
        public virtual DbSet<ProdItemAttributes> ProdItemAttributes { get; set; }
        public virtual DbSet<ProdItemAttributesBatche> ProdItemAttributesBatche { get; set; }
        public virtual DbSet<ProdItemAttributesBatchesDetails> ProdItemAttributesBatchesDetails { get; set; }
        public virtual DbSet<ProdItemAttributsJoin> ProdItemAttributsJoin { get; set; }
        public virtual DbSet<ProdItemBatchPartition> ProdItemBatchPartition { get; set; }
        public virtual DbSet<ProdItemcardExpenses> ProdItemcardExpenses { get; set; }
        public virtual DbSet<ProdJobOrder> ProdJobOrder { get; set; }
        public virtual DbSet<ProdJobOrderClosing> ProdJobOrderClosing { get; set; }
        public virtual DbSet<ProdJobOrderEmpCostDoc> ProdJobOrderEmpCostDoc { get; set; }
        public virtual DbSet<ProdJobOrderEmpCostDocDetail> ProdJobOrderEmpCostDocDetail { get; set; }
        public virtual DbSet<ProdJobOrderEquipCostDoc> ProdJobOrderEquipCostDoc { get; set; }
        public virtual DbSet<ProdJobOrderEquipCostDocDetail> ProdJobOrderEquipCostDocDetail { get; set; }
        public virtual DbSet<ProdJobOrderEquipment> ProdJobOrderEquipment { get; set; }
        public virtual DbSet<ProdJobOrderExpenses> ProdJobOrderExpenses { get; set; }
        public virtual DbSet<ProdJobOrderGoStock> ProdJobOrderGoStock { get; set; }
        public virtual DbSet<ProdJobOrderJobs> ProdJobOrderJobs { get; set; }
        public virtual DbSet<ProdJobOrderMaterials> ProdJobOrderMaterials { get; set; }
        public virtual DbSet<ProdJobOrderProducts> ProdJobOrderProducts { get; set; }
        public virtual DbSet<ProdJobOrderPurchaseInvoices> ProdJobOrderPurchaseInvoices { get; set; }
        public virtual DbSet<ProdJobOrderScrap> ProdJobOrderScrap { get; set; }
        public virtual DbSet<ProdJobOrderServices> ProdJobOrderServices { get; set; }
        public virtual DbSet<ProdJobOrderTasks> ProdJobOrderTasks { get; set; }
        public virtual DbSet<ProdJobOrderType> ProdJobOrderType { get; set; }
        public virtual DbSet<ProdJobOrderWorkFlow> ProdJobOrderWorkFlow { get; set; }
        public virtual DbSet<ProdJoinTaskEquipments> ProdJoinTaskEquipments { get; set; }
        public virtual DbSet<ProdJoinTaskJob> ProdJoinTaskJob { get; set; }
        public virtual DbSet<ProdProductionLine> ProdProductionLine { get; set; }
        public virtual DbSet<ProdProductionLineDetails> ProdProductionLineDetails { get; set; }
        public virtual DbSet<ProdProductionOrder> ProdProductionOrder { get; set; }
        public virtual DbSet<ProdProductionOrderDetail> ProdProductionOrderDetail { get; set; }
        public virtual DbSet<ProdRecipe> ProdRecipe { get; set; }
        public virtual DbSet<ProdRecipeDetail> ProdRecipeDetail { get; set; }
        public virtual DbSet<ProdSettings> ProdSettings { get; set; }
        public virtual DbSet<ProdTasks> ProdTasks { get; set; }
        public virtual DbSet<ProdWorkOrder> ProdWorkOrder { get; set; }
        public virtual DbSet<ProdWorkOrderEquipment> ProdWorkOrderEquipment { get; set; }
        public virtual DbSet<ProdWorkOrderExpenses> ProdWorkOrderExpenses { get; set; }
        public virtual DbSet<ProdWorkOrderItemRecQualityDocs> ProdWorkOrderItemRecQualityDocs { get; set; }
        public virtual DbSet<ProdWorkOrderMaterials> ProdWorkOrderMaterials { get; set; }
        public virtual DbSet<ProdWorkOrderProdItems> ProdWorkOrderProdItems { get; set; }
        public virtual DbSet<ProdWorkOrderScrap> ProdWorkOrderScrap { get; set; }
        public virtual DbSet<ProdWorkOrderServices> ProdWorkOrderServices { get; set; }
        public virtual DbSet<ProjAccounts> ProjAccounts { get; set; }
        public virtual DbSet<ProjEstimateItems> ProjEstimateItems { get; set; }
        public virtual DbSet<ProjExpenses> ProjExpenses { get; set; }
        public virtual DbSet<ProjFund> ProjFund { get; set; }
        public virtual DbSet<ProjProjDocuments> ProjProjDocuments { get; set; }
        public virtual DbSet<ProjProjExploitJoin> ProjProjExploitJoin { get; set; }
        public virtual DbSet<ProjProjInsurance> ProjProjInsurance { get; set; }
        public virtual DbSet<ProjProjInsuranceUnit> ProjProjInsuranceUnit { get; set; }
        public virtual DbSet<ProjProjItemEmpTaskJoin> ProjProjItemEmpTaskJoin { get; set; }
        public virtual DbSet<ProjProjOccupTypeJoin> ProjProjOccupTypeJoin { get; set; }
        public virtual DbSet<ProjProjOwnerJoin> ProjProjOwnerJoin { get; set; }
        public virtual DbSet<ProjProjParkingJoin> ProjProjParkingJoin { get; set; }
        public virtual DbSet<ProjProjPermitActivityJoin> ProjProjPermitActivityJoin { get; set; }
        public virtual DbSet<ProjProjPerspectiveJoin> ProjProjPerspectiveJoin { get; set; }
        public virtual DbSet<ProjProjPicture> ProjProjPicture { get; set; }
        public virtual DbSet<ProjProjUnitDocument> ProjProjUnitDocument { get; set; }
        public virtual DbSet<ProjProjUnitExploitJoin> ProjProjUnitExploitJoin { get; set; }
        public virtual DbSet<ProjProjUnitInstallTemp> ProjProjUnitInstallTemp { get; set; }
        public virtual DbSet<ProjProjUnitOccupTypeJoin> ProjProjUnitOccupTypeJoin { get; set; }
        public virtual DbSet<ProjProjUnitOwnerJoin> ProjProjUnitOwnerJoin { get; set; }
        public virtual DbSet<ProjProjUnitPermitActivityJoin> ProjProjUnitPermitActivityJoin { get; set; }
        public virtual DbSet<ProjProjUnitPerspectiveJoin> ProjProjUnitPerspectiveJoin { get; set; }
        public virtual DbSet<ProjProjUnitPicture> ProjProjUnitPicture { get; set; }
        public virtual DbSet<ProjProjUnitService> ProjProjUnitService { get; set; }
        public virtual DbSet<ProjProjUnitSubUnits> ProjProjUnitSubUnits { get; set; }
        public virtual DbSet<ProjProjUnits> ProjProjUnits { get; set; }
        public virtual DbSet<ProjProjectItemEmpJoin> ProjProjectItemEmpJoin { get; set; }
        public virtual DbSet<ProjProjectItems> ProjProjectItems { get; set; }
        public virtual DbSet<ProjProjectItemsJoin> ProjProjectItemsJoin { get; set; }
        public virtual DbSet<ProjProjectItemsVendors> ProjProjectItemsVendors { get; set; }
        public virtual DbSet<ProjProjects> ProjProjects { get; set; }
        public virtual DbSet<ProjReInstallment> ProjReInstallment { get; set; }
        public virtual DbSet<ProjRealItems> ProjRealItems { get; set; }
        public virtual DbSet<ProjReservInstallments> ProjReservInstallments { get; set; }
        public virtual DbSet<ProjReserveUnitDocuments> ProjReserveUnitDocuments { get; set; }
        public virtual DbSet<ProjReserveUnitOwners> ProjReserveUnitOwners { get; set; }
        public virtual DbSet<ProjReserveUnitSellers> ProjReserveUnitSellers { get; set; }
        public virtual DbSet<ProjTenderContract> ProjTenderContract { get; set; }
        public virtual DbSet<ProjTenderContractAdds> ProjTenderContractAdds { get; set; }
        public virtual DbSet<ProjTenderContractDetail> ProjTenderContractDetail { get; set; }
        public virtual DbSet<ProjTenderContractDiscounts> ProjTenderContractDiscounts { get; set; }
        public virtual DbSet<ProjTenderContractorContract> ProjTenderContractorContract { get; set; }
        public virtual DbSet<ProjTenderContractorContractAdds> ProjTenderContractorContractAdds { get; set; }
        public virtual DbSet<ProjTenderContractorContractDetails> ProjTenderContractorContractDetails { get; set; }
        public virtual DbSet<ProjTenderContractorContractDiscounts> ProjTenderContractorContractDiscounts { get; set; }
        public virtual DbSet<ProjTenderContractorExitract> ProjTenderContractorExitract { get; set; }
        public virtual DbSet<ProjTenderContractorExitractAdds> ProjTenderContractorExitractAdds { get; set; }
        public virtual DbSet<ProjTenderContractorExitractDetail> ProjTenderContractorExitractDetail { get; set; }
        public virtual DbSet<ProjTenderContractorExitractDiscounts> ProjTenderContractorExitractDiscounts { get; set; }
        public virtual DbSet<ProjTenderExecutionExitract> ProjTenderExecutionExitract { get; set; }
        public virtual DbSet<ProjTenderExecutionExitractDetail> ProjTenderExecutionExitractDetail { get; set; }
        public virtual DbSet<ProjTenderItems> ProjTenderItems { get; set; }
        public virtual DbSet<ProjTenderItemsCategory> ProjTenderItemsCategory { get; set; }
        public virtual DbSet<ProjTenderOffer> ProjTenderOffer { get; set; }
        public virtual DbSet<ProjTenderOfferDetail> ProjTenderOfferDetail { get; set; }
        public virtual DbSet<ProjTenderOwnerExitract> ProjTenderOwnerExitract { get; set; }
        public virtual DbSet<ProjTenderOwnerExitractAdds> ProjTenderOwnerExitractAdds { get; set; }
        public virtual DbSet<ProjTenderOwnerExitractDetail> ProjTenderOwnerExitractDetail { get; set; }
        public virtual DbSet<ProjTenderOwnerExitractDiscounts> ProjTenderOwnerExitractDiscounts { get; set; }
        public virtual DbSet<ProjTenderPlan> ProjTenderPlan { get; set; }
        public virtual DbSet<ProjTenderPlanDetails> ProjTenderPlanDetails { get; set; }
        public virtual DbSet<ProjTenderPlanDistribution> ProjTenderPlanDistribution { get; set; }
        public virtual DbSet<ProjTenderPlanDistributionDetails> ProjTenderPlanDistributionDetails { get; set; }
        public virtual DbSet<ProjTenderQoutation> ProjTenderQoutation { get; set; }
        public virtual DbSet<ProjTenderQoutationDetails> ProjTenderQoutationDetails { get; set; }
        public virtual DbSet<ProjTenders> ProjTenders { get; set; }
        public virtual DbSet<ProjTendersDetails> ProjTendersDetails { get; set; }
        public virtual DbSet<ProjTendersReviewReasons> ProjTendersReviewReasons { get; set; }
        public virtual DbSet<ProjUnitConcession> ProjUnitConcession { get; set; }
        public virtual DbSet<ProjUnitHistoryLog> ProjUnitHistoryLog { get; set; }
        public virtual DbSet<ProjUnitReplacement> ProjUnitReplacement { get; set; }
        public virtual DbSet<ProjUnitReservation> ProjUnitReservation { get; set; }
        public virtual DbSet<ProjUnitReservationGuarantors> ProjUnitReservationGuarantors { get; set; }
        public virtual DbSet<PurInvVendSearch> PurInvVendSearch { get; set; }
        public virtual DbSet<PurOrderVendor> PurOrderVendor { get; set; }
        public virtual DbSet<PurRequestVendor> PurRequestVendor { get; set; }
        public virtual DbSet<QualityCategories> QualityCategories { get; set; }
        public virtual DbSet<QualityItemDeliverDetails> QualityItemDeliverDetails { get; set; }
        public virtual DbSet<QualityItemDelivery> QualityItemDelivery { get; set; }
        public virtual DbSet<QualityItemDeliveryPackages> QualityItemDeliveryPackages { get; set; }
        public virtual DbSet<QualityItemRecCheck> QualityItemRecCheck { get; set; }
        public virtual DbSet<QualityItemRecCheckDetail> QualityItemRecCheckDetail { get; set; }
        public virtual DbSet<QualityItemRecPackages> QualityItemRecPackages { get; set; }
        public virtual DbSet<QualityItemReceivTypes> QualityItemReceivTypes { get; set; }
        public virtual DbSet<QualityItemRecieve> QualityItemRecieve { get; set; }
        public virtual DbSet<QualityItemRecieveDetails> QualityItemRecieveDetails { get; set; }
        public virtual DbSet<ReciNotSearch> ReciNotSearch { get; set; }
        public virtual DbSet<RepairJobOrder> RepairJobOrder { get; set; }
        public virtual DbSet<RepairJobOrderComments> RepairJobOrderComments { get; set; }
        public virtual DbSet<RepairJobOrderEmps> RepairJobOrderEmps { get; set; }
        public virtual DbSet<RepairJobOrderItems> RepairJobOrderItems { get; set; }
        public virtual DbSet<RepairJobOrderScrapItems> RepairJobOrderScrapItems { get; set; }
        public virtual DbSet<RepairJobOrederExpenses> RepairJobOrederExpenses { get; set; }
        public virtual DbSet<RetPurVendSearch> RetPurVendSearch { get; set; }
        public virtual DbSet<RetSaleSearch> RetSaleSearch { get; set; }
        public virtual DbSet<SalesInvCustSearch> SalesInvCustSearch { get; set; }
        public virtual DbSet<SalesOfferCust> SalesOfferCust { get; set; }
        public virtual DbSet<SalesOrderCust> SalesOrderCust { get; set; }
        public virtual DbSet<SearchAdjustMent> SearchAdjustMent { get; set; }
        public virtual DbSet<SearchAssetSettings> SearchAssetSettings { get; set; }
        public virtual DbSet<SearchAssetTermination> SearchAssetTermination { get; set; }
        public virtual DbSet<SearchAttendanceDoc> SearchAttendanceDoc { get; set; }
        public virtual DbSet<SearchBankNotice> SearchBankNotice { get; set; }
        public virtual DbSet<SearchBoxTransferNote> SearchBoxTransferNote { get; set; }
        public virtual DbSet<SearchDeliveRetVend> SearchDeliveRetVend { get; set; }
        public virtual DbSet<SearchDepreciationDoc> SearchDepreciationDoc { get; set; }
        public virtual DbSet<SearchEmpActivity> SearchEmpActivity { get; set; }
        public virtual DbSet<SearchEmpDocuments> SearchEmpDocuments { get; set; }
        public virtual DbSet<SearchEmpLoanRequest> SearchEmpLoanRequest { get; set; }
        public virtual DbSet<SearchEmpMovePromotion> SearchEmpMovePromotion { get; set; }
        public virtual DbSet<SearchEmpVacation> SearchEmpVacation { get; set; }
        public virtual DbSet<SearchItemStockAdjustment> SearchItemStockAdjustment { get; set; }
        public virtual DbSet<SearchJobOrderEmpCostDoc> SearchJobOrderEmpCostDoc { get; set; }
        public virtual DbSet<SearchJobOrderEquipCostDoc> SearchJobOrderEquipCostDoc { get; set; }
        public virtual DbSet<SearchJurnalEntry> SearchJurnalEntry { get; set; }
        public virtual DbSet<SearchKeepers> SearchKeepers { get; set; }
        public virtual DbSet<SearchLeavPermissionRequest> SearchLeavPermissionRequest { get; set; }
        public virtual DbSet<SearchLeavePermision> SearchLeavePermision { get; set; }
        public virtual DbSet<SearchPassPorts> SearchPassPorts { get; set; }
        public virtual DbSet<SearchPettycash> SearchPettycash { get; set; }
        public virtual DbSet<SearchPrintPricing> SearchPrintPricing { get; set; }
        public virtual DbSet<SearchPrintQoutation> SearchPrintQoutation { get; set; }
        public virtual DbSet<SearchProductionOrder> SearchProductionOrder { get; set; }
        public virtual DbSet<SearchReqOfQoutation> SearchReqOfQoutation { get; set; }
        public virtual DbSet<SearchRewardAndPenalty> SearchRewardAndPenalty { get; set; }
        public virtual DbSet<SearchSalaryIssueDoc> SearchSalaryIssueDoc { get; set; }
        public virtual DbSet<SearchSalesOfferRequest> SearchSalesOfferRequest { get; set; }
        public virtual DbSet<SearchServiceRequest> SearchServiceRequest { get; set; }
        public virtual DbSet<SearchShippingDeclaration> SearchShippingDeclaration { get; set; }
        public virtual DbSet<SearchStockTransferNote> SearchStockTransferNote { get; set; }
        public virtual DbSet<SearchStockTransferNoteRequest> SearchStockTransferNoteRequest { get; set; }
        public virtual DbSet<SearchTermination> SearchTermination { get; set; }
        public virtual DbSet<SearchTrips> SearchTrips { get; set; }
        public virtual DbSet<SearchVacationDoc> SearchVacationDoc { get; set; }
        public virtual DbSet<SearchVacationEdit> SearchVacationEdit { get; set; }
        public virtual DbSet<SearchVacationRequest> SearchVacationRequest { get; set; }
        public virtual DbSet<SearchVehicleJobOrder> SearchVehicleJobOrder { get; set; }
        public virtual DbSet<SearchVehicleMovement> SearchVehicleMovement { get; set; }
        public virtual DbSet<SearchVehicleRenalContract> SearchVehicleRenalContract { get; set; }
        public virtual DbSet<SearchWeightCard> SearchWeightCard { get; set; }
        public virtual DbSet<SrAccomodation> SrAccomodation { get; set; }
        public virtual DbSet<SrBrands> SrBrands { get; set; }
        public virtual DbSet<SrComplaints> SrComplaints { get; set; }
        public virtual DbSet<SrContainerTypes> SrContainerTypes { get; set; }
        public virtual DbSet<SrDrivers> SrDrivers { get; set; }
        public virtual DbSet<SrEmpServicTypes> SrEmpServicTypes { get; set; }
        public virtual DbSet<SrExtension> SrExtension { get; set; }
        public virtual DbSet<SrFlateRate> SrFlateRate { get; set; }
        public virtual DbSet<SrFlight> SrFlight { get; set; }
        public virtual DbSet<SrGarage> SrGarage { get; set; }
        public virtual DbSet<SrHarbors> SrHarbors { get; set; }
        public virtual DbSet<SrHotels> SrHotels { get; set; }
        public virtual DbSet<SrJobAdditionalCost> SrJobAdditionalCost { get; set; }
        public virtual DbSet<SrJobComments> SrJobComments { get; set; }
        public virtual DbSet<SrJobExtrnalExpens> SrJobExtrnalExpens { get; set; }
        public virtual DbSet<SrJobFiles> SrJobFiles { get; set; }
        public virtual DbSet<SrJobOrder> SrJobOrder { get; set; }
        public virtual DbSet<SrJobSparts> SrJobSparts { get; set; }
        public virtual DbSet<SrJobSwages> SrJobSwages { get; set; }
        public virtual DbSet<SrMalfunctions> SrMalfunctions { get; set; }
        public virtual DbSet<SrProductsTypes> SrProductsTypes { get; set; }
        public virtual DbSet<SrPrograms> SrPrograms { get; set; }
        public virtual DbSet<SrReceptionImages> SrReceptionImages { get; set; }
        public virtual DbSet<SrReciption> SrReciption { get; set; }
        public virtual DbSet<SrReciptionDetail> SrReciptionDetail { get; set; }
        public virtual DbSet<SrReqOfQoutation> SrReqOfQoutation { get; set; }
        public virtual DbSet<SrServiceDistribution> SrServiceDistribution { get; set; }
        public virtual DbSet<SrServiceDistributionDetails> SrServiceDistributionDetails { get; set; }
        public virtual DbSet<SrServiceRequest> SrServiceRequest { get; set; }
        public virtual DbSet<SrServiceRequestResources> SrServiceRequestResources { get; set; }
        public virtual DbSet<SrServiceTypes> SrServiceTypes { get; set; }
        public virtual DbSet<SrShippingDeclaration> SrShippingDeclaration { get; set; }
        public virtual DbSet<SrTaskEmp> SrTaskEmp { get; set; }
        public virtual DbSet<SrTaskItem> SrTaskItem { get; set; }
        public virtual DbSet<SrTasks> SrTasks { get; set; }
        public virtual DbSet<SrTrafficLinePriceList> SrTrafficLinePriceList { get; set; }
        public virtual DbSet<SrTrafficLines> SrTrafficLines { get; set; }
        public virtual DbSet<SrTransportation> SrTransportation { get; set; }
        public virtual DbSet<SrTripAccomDetail> SrTripAccomDetail { get; set; }
        public virtual DbSet<SrTripProgramJoin> SrTripProgramJoin { get; set; }
        public virtual DbSet<SrTrips> SrTrips { get; set; }
        public virtual DbSet<SrVehicleItemCard> SrVehicleItemCard { get; set; }
        public virtual DbSet<SrVehicleJobOrder> SrVehicleJobOrder { get; set; }
        public virtual DbSet<SrVehicleJobOrderDetail> SrVehicleJobOrderDetail { get; set; }
        public virtual DbSet<SrVehicleMovement> SrVehicleMovement { get; set; }
        public virtual DbSet<SrVehicleMovementDetails> SrVehicleMovementDetails { get; set; }
        public virtual DbSet<SrVehicleRenalContract> SrVehicleRenalContract { get; set; }
        public virtual DbSet<SrVehicleRentPayJoin> SrVehicleRentPayJoin { get; set; }
        public virtual DbSet<SrVehicleRentPurchJoin> SrVehicleRentPurchJoin { get; set; }
        public virtual DbSet<SrVehicleRentRecJoin> SrVehicleRentRecJoin { get; set; }
        public virtual DbSet<SrVehicleRentSalesInvJoin> SrVehicleRentSalesInvJoin { get; set; }
        public virtual DbSet<SrVehicleShapes> SrVehicleShapes { get; set; }
        public virtual DbSet<SrVehicleTypes> SrVehicleTypes { get; set; }
        public virtual DbSet<SrVehicles> SrVehicles { get; set; }
        public virtual DbSet<SrVheicleJobOrderType> SrVheicleJobOrderType { get; set; }
        public virtual DbSet<SrWarranty> SrWarranty { get; set; }
        public virtual DbSet<StockArchives> StockArchives { get; set; }
        public virtual DbSet<StockBrokers> StockBrokers { get; set; }
        public virtual DbSet<StockCapitalUpdate> StockCapitalUpdate { get; set; }
        public virtual DbSet<StockCashTransfer> StockCashTransfer { get; set; }
        public virtual DbSet<StockCashWithdrawalReasons> StockCashWithdrawalReasons { get; set; }
        public virtual DbSet<StockCategories> StockCategories { get; set; }
        public virtual DbSet<StockDealers> StockDealers { get; set; }
        public virtual DbSet<StockMarkets> StockMarkets { get; set; }
        public virtual DbSet<StockOpenningBalance> StockOpenningBalance { get; set; }
        public virtual DbSet<StockOpenningBalanceDetails> StockOpenningBalanceDetails { get; set; }
        public virtual DbSet<StockPortfolio> StockPortfolio { get; set; }
        public virtual DbSet<StockPortfolioAccounts> StockPortfolioAccounts { get; set; }
        public virtual DbSet<StockPortfolioStockArchives> StockPortfolioStockArchives { get; set; }
        public virtual DbSet<StockPortfolioStocks> StockPortfolioStocks { get; set; }
        public virtual DbSet<StockRecCustSearch> StockRecCustSearch { get; set; }
        public virtual DbSet<StockRecSearch> StockRecSearch { get; set; }
        public virtual DbSet<StockRecVendSearch> StockRecVendSearch { get; set; }
        public virtual DbSet<StockSalesPurchase> StockSalesPurchase { get; set; }
        public virtual DbSet<StockSalesPurchaseDetails> StockSalesPurchaseDetails { get; set; }
        public virtual DbSet<StockSectors> StockSectors { get; set; }
        public virtual DbSet<StockShareholdersNames> StockShareholdersNames { get; set; }
        public virtual DbSet<StockStocks> StockStocks { get; set; }
        public virtual DbSet<StockTranTypes> StockTranTypes { get; set; }
        public virtual DbSet<StockTransfer> StockTransfer { get; set; }
        public virtual DbSet<StockTransferDetail> StockTransferDetail { get; set; }
        public virtual DbSet<SysAnalyticalCodeProccess> SysAnalyticalCodeProccess { get; set; }
        public virtual DbSet<SysAnalyticalCodeUpdateTypes> SysAnalyticalCodeUpdateTypes { get; set; }
        public virtual DbSet<SysAnalyticalCodeUpdates> SysAnalyticalCodeUpdates { get; set; }
        public virtual DbSet<SysAnalyticalCodes> SysAnalyticalCodes { get; set; }
        public virtual DbSet<SysBasket> SysBasket { get; set; }
        public virtual DbSet<SysBooks> SysBooks { get; set; }
        public virtual DbSet<SysCity> SysCity { get; set; }
        public virtual DbSet<SysConfigsms> SysConfigsms { get; set; }
        public virtual DbSet<SysCounter> SysCounter { get; set; }
        public virtual DbSet<SysCountries> SysCountries { get; set; }
        public virtual DbSet<SysFinancialIntervals> SysFinancialIntervals { get; set; }
        public virtual DbSet<SysFinancialYears> SysFinancialYears { get; set; }
        public virtual DbSet<SysFinancialYearsClosing> SysFinancialYearsClosing { get; set; }
        public virtual DbSet<SysFlexLists> SysFlexLists { get; set; }
        public virtual DbSet<SysLog> SysLog { get; set; }
        public virtual DbSet<SysNaming> SysNaming { get; set; }
        public virtual DbSet<SysNotificationTypes> SysNotificationTypes { get; set; }
        public virtual DbSet<SysNotifications> SysNotifications { get; set; }
        public virtual DbSet<SysRemotBranchesLog> SysRemotBranchesLog { get; set; }
        public virtual DbSet<SysRemotLogDetail> SysRemotLogDetail { get; set; }
        public virtual DbSet<SysRemotTranLog> SysRemotTranLog { get; set; }
        public virtual DbSet<SysRemoteBranchesLogDetaile> SysRemoteBranchesLogDetaile { get; set; }
        public virtual DbSet<TrOpenningBalance> TrOpenningBalance { get; set; }
        public virtual DbSet<TrOpenningBalanceDetails> TrOpenningBalanceDetails { get; set; }
        public virtual DbSet<VdeliverSalesInvfilter> VdeliverSalesInvfilter { get; set; }
        public virtual DbSet<VwAccountClassification> VwAccountClassification { get; set; }
        public virtual DbSet<VwAllAccountsTransactions> VwAllAccountsTransactions { get; set; }
        public virtual DbSet<VwAllAnalyticalCodTransactions> VwAllAnalyticalCodTransactions { get; set; }
        public virtual DbSet<VwAllAnalyticalCodTransactionsDetails> VwAllAnalyticalCodTransactionsDetails { get; set; }
        public virtual DbSet<VwAllCostCenterTransactions> VwAllCostCenterTransactions { get; set; }
        public virtual DbSet<VwAllJobOrderDocuments> VwAllJobOrderDocuments { get; set; }
        public virtual DbSet<VwAllJobOrders> VwAllJobOrders { get; set; }
        public virtual DbSet<VwAllLetOfGtransactions> VwAllLetOfGtransactions { get; set; }
        public virtual DbSet<VwAllRepairOrders> VwAllRepairOrders { get; set; }
        public virtual DbSet<VwAllSrJobOrderMotors> VwAllSrJobOrderMotors { get; set; }
        public virtual DbSet<VwAllVehicleJobOrdersDocs> VwAllVehicleJobOrdersDocs { get; set; }
        public virtual DbSet<VwAttendTime> VwAttendTime { get; set; }
        public virtual DbSet<VwCustomerCategory> VwCustomerCategory { get; set; }
        public virtual DbSet<VwDailyTransactions> VwDailyTransactions { get; set; }
        public virtual DbSet<VwEmpAttendanceTran> VwEmpAttendanceTran { get; set; }
        public virtual DbSet<VwGetAdjustMentsByCust> VwGetAdjustMentsByCust { get; set; }
        public virtual DbSet<VwGetAdjustMentsByVend> VwGetAdjustMentsByVend { get; set; }
        public virtual DbSet<VwGetAdjustMentsRank> VwGetAdjustMentsRank { get; set; }
        public virtual DbSet<VwGetAllBatches> VwGetAllBatches { get; set; }
        public virtual DbSet<VwGetAnalyticalCodeRank> VwGetAnalyticalCodeRank { get; set; }
        public virtual DbSet<VwGetAssetRank> VwGetAssetRank { get; set; }
        public virtual DbSet<VwGetAssetSettingsRank> VwGetAssetSettingsRank { get; set; }
        public virtual DbSet<VwGetAssetTerminationRank> VwGetAssetTerminationRank { get; set; }
        public virtual DbSet<VwGetAttendanceDocRank> VwGetAttendanceDocRank { get; set; }
        public virtual DbSet<VwGetBankNoticeRank> VwGetBankNoticeRank { get; set; }
        public virtual DbSet<VwGetBomrank> VwGetBomrank { get; set; }
        public virtual DbSet<VwGetBoxTransferNoteRank> VwGetBoxTransferNoteRank { get; set; }
        public virtual DbSet<VwGetCurrencyRank> VwGetCurrencyRank { get; set; }
        public virtual DbSet<VwGetCustomersRank> VwGetCustomersRank { get; set; }
        public virtual DbSet<VwGetDeliverSalesInvoiceByCust> VwGetDeliverSalesInvoiceByCust { get; set; }
        public virtual DbSet<VwGetDeliverSalesInvoiceByVend> VwGetDeliverSalesInvoiceByVend { get; set; }
        public virtual DbSet<VwGetDeliverSalesInvoiceRank> VwGetDeliverSalesInvoiceRank { get; set; }
        public virtual DbSet<VwGetDepreciationDocRank> VwGetDepreciationDocRank { get; set; }
        public virtual DbSet<VwGetEmpActivityRank> VwGetEmpActivityRank { get; set; }
        public virtual DbSet<VwGetEmpLoanRequestRank> VwGetEmpLoanRequestRank { get; set; }
        public virtual DbSet<VwGetEmpMovePromotionRank> VwGetEmpMovePromotionRank { get; set; }
        public virtual DbSet<VwGetEmpVacationRank> VwGetEmpVacationRank { get; set; }
        public virtual DbSet<VwGetGawabRecordRank> VwGetGawabRecordRank { get; set; }
        public virtual DbSet<VwGetHrTerminationRank> VwGetHrTerminationRank { get; set; }
        public virtual DbSet<VwGetItemAlters> VwGetItemAlters { get; set; }
        public virtual DbSet<VwGetItemCardRank> VwGetItemCardRank { get; set; }
        public virtual DbSet<VwGetItemStockAdjustmentRank> VwGetItemStockAdjustmentRank { get; set; }
        public virtual DbSet<VwGetJobOrderByCust> VwGetJobOrderByCust { get; set; }
        public virtual DbSet<VwGetJobOrderRank> VwGetJobOrderRank { get; set; }
        public virtual DbSet<VwGetJournalEntryRank> VwGetJournalEntryRank { get; set; }
        public virtual DbSet<VwGetKeeperBankRank> VwGetKeeperBankRank { get; set; }
        public virtual DbSet<VwGetLeavPermissionRequestRank> VwGetLeavPermissionRequestRank { get; set; }
        public virtual DbSet<VwGetLeavePermisionRank> VwGetLeavePermisionRank { get; set; }
        public virtual DbSet<VwGetNotifications> VwGetNotifications { get; set; }
        public virtual DbSet<VwGetPassPortRank> VwGetPassPortRank { get; set; }
        public virtual DbSet<VwGetPaymentNoteByCust> VwGetPaymentNoteByCust { get; set; }
        public virtual DbSet<VwGetPaymentNoteByVend> VwGetPaymentNoteByVend { get; set; }
        public virtual DbSet<VwGetPaymentNoteRank> VwGetPaymentNoteRank { get; set; }
        public virtual DbSet<VwGetPettycashRank> VwGetPettycashRank { get; set; }
        public virtual DbSet<VwGetPettycashSearch> VwGetPettycashSearch { get; set; }
        public virtual DbSet<VwGetProductionOrdeRank> VwGetProductionOrdeRank { get; set; }
        public virtual DbSet<VwGetPurchasInvoiceByVend> VwGetPurchasInvoiceByVend { get; set; }
        public virtual DbSet<VwGetPurchasInvoiceRank> VwGetPurchasInvoiceRank { get; set; }
        public virtual DbSet<VwGetPurchasOrderByVend> VwGetPurchasOrderByVend { get; set; }
        public virtual DbSet<VwGetPurchasOrderRank> VwGetPurchasOrderRank { get; set; }
        public virtual DbSet<VwGetPurchasOrderRequestRank> VwGetPurchasOrderRequestRank { get; set; }
        public virtual DbSet<VwGetReceiptNoteByCust> VwGetReceiptNoteByCust { get; set; }
        public virtual DbSet<VwGetReceiptNoteByVend> VwGetReceiptNoteByVend { get; set; }
        public virtual DbSet<VwGetReceiptNoteRank> VwGetReceiptNoteRank { get; set; }
        public virtual DbSet<VwGetRecipeRank> VwGetRecipeRank { get; set; }
        public virtual DbSet<VwGetReturnPurchaseByVend> VwGetReturnPurchaseByVend { get; set; }
        public virtual DbSet<VwGetReturnPurchaseRank> VwGetReturnPurchaseRank { get; set; }
        public virtual DbSet<VwGetReturnSalesByCust> VwGetReturnSalesByCust { get; set; }
        public virtual DbSet<VwGetReturnSalesRank> VwGetReturnSalesRank { get; set; }
        public virtual DbSet<VwGetRewardAndPenaltyRank> VwGetRewardAndPenaltyRank { get; set; }
        public virtual DbSet<VwGetSalaryIssueDocRank> VwGetSalaryIssueDocRank { get; set; }
        public virtual DbSet<VwGetSalesInvByCust> VwGetSalesInvByCust { get; set; }
        public virtual DbSet<VwGetSalesInvoiceRank> VwGetSalesInvoiceRank { get; set; }
        public virtual DbSet<VwGetSalesOfferByCust> VwGetSalesOfferByCust { get; set; }
        public virtual DbSet<VwGetSalesOfferRank> VwGetSalesOfferRank { get; set; }
        public virtual DbSet<VwGetSalesOfferRequestByCust> VwGetSalesOfferRequestByCust { get; set; }
        public virtual DbSet<VwGetSalesOfferRequestRank> VwGetSalesOfferRequestRank { get; set; }
        public virtual DbSet<VwGetSalesOrderByCust> VwGetSalesOrderByCust { get; set; }
        public virtual DbSet<VwGetSalesOrderRank> VwGetSalesOrderRank { get; set; }
        public virtual DbSet<VwGetStockRecriptByCust> VwGetStockRecriptByCust { get; set; }
        public virtual DbSet<VwGetStockRecriptByVend> VwGetStockRecriptByVend { get; set; }
        public virtual DbSet<VwGetStockRecriptRank> VwGetStockRecriptRank { get; set; }
        public virtual DbSet<VwGetStockTransferNoteRank> VwGetStockTransferNoteRank { get; set; }
        public virtual DbSet<VwGetTripsRank> VwGetTripsRank { get; set; }
        public virtual DbSet<VwGetVacationDocRank> VwGetVacationDocRank { get; set; }
        public virtual DbSet<VwGetVacationEditRank> VwGetVacationEditRank { get; set; }
        public virtual DbSet<VwGetVacationRequestRank> VwGetVacationRequestRank { get; set; }
        public virtual DbSet<VwGetVehicleJobOrderRank> VwGetVehicleJobOrderRank { get; set; }
        public virtual DbSet<VwGetVehicleRenalContractRank> VwGetVehicleRenalContractRank { get; set; }
        public virtual DbSet<VwGetVendorsRank> VwGetVendorsRank { get; set; }
        public virtual DbSet<VwGetWeightCardRank> VwGetWeightCardRank { get; set; }
        public virtual DbSet<VwGlclassification> VwGlclassification { get; set; }
        public virtual DbSet<VwHelpingAccountsSearch> VwHelpingAccountsSearch { get; set; }
        public virtual DbSet<VwItemCard> VwItemCard { get; set; }
        public virtual DbSet<VwItemUnitGrand> VwItemUnitGrand { get; set; }
        public virtual DbSet<VwItemUnitGrandAttribute> VwItemUnitGrandAttribute { get; set; }
        public virtual DbSet<VwItemUnitSummary> VwItemUnitSummary { get; set; }
        public virtual DbSet<VwJobOrder> VwJobOrder { get; set; }
        public virtual DbSet<VwLotNumberExpiryPartition> VwLotNumberExpiryPartition { get; set; }
        public virtual DbSet<VwProdItemAttributes> VwProdItemAttributes { get; set; }
        public virtual DbSet<VwProdItemUnits> VwProdItemUnits { get; set; }
        public virtual DbSet<VwProdWorkOrderSearch> VwProdWorkOrderSearch { get; set; }
        public virtual DbSet<VwQualityItemDeliverySearch> VwQualityItemDeliverySearch { get; set; }
        public virtual DbSet<VwQualityItemRecCheckSearch> VwQualityItemRecCheckSearch { get; set; }
        public virtual DbSet<VwQualityItemRecieveSearch> VwQualityItemRecieveSearch { get; set; }
        public virtual DbSet<VwReservedQty> VwReservedQty { get; set; }
        public virtual DbSet<VwSearchAllAccounts> VwSearchAllAccounts { get; set; }
        public virtual DbSet<VwSearchInstallments> VwSearchInstallments { get; set; }
        public virtual DbSet<VwSearchRealStatUnits> VwSearchRealStatUnits { get; set; }
        public virtual DbSet<VwSearchUnitReservations> VwSearchUnitReservations { get; set; }
        public virtual DbSet<VwVendorCategory> VwVendorCategory { get; set; }
        public virtual DbSet<VwWeightCard> VwWeightCard { get; set; }
        public virtual DbSet<VwWorkForcExecluded> VwWorkForcExecluded { get; set; }
        public virtual DbSet<VwWorkForcTemplates> VwWorkForcTemplates { get; set; }
        public virtual DbSet<VwWorkForcTestResults> VwWorkForcTestResults { get; set; }
        public virtual DbSet<VwsimpleAllTransactions> VwsimpleAllTransactions { get; set; }
        public virtual DbSet<WorForcFirms> WorForcFirms { get; set; }
        public virtual DbSet<WorkForcActionTypes> WorkForcActionTypes { get; set; }
        public virtual DbSet<WorkForcBloodExeclude> WorkForcBloodExeclude { get; set; }
        public virtual DbSet<WorkForcBloodExecludeDetails> WorkForcBloodExecludeDetails { get; set; }
        public virtual DbSet<WorkForcFirstCustExeclude> WorkForcFirstCustExeclude { get; set; }
        public virtual DbSet<WorkForcFirstCustExecludeDetail> WorkForcFirstCustExecludeDetail { get; set; }
        public virtual DbSet<WorkForcPassPorts> WorkForcPassPorts { get; set; }
        public virtual DbSet<WorkForcPassPortsArchives> WorkForcPassPortsArchives { get; set; }
        public virtual DbSet<WorkForcProblems> WorkForcProblems { get; set; }
        public virtual DbSet<WorkForcSeasons> WorkForcSeasons { get; set; }
        public virtual DbSet<WorkForcSecondCustExeclude> WorkForcSecondCustExeclude { get; set; }
        public virtual DbSet<WorkForcSecondCustExecludeDetail> WorkForcSecondCustExecludeDetail { get; set; }
        public virtual DbSet<WorkForcTempIds> WorkForcTempIds { get; set; }
        public virtual DbSet<WorkForcTemplates> WorkForcTemplates { get; set; }
        public virtual DbSet<WorkForcTemplatesDetails> WorkForcTemplatesDetails { get; set; }
        public virtual DbSet<WorkForcTestResults> WorkForcTestResults { get; set; }
        public virtual DbSet<WorkForcTestResultsDetails> WorkForcTestResultsDetails { get; set; }
        public virtual DbSet<YearMonthes> YearMonthes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer(SmtpConfig.GetConnectionString());
                optionsBuilder.EnableSensitiveDataLogging(); // تمكين تسجيل البيانات الحساسة

            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AnAnimalDeath>(entity =>
            {
                entity.HasKey(e => e.AnDeathId);

                entity.ToTable("An_AnimalDeath");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AnAnimalDeathDetail>(entity =>
            {
                entity.HasKey(e => e.AnDeathIdDetail);

                entity.ToTable("An_AnimalDeathDetail");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsmedicinNotify).HasColumnName("ISMedicinNotify");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyRecievedBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityRecieved).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.AnDeath)
                    .WithMany(p => p.AnAnimalDeathDetail)
                    .HasForeignKey(d => d.AnDeathId)
                    .HasConstraintName("FK_An_AnimalDeathDetail_An_AnimalDeath");
            });

            modelBuilder.Entity<AnAnimalMidicin>(entity =>
            {
                entity.ToTable("An_ANimalMidicin");

                entity.Property(e => e.AnimalAge).HasComment("Days");

                entity.Property(e => e.NextNotify).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Weight).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.AnMidicin)
                    .WithMany(p => p.AnAnimalMidicin)
                    .HasForeignKey(d => d.AnMidicinId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_An_ANimalMidicin_An_Medicin");

                entity.HasOne(d => d.AnType)
                    .WithMany(p => p.AnAnimalMidicin)
                    .HasForeignKey(d => d.AnTypeId)
                    .HasConstraintName("FK_An_ANimalMidicin_An_AnimalType");
            });

            modelBuilder.Entity<AnAnimalType>(entity =>
            {
                entity.HasKey(e => e.AnTypeId);

                entity.ToTable("An_AnimalType");

                entity.Property(e => e.AnTypeImage).HasColumnType("image");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<AnAnimalWeightRate>(entity =>
            {
                entity.HasKey(e => e.AnWeightRateId);

                entity.ToTable("An_AnimalWeightRate");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AnAnimalWeightRateDetail>(entity =>
            {
                entity.HasKey(e => e.AnWeightRateDetailId);

                entity.ToTable("An_AnimalWeightRateDetail");

                entity.Property(e => e.FromWeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MinWeightPrcnt).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ToWeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightRateFrom).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightRateTo).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.AnWeightRate)
                    .WithMany(p => p.AnAnimalWeightRateDetail)
                    .HasForeignKey(d => d.AnWeightRateId)
                    .HasConstraintName("FK_An_AnimalWeightRateDetail_An_AnimalWeightRate");
            });

            modelBuilder.Entity<AnMedicin>(entity =>
            {
                entity.HasKey(e => e.AnMidicinId);

                entity.ToTable("An_Medicin");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.AnimalAge).HasComment("Days");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.Weight).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<AnNewBorn>(entity =>
            {
                entity.HasKey(e => e.AnBornId);

                entity.ToTable("An_NewBorn");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AnNewBornDetail>(entity =>
            {
                entity.HasKey(e => e.AnBornIdDetail);

                entity.ToTable("An_NewBornDetail");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsmedicinNotify).HasColumnName("ISMedicinNotify");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyRecievedBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityRecieved).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.AnBorn)
                    .WithMany(p => p.AnNewBornDetail)
                    .HasForeignKey(d => d.AnBornId)
                    .HasConstraintName("FK_An_NewBornDetail_An_NewBorn");
            });

            modelBuilder.Entity<AssetAssetAddDoc>(entity =>
            {
                entity.HasKey(e => e.AssetAddId);

                entity.ToTable("Asset_AssetAddDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetAssetAddDocDetail>(entity =>
            {
                entity.HasKey(e => e.AddAssetDetailId);

                entity.ToTable("Asset_AssetAddDocDetail");

                entity.Property(e => e.AddValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.HasOne(d => d.AssetAdd)
                    .WithMany(p => p.AssetAssetAddDocDetail)
                    .HasForeignKey(d => d.AssetAddId)
                    .HasConstraintName("FK_Asset_AssetAddDocDetail_Asset_AssetAddDoc");
            });

            modelBuilder.Entity<AssetAssetCard>(entity =>
            {
                entity.HasKey(e => e.AssetId);

                entity.ToTable("Asset_AssetCard");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.AssetCode).HasMaxLength(50);

                entity.Property(e => e.CarLicenseExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssuePlace).HasMaxLength(50);

                entity.Property(e => e.CarLicenseNo).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CurrentBookValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeprInstallmentVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeprStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DtReg)
                    .HasColumnName("dtReg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtRegRenew)
                    .HasColumnName("dtRegRenew")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.EtaxCustType)
                    .HasMaxLength(50)
                    .HasComment("Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.InsuranceExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.JunkValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastDeprDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MarketPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.ProductivPeriod).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurchDoc).HasMaxLength(50);

                entity.Property(e => e.PurchPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ResponsiblePerson).HasMaxLength(50);

                entity.Property(e => e.SerialNo).HasMaxLength(50);

                entity.Property(e => e.TaxRefNo).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VendorDesc).HasMaxLength(50);

                entity.Property(e => e.WarrantyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WarrantyNo).HasMaxLength(50);

                entity.Property(e => e.WarrantyTerms).HasMaxLength(500);

                entity.HasOne(d => d.AssetCat)
                    .WithMany(p => p.AssetAssetCard)
                    .HasForeignKey(d => d.AssetCatId)
                    .HasConstraintName("FK_Asset_AssetCard_Asset_AssetCategory");
            });

            modelBuilder.Entity<AssetAssetCategory>(entity =>
            {
                entity.HasKey(e => e.AssetCatId);

                entity.ToTable("Asset_AssetCategory");

                entity.Property(e => e.CatCode).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.ParentAssetCat)
                    .WithMany(p => p.InverseParentAssetCat)
                    .HasForeignKey(d => d.ParentAssetCatId)
                    .HasConstraintName("FK_Asset_AssetCategory_Asset_AssetCategory");
            });

            modelBuilder.Entity<AssetAssetContacts>(entity =>
            {
                entity.HasKey(e => e.AssetContactId);

                entity.ToTable("Asset_AssetContacts");

                entity.Property(e => e.Bank1).HasMaxLength(100);

                entity.Property(e => e.Bank2).HasMaxLength(50);

                entity.Property(e => e.Bank3).HasMaxLength(50);

                entity.Property(e => e.BankAccNo1).HasMaxLength(50);

                entity.Property(e => e.BankAccNo2).HasMaxLength(50);

                entity.Property(e => e.BankAccNo3).HasMaxLength(50);

                entity.Property(e => e.ContactAddress1).HasMaxLength(100);

                entity.Property(e => e.ContactAddress2).HasMaxLength(100);

                entity.Property(e => e.ContactAddress3).HasMaxLength(100);

                entity.Property(e => e.ContactCode).HasMaxLength(50);

                entity.Property(e => e.ContactEmail1).HasMaxLength(100);

                entity.Property(e => e.ContactEmail2).HasMaxLength(100);

                entity.Property(e => e.ContactEmail3).HasMaxLength(100);

                entity.Property(e => e.ContactName1).HasMaxLength(100);

                entity.Property(e => e.ContactName2).HasMaxLength(100);

                entity.Property(e => e.ContactPhone1).HasMaxLength(30);

                entity.Property(e => e.ContactPhone2).HasMaxLength(30);

                entity.Property(e => e.ContactPhone3).HasMaxLength(30);

                entity.Property(e => e.ContactPhone4).HasMaxLength(30);

                entity.Property(e => e.ContactPhone5).HasMaxLength(30);

                entity.Property(e => e.Idno)
                    .HasColumnName("IDNo")
                    .HasMaxLength(20);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.Remark1).HasMaxLength(200);

                entity.Property(e => e.Remark2).HasMaxLength(200);

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.AssetAssetContacts)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("FK_Asset_AssetContacts_Asset_AssetCard");
            });

            modelBuilder.Entity<AssetAssetDeductDoc>(entity =>
            {
                entity.HasKey(e => e.AssetDeductId);

                entity.ToTable("Asset_AssetDeductDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetAssetDeductDocDetail>(entity =>
            {
                entity.HasKey(e => e.DeductAssetDetailId);

                entity.ToTable("Asset_AssetDeductDocDetail");

                entity.Property(e => e.DeductValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.HasOne(d => d.AssetDeduct)
                    .WithMany(p => p.AssetAssetDeductDocDetail)
                    .HasForeignKey(d => d.AssetDeductId)
                    .HasConstraintName("FK_Asset_AssetDeductDocDetail_Asset_AssetDeductDoc");
            });

            modelBuilder.Entity<AssetAssetDeliverDoc>(entity =>
            {
                entity.HasKey(e => e.DeliverAssetId)
                    .HasName("PK_Asset_AssetCustodyDoc");

                entity.ToTable("Asset_AssetDeliverDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetAssetDeliverDocDetail>(entity =>
            {
                entity.HasKey(e => e.DeliverAssetDetailId);

                entity.ToTable("Asset_AssetDeliverDocDetail");

                entity.Property(e => e.AddValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.HasOne(d => d.DeliverAsset)
                    .WithMany(p => p.AssetAssetDeliverDocDetail)
                    .HasForeignKey(d => d.DeliverAssetId)
                    .HasConstraintName("FK_Asset_AssetDeliverDocDetail_Asset_AssetDeliverDoc");
            });

            modelBuilder.Entity<AssetAssetFixDoc>(entity =>
            {
                entity.HasKey(e => e.FixAssetId);

                entity.ToTable("Asset_AssetFixDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetAssetFixDocDetail>(entity =>
            {
                entity.HasKey(e => e.FixAssetDetailId);

                entity.ToTable("Asset_AssetFixDocDetail");

                entity.Property(e => e.FixValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.HasOne(d => d.FixAsset)
                    .WithMany(p => p.AssetAssetFixDocDetail)
                    .HasForeignKey(d => d.FixAssetId)
                    .HasConstraintName("FK_Asset_AssetFixDocDetail_Asset_AssetFixDoc");
            });

            modelBuilder.Entity<AssetAssetMoveDoc>(entity =>
            {
                entity.HasKey(e => e.AssetMovId);

                entity.ToTable("Asset_AssetMoveDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetAssetMoveDocDetail>(entity =>
            {
                entity.HasKey(e => e.AssetMovDetailId);

                entity.ToTable("Asset_AssetMoveDocDetail");

                entity.Property(e => e.MoveCost).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.AssetMov)
                    .WithMany(p => p.AssetAssetMoveDocDetail)
                    .HasForeignKey(d => d.AssetMovId)
                    .HasConstraintName("FK_Asset_AssetMoveDocDetail_Asset_AssetMoveDoc");
            });

            modelBuilder.Entity<AssetAssetReceiveDoc>(entity =>
            {
                entity.HasKey(e => e.ReceiveAssetId);

                entity.ToTable("Asset_AssetReceiveDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetAssetReceiveDocDetail>(entity =>
            {
                entity.HasKey(e => e.ReceiveAssetDetailId);

                entity.ToTable("Asset_AssetReceiveDocDetail");

                entity.Property(e => e.AddValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.HasOne(d => d.ReceiveAsset)
                    .WithMany(p => p.AssetAssetReceiveDocDetail)
                    .HasForeignKey(d => d.ReceiveAssetId)
                    .HasConstraintName("FK_Asset_AssetReceiveDocDetail_Asset_AssetReceiveDoc");
            });

            modelBuilder.Entity<AssetAssetSettingDetails>(entity =>
            {
                entity.HasKey(e => e.AssetSetDetails);

                entity.ToTable("Asset_AssetSettingDetails");

                entity.Property(e => e.DeprStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.Remarks4).HasMaxLength(100);

                entity.Property(e => e.ScrapValu).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.UsablifeTime).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.AssetSet)
                    .WithMany(p => p.AssetAssetSettingDetails)
                    .HasForeignKey(d => d.AssetSetId)
                    .HasConstraintName("FK_Asset_AssetSettingDetails_Asset_AssetSettings");
            });

            modelBuilder.Entity<AssetAssetSettings>(entity =>
            {
                entity.HasKey(e => e.AssetSetId);

                entity.ToTable("Asset_AssetSettings");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetDepreciationDoc>(entity =>
            {
                entity.HasKey(e => e.DeprDocId);

                entity.ToTable("Asset_DepreciationDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDeprVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<AssetDepreciationDocDetail>(entity =>
            {
                entity.HasKey(e => e.DeprDocDetailId);

                entity.ToTable("Asset_DepreciationDocDetail");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.DeprDoc)
                    .WithMany(p => p.AssetDepreciationDocDetail)
                    .HasForeignKey(d => d.DeprDocId)
                    .HasConstraintName("FK_Asset_DepreciationDocDetail_Asset_DepreciationDoc");
            });

            modelBuilder.Entity<AssetTermination>(entity =>
            {
                entity.HasKey(e => e.AssetTerminatId);

                entity.ToTable("Asset_Termination");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DebitAccountTableName).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeprValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.ProfitLossAccountTableName).HasMaxLength(100);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<BankAccountsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BankAccountsView");

                entity.Property(e => e.AcounntNameA).HasMaxLength(100);

                entity.Property(e => e.AcountCode).HasMaxLength(50);

                entity.Property(e => e.BoxCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Desca)
                    .HasColumnName("DESCA")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BnkBankNotice>(entity =>
            {
                entity.HasKey(e => e.BankNoticId);

                entity.ToTable("BNk_BankNotice");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankExpenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.KeeperNo).HasMaxLength(100);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCheques).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<BnkBankNoticeDetail>(entity =>
            {
                entity.HasKey(e => e.BankNoticDetailId);

                entity.ToTable("BNK_BankNoticeDetail");

                entity.Property(e => e.CollectDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.ReturnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TransferredAte).HasColumnType("smalldatetime");

                entity.HasOne(d => d.BankNotic)
                    .WithMany(p => p.BnkBankNoticeDetail)
                    .HasForeignKey(d => d.BankNoticId)
                    .HasConstraintName("FK_BNK_BankNoticeDetail_BNk_BankNotice");
            });

            modelBuilder.Entity<BoxTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BoxTran");

                entity.Property(e => e.BoxFrom).HasMaxLength(50);

                entity.Property(e => e.BoxTo).HasMaxLength(50);

                entity.Property(e => e.Desca)
                    .HasColumnName("DESCA")
                    .HasMaxLength(100);

                entity.Property(e => e.Desce)
                    .HasColumnName("DESCE")
                    .HasMaxLength(100);

                entity.Property(e => e.Valu)
                    .HasColumnName("valu")
                    .HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<CalAccChrtDailyAssist>(entity =>
            {
                entity.HasKey(e => e.AccChrtDailyAssistId);

                entity.ToTable("Cal_AccChrtDailyAssist");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CalAccChrtDailyAssist)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Cal_AccChrtDailyAssist_Cal_AccountChart");
            });

            modelBuilder.Entity<CalAccountChart>(entity =>
            {
                entity.HasKey(e => e.AccountId);

                entity.ToTable("Cal_AccountChart");

                entity.Property(e => e.AccApproxim).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.MainAccountId).HasColumnName("mainAccountId");

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemarksA).HasMaxLength(250);

                entity.Property(e => e.RemarksE).HasMaxLength(250);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.A)
                    .WithMany(p => p.CalAccountChart)
                    .HasForeignKey(d => d.Aid)
                    .HasConstraintName("FK_Cal_AccountChart_Sys_AnalyticalCodes");
            });

            modelBuilder.Entity<CalAccountClaasiJoin>(entity =>
            {
                entity.HasKey(e => e.AcChrtJoinClaasi);

                entity.ToTable("Cal_AccountClaasiJoin");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CalAccountClaasiJoin)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Cal_AccountClaasiJoin_Cal_AccountChart");
            });

            modelBuilder.Entity<CalAccountUsers>(entity =>
            {
                entity.HasKey(e => e.AccUserId);

                entity.ToTable("Cal_AccountUsers");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CalAccountUsers)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Cal_AccountUsers_Cal_AccountChart");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CalAccountUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Cal_AccountUsers_G_Users");
            });

            modelBuilder.Entity<CalAccountingFix>(entity =>
            {
                entity.HasKey(e => e.AccRecalcId);

                entity.ToTable("Cal_AccountingFix");

                entity.Property(e => e.Reason).HasMaxLength(2000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CalAssetAccounts>(entity =>
            {
                entity.HasKey(e => e.AssetAccountId);

                entity.ToTable("Cal_AssetAccounts");

                entity.Property(e => e.AccCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.AccountModel)
                    .HasMaxLength(100)
                    .HasComment("discount, tax, master ...etc");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemarksA).HasMaxLength(250);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Asset)
                    .WithMany(p => p.CalAssetAccounts)
                    .HasForeignKey(d => d.AssetId)
                    .HasConstraintName("FK_Cal_AssetAccounts_Asset_AssetCard");
            });

            modelBuilder.Entity<CalBudget>(entity =>
            {
                entity.HasKey(e => e.BudgetId);

                entity.ToTable("Cal_Budget");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.ScinarioDesc).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CalBudgetDetails>(entity =>
            {
                entity.HasKey(e => e.BudgetDetailId);

                entity.ToTable("Cal_BudgetDetails");

                entity.Property(e => e.Credit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Debit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.HasOne(d => d.Budget)
                    .WithMany(p => p.CalBudgetDetails)
                    .HasForeignKey(d => d.BudgetId)
                    .HasConstraintName("FK_Cal_BudgetDetails_Cal_Budget");
            });

            modelBuilder.Entity<CalBusinessPartnerAccounts>(entity =>
            {
                entity.HasKey(e => e.BusinessPartnerAccId);

                entity.ToTable("Cal_BusinessPartnerAccounts");

                entity.Property(e => e.AccCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.AccountModel)
                    .HasMaxLength(100)
                    .HasComment("discount, tax, master ...etc");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BspartnerId).HasColumnName("BSPartnerId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EtaxCustType)
                    .HasMaxLength(50)
                    .HasComment("Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required");

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemarksA).HasMaxLength(250);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.TaxRefNo).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Bspartner)
                    .WithMany(p => p.CalBusinessPartnerAccounts)
                    .HasForeignKey(d => d.BspartnerId)
                    .HasConstraintName("FK_Cal_BusinessPartnerAccounts_Ms_BusinessPartners");
            });

            modelBuilder.Entity<CalCostCenterAccount>(entity =>
            {
                entity.HasKey(e => e.CostCenterAccId);

                entity.ToTable("Cal_CostCenterAccount");

                entity.Property(e => e.AccCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountPercent)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CalCostCenterAccount)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Cal_CostCenterAccount_Cal_AccountChart");

                entity.HasOne(d => d.CostCenter)
                    .WithMany(p => p.CalCostCenterAccount)
                    .HasForeignKey(d => d.CostCenterId)
                    .HasConstraintName("FK_Cal_CostCenterAccount_Cal_CostCenters");
            });

            modelBuilder.Entity<CalCostCenters>(entity =>
            {
                entity.HasKey(e => e.CostCenterId)
                    .HasName("PK_Cal_CostCenter");

                entity.ToTable("Cal_CostCenters");

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterLevel).HasDefaultValueSql("((1))");

                entity.Property(e => e.CostCenterNameA).HasMaxLength(100);

                entity.Property(e => e.CostCenterNameE).HasMaxLength(100);

                entity.Property(e => e.CostCenterTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostCenterTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FunctionDescA).HasMaxLength(100);

                entity.Property(e => e.FunctionDescE).HasMaxLength(100);

                entity.Property(e => e.JopDesc).HasColumnName("jopDesc");

                entity.Property(e => e.MainCostCenterId).HasColumnName("mainCostCenterId");

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PreviousBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CalCustAccounts>(entity =>
            {
                entity.HasKey(e => e.CustAccountId);

                entity.ToTable("Cal_CustAccounts");

                entity.Property(e => e.AccCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.AccountModel).HasMaxLength(100);

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemarksA).HasMaxLength(250);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CalCustAccounts)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Cal_CustAccounts_MS_Customer");
            });

            modelBuilder.Entity<CalEmpAccounts>(entity =>
            {
                entity.HasKey(e => e.EmpAccountId);

                entity.ToTable("Cal_EmpAccounts");

                entity.Property(e => e.AccCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.AccountModel)
                    .HasMaxLength(100)
                    .HasComment("discount, tax, master ...etc");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemarksA).HasMaxLength(250);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CalEmpAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Cal_EmpAccounts_Cal_AccountChart");

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.CalEmpAccounts)
                    .HasForeignKey(d => d.EmpId)
                    .HasConstraintName("FK_Cal_EmpAccounts_Hr_Employees");
            });

            modelBuilder.Entity<CalJurnalDetail>(entity =>
            {
                entity.HasKey(e => e.JurnalDetailId);

                entity.ToTable("Cal_JurnalDetail");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.JurDesc).HasMaxLength(150);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.CalJurnalDetail)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_Cal_JurnalDetail_MS_Currency");

                entity.HasOne(d => d.Jurnal)
                    .WithMany(p => p.CalJurnalDetail)
                    .HasForeignKey(d => d.JurnalId)
                    .HasConstraintName("FK_Cal_JurnalDetail_Cal_JurnalEntry");
            });

            modelBuilder.Entity<CalJurnalEntry>(entity =>
            {
                entity.HasKey(e => e.JurnalId);

                entity.ToTable("Cal_JurnalEntry");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DifferenceInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsManual).HasDefaultValueSql("((0))");

                entity.Property(e => e.JorderClosId).HasColumnName("JOrderClosId");

                entity.Property(e => e.JorderEmpDocId).HasColumnName("JOrderEmpDocId");

                entity.Property(e => e.JorderEquipDocId).HasColumnName("JOrderEquipDocId");

                entity.Property(e => e.JurnalDesc).HasMaxLength(200);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaidInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.ResourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrOpenningBalanceId).HasColumnName("Tr_OpenningBalanceId");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.HasOne(d => d.A)
                    .WithMany(p => p.CalJurnalEntry)
                    .HasForeignKey(d => d.Aid)
                    .HasConstraintName("FK_Cal_JurnalEntry_Sys_AnalyticalCodes");

                entity.HasOne(d => d.Stor)
                    .WithMany(p => p.CalJurnalEntry)
                    .HasForeignKey(d => d.StorId)
                    .HasConstraintName("FK_Cal_JurnalEntry_MS_Stores");
            });

            modelBuilder.Entity<CalPostOrder>(entity =>
            {
                entity.HasKey(e => e.PostQueId);

                entity.ToTable("Cal_PostOrder");

                entity.Property(e => e.BalaceCurrencyBeforCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalaceCurrencyBeforDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalaceLocalBeforCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalaceLocalBeforDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancCrencyAftrCredCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancCrencyAftrDebtCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancCrencyBeforCredCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancCrencyBeforDebtCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancLocalAfterCredCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancLocalAfterDebCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancLocalBeforCredCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalancLocalBeforDebCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCurrencyAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCurrencyAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.HelpCostCenterType).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OpenBalancCredCostCentr)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenBalancCredCrncyCostCentr)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenBalancDepCostCentr)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenBalancDepCrncyCostCentr)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OriginalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CalQueueOrder>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.ToTable("Cal_QueueOrder");

                entity.Property(e => e.TableCode).HasMaxLength(100);
            });

            modelBuilder.Entity<CalVendAccounts>(entity =>
            {
                entity.HasKey(e => e.VendAccountId);

                entity.ToTable("Cal_VendAccounts");

                entity.Property(e => e.AccCurrTrancCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccCurrTrancDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotaCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccTotalDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.AccountModel)
                    .HasMaxLength(100)
                    .HasComment("discount, tax, master ...etc");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceCreditLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BalanceDebitLocal)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.OpenningBalanceCredit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceCreditCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepit)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpenningBalanceDepitCurncy)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RemarksA).HasMaxLength(250);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.CalVendAccounts)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_Cal_VendAccounts_MS_Vendor");
            });

            modelBuilder.Entity<CodAccountCategories>(entity =>
            {
                entity.HasKey(e => e.AccountCatId);

                entity.ToTable("Cod_AccountCategories");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.A)
                    .WithMany(p => p.CodAccountCategories)
                    .HasForeignKey(d => d.Aid)
                    .HasConstraintName("FK_Cod_AccountCategories_Sys_AnalyticalCodes");
            });

            modelBuilder.Entity<CodAccountClassification>(entity =>
            {
                entity.HasKey(e => e.AccountClassId);

                entity.ToTable("Cod_AccountClassification");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.AccountCat)
                    .WithMany(p => p.CodAccountClassification)
                    .HasForeignKey(d => d.AccountCatId)
                    .HasConstraintName("FK_Cod_AccountClassification_Cod_AccountCategories");
            });

            modelBuilder.Entity<CodBuildOccupTypes>(entity =>
            {
                entity.HasKey(e => e.BuildOccupTypeId);

                entity.ToTable("Cod_BuildOccupTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildPermitActiv>(entity =>
            {
                entity.HasKey(e => e.BuildPermitActivityId);

                entity.ToTable("Cod_BuildPermitActiv");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildPerspective>(entity =>
            {
                entity.HasKey(e => e.BuildPerspectiveId);

                entity.ToTable("Cod_BuildPerspective");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildingDegree>(entity =>
            {
                entity.HasKey(e => e.BuildDegreeId);

                entity.ToTable("Cod_BuildingDegree");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildingExploitation>(entity =>
            {
                entity.HasKey(e => e.BuildExploitId);

                entity.ToTable("Cod_BuildingExploitation");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildingFinishingLevel>(entity =>
            {
                entity.HasKey(e => e.BuildFinishLevelId);

                entity.ToTable("Cod_BuildingFinishingLevel");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildingInsuranceStatus>(entity =>
            {
                entity.HasKey(e => e.BuildInsurStatId);

                entity.ToTable("Cod_BuildingInsuranceStatus");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildingStatus>(entity =>
            {
                entity.HasKey(e => e.BuildStatusId);

                entity.ToTable("Cod_BuildingStatus");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodBuildingTypes>(entity =>
            {
                entity.HasKey(e => e.BuildTypeId);

                entity.ToTable("Cod_BuildingTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodCity>(entity =>
            {
                entity.HasKey(e => e.CityId);

                entity.ToTable("Cod_City");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Lat).HasMaxLength(100);

                entity.Property(e => e.Lng).HasMaxLength(100);

                entity.Property(e => e.NameA).HasMaxLength(100);

                entity.Property(e => e.NameE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RmarksE).HasMaxLength(255);

                entity.Property(e => e.SysCityId).HasColumnName("SysCityID");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.CodCity)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("FK_Cod_City_Cod_Region");

                entity.HasOne(d => d.SysCity)
                    .WithMany(p => p.CodCity)
                    .HasForeignKey(d => d.SysCityId)
                    .HasConstraintName("FK_Cod_City_Sys_City");
            });

            modelBuilder.Entity<CodColors>(entity =>
            {
                entity.HasKey(e => e.ColorId);

                entity.ToTable("Cod_Colors");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodContractType>(entity =>
            {
                entity.HasKey(e => e.ContractTypeId);

                entity.ToTable("Cod_ContractType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.ToTable("Cod_Country");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CountryCode).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Lat).HasMaxLength(100);

                entity.Property(e => e.Lng).HasMaxLength(100);

                entity.Property(e => e.NameA).HasMaxLength(100);

                entity.Property(e => e.NameE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.CountryCodeNavigation)
                    .WithMany(p => p.CodCountry)
                    .HasForeignKey(d => d.CountryCode)
                    .HasConstraintName("FK_Cod_Country_Sys_Countries");
            });

            modelBuilder.Entity<CodDailyAssistance>(entity =>
            {
                entity.HasKey(e => e.DailyAssisId);

                entity.ToTable("Cod_DailyAssistance");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CodDailyAssistance)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Cod_DailyAssistance_Cal_AccountChart");

                entity.HasOne(d => d.A)
                    .WithMany(p => p.CodDailyAssistance)
                    .HasForeignKey(d => d.Aid)
                    .HasConstraintName("FK_Cod_DailyAssistance_Sys_AnalyticalCodes");
            });

            modelBuilder.Entity<CodElectInsurStatus>(entity =>
            {
                entity.HasKey(e => e.ElectInsurStatId);

                entity.ToTable("Cod_ElectInsurStatus");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodExplanations>(entity =>
            {
                entity.HasKey(e => e.ExplanationId);

                entity.ToTable("Cod_Explanations");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodFurnitAndEqupmnts>(entity =>
            {
                entity.HasKey(e => e.EquipmentId);

                entity.ToTable("Cod_FurnitAndEqupmnts");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodInstallmentTemps>(entity =>
            {
                entity.HasKey(e => e.InstallTempId);

                entity.ToTable("Cod_InstallmentTemps");

                entity.Property(e => e.AddValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.YearsCount).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CodInstallmentTempsDetail>(entity =>
            {
                entity.HasKey(e => e.InstallTempDetailId);

                entity.ToTable("Cod_InstallmentTempsDetail");

                entity.Property(e => e.PayPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.InstallTemp)
                    .WithMany(p => p.CodInstallmentTempsDetail)
                    .HasForeignKey(d => d.InstallTempId)
                    .HasConstraintName("FK_Cod_InstallmentTempsDetail_Cod_InstallmentTemps");
            });

            modelBuilder.Entity<CodInsurCovTypes>(entity =>
            {
                entity.HasKey(e => e.InsurCovTypeId);

                entity.ToTable("Cod_InsurCovTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CoverPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodInsuranceCases>(entity =>
            {
                entity.HasKey(e => e.InsurCaseId);

                entity.ToTable("Cod_InsuranceCases");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodLandPermitActivJoin>(entity =>
            {
                entity.HasKey(e => e.LandPermitActivJoinId);

                entity.ToTable("Cod_LandPermitActivJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.Land)
                    .WithMany(p => p.CodLandPermitActivJoin)
                    .HasForeignKey(d => d.LandId)
                    .HasConstraintName("FK_Cod_LandPermitActivJoin_Cod_Lands");

                entity.HasOne(d => d.LandPermitActiv)
                    .WithMany(p => p.CodLandPermitActivJoin)
                    .HasForeignKey(d => d.LandPermitActivId)
                    .HasConstraintName("FK_Cod_LandPermitActivJoin_Cod_LandPermtActiv");
            });

            modelBuilder.Entity<CodLandPermtActiv>(entity =>
            {
                entity.HasKey(e => e.LandPermitActivId);

                entity.ToTable("Cod_LandPermtActiv");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodLandPosJoin>(entity =>
            {
                entity.HasKey(e => e.LandPosJoinId);

                entity.ToTable("Cod_LandPosJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.Land)
                    .WithMany(p => p.CodLandPosJoin)
                    .HasForeignKey(d => d.LandId)
                    .HasConstraintName("FK_Cod_LandPosJoin_Cod_Lands");

                entity.HasOne(d => d.LandPos)
                    .WithMany(p => p.CodLandPosJoin)
                    .HasForeignKey(d => d.LandPosId)
                    .HasConstraintName("FK_Cod_LandPosJoin_Cod_LandPositions");
            });

            modelBuilder.Entity<CodLandPositions>(entity =>
            {
                entity.HasKey(e => e.LandPosId);

                entity.ToTable("Cod_LandPositions");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodLandRetainResJoin>(entity =>
            {
                entity.HasKey(e => e.LandRetainResJoinId);

                entity.ToTable("Cod_LandRetainResJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.Land)
                    .WithMany(p => p.CodLandRetainResJoin)
                    .HasForeignKey(d => d.LandId)
                    .HasConstraintName("FK_Cod_LandRetainResJoin_Cod_Lands");

                entity.HasOne(d => d.LandRetainRes)
                    .WithMany(p => p.CodLandRetainResJoin)
                    .HasForeignKey(d => d.LandRetainResId)
                    .HasConstraintName("FK_Cod_LandRetainResJoin_Cod_LandRetainRsons");
            });

            modelBuilder.Entity<CodLandRetainRsons>(entity =>
            {
                entity.HasKey(e => e.LandRetainResId);

                entity.ToTable("Cod_LandRetainRsons");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodLandStatus>(entity =>
            {
                entity.HasKey(e => e.LandSatusId);

                entity.ToTable("Cod_LandStatus");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodLandTypes>(entity =>
            {
                entity.HasKey(e => e.LandTypeId);

                entity.ToTable("Cod_LandTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodLands>(entity =>
            {
                entity.HasKey(e => e.LandId)
                    .HasName("PK_Code_Lands");

                entity.ToTable("Cod_Lands");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BuildingArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BuildingMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.LandMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LandNo).HasMaxLength(200);

                entity.Property(e => e.Landarea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodMaintenanceTypes>(entity =>
            {
                entity.HasKey(e => e.MaintainTypeId);

                entity.ToTable("Cod_MaintenanceTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodNonRenewalReasons>(entity =>
            {
                entity.HasKey(e => e.NonRenewResId);

                entity.ToTable("Cod_NonRenewalReasons");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodOperatingOrders>(entity =>
            {
                entity.HasKey(e => e.OperOrderId);

                entity.ToTable("Cod_OperatingOrders");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodOwnershipBonds>(entity =>
            {
                entity.HasKey(e => e.OwnShipBondId);

                entity.ToTable("Cod_OwnershipBonds");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodPackingSize>(entity =>
            {
                entity.HasKey(e => e.PackSizeId);

                entity.ToTable("Cod_PackingSize");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.HeightCentimeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HeightMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HeightMillimeters).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Hieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Length).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LengthCentimeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LengthMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LengthMillimeters).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchasePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.Wheight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Width).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WidthCentimeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WidthMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WidthMillimeters).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<CodParkings>(entity =>
            {
                entity.HasKey(e => e.ParkingId);

                entity.ToTable("Cod_Parkings");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodPaymentTerms>(entity =>
            {
                entity.HasKey(e => e.PaymentTermId);

                entity.ToTable("Cod_PaymentTerms");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodPaymentTypes>(entity =>
            {
                entity.HasKey(e => e.PayTypeId);

                entity.ToTable("Cod_PaymentTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodPostalCodes>(entity =>
            {
                entity.HasKey(e => e.PostalCodId);

                entity.ToTable("Cod_PostalCodes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodRegion>(entity =>
            {
                entity.HasKey(e => e.RegionId);

                entity.ToTable("Cod_Region");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Lat).HasMaxLength(100);

                entity.Property(e => e.Lng).HasMaxLength(100);

                entity.Property(e => e.NameA).HasMaxLength(100);

                entity.Property(e => e.NameE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.CodRegion)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_Cod_Region_Cod_Country");
            });

            modelBuilder.Entity<CodRentCase>(entity =>
            {
                entity.HasKey(e => e.RentCaseId);

                entity.ToTable("Cod_RentCase");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodSavingFiles>(entity =>
            {
                entity.HasKey(e => e.SavfilesId);

                entity.ToTable("Cod_SavingFiles");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodServices>(entity =>
            {
                entity.HasKey(e => e.ServiceId);

                entity.ToTable("Cod_Services");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodShelves>(entity =>
            {
                entity.HasKey(e => e.ShelvId);

                entity.ToTable("Cod_Shelves");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodSubRegion>(entity =>
            {
                entity.HasKey(e => e.SubRegionClassId);

                entity.ToTable("Cod_SubRegion");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Lat).HasMaxLength(100);

                entity.Property(e => e.Lng).HasMaxLength(100);

                entity.Property(e => e.NameA).HasMaxLength(50);

                entity.Property(e => e.NameE).HasMaxLength(50);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodTaskTypes>(entity =>
            {
                entity.HasKey(e => e.TaskTypeId);

                entity.ToTable("Cod_TaskTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodTrmsModifiRsons>(entity =>
            {
                entity.HasKey(e => e.TrmModResId);

                entity.ToTable("Cod_TrmsModifiRsons");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitDegree>(entity =>
            {
                entity.HasKey(e => e.UnitDegreeId);

                entity.ToTable("Cod_UnitDegree");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitExploitation>(entity =>
            {
                entity.HasKey(e => e.UnitExploitId);

                entity.ToTable("Cod_UnitExploitation");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitFinishingLevel>(entity =>
            {
                entity.HasKey(e => e.UnFinLevelId);

                entity.ToTable("Cod_UnitFinishingLevel");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.FinishMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitInsuranceStatus>(entity =>
            {
                entity.HasKey(e => e.UnitInsurstatId);

                entity.ToTable("Cod_UnitInsuranceStatus");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitOccupancyTypes>(entity =>
            {
                entity.HasKey(e => e.UnitOccuTypeId);

                entity.ToTable("Cod_UnitOccupancyTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitPermittedActivity>(entity =>
            {
                entity.HasKey(e => e.UnitPermitActivId);

                entity.ToTable("Cod_UnitPermittedActivity");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitPerspective>(entity =>
            {
                entity.HasKey(e => e.UnitPerspectiveId);

                entity.ToTable("Cod_UnitPerspective");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitServices>(entity =>
            {
                entity.HasKey(e => e.UnitServId);

                entity.ToTable("Cod_UnitServices");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitStatus>(entity =>
            {
                entity.HasKey(e => e.UnitStatId);

                entity.ToTable("Cod_UnitStatus");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUnitTypes>(entity =>
            {
                entity.HasKey(e => e.UnittypeId);

                entity.ToTable("Cod_UnitTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodUntMntanItmBylndownrTnant>(entity =>
            {
                entity.HasKey(e => e.UnMantItmId);

                entity.ToTable("Cod_UntMntanItmBylndownrTnant");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CodeSubUnitTypes>(entity =>
            {
                entity.HasKey(e => e.SubUnittypeId);

                entity.ToTable("Code_SubUnitTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ContrInstallMent>(entity =>
            {
                entity.HasKey(e => e.InstallId);

                entity.ToTable("Contr_InstallMent");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OtherSource).HasMaxLength(100);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TableEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TableStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ContrInstallMentDetail>(entity =>
            {
                entity.HasKey(e => e.InstallDetailId);

                entity.ToTable("Contr_InstallMentDetail");

                entity.Property(e => e.InstallValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PaidDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PayDayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.HasOne(d => d.Install)
                    .WithMany(p => p.ContrInstallMentDetail)
                    .HasForeignKey(d => d.InstallId)
                    .HasConstraintName("FK_Contr_InstallMentDetail_Contr_InstallMent");
            });

            modelBuilder.Entity<CrmLeadTypes>(entity =>
            {
                entity.HasKey(e => e.LeadTypeId);

                entity.ToTable("CRM_LeadTypes");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreayedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LeadTypeCode).HasMaxLength(50);

                entity.Property(e => e.LeadTypeDes).HasMaxLength(200);

                entity.Property(e => e.LeadTypeName1).HasMaxLength(100);

                entity.Property(e => e.LeadTypeName2).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CrmLeads>(entity =>
            {
                entity.HasKey(e => e.LeadId);

                entity.ToTable("CRM_Leads");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.CarLicenseExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssuePlace).HasMaxLength(50);

                entity.Property(e => e.CarLicenseNo).HasMaxLength(50);

                entity.Property(e => e.Company).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CreditLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLimitAllowed).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustId)
                    .HasColumnName("CustID")
                    .HasMaxLength(100);

                entity.Property(e => e.CustJob).HasMaxLength(100);

                entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultDisc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DtReg)
                    .HasColumnName("dtReg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtRegRenew)
                    .HasColumnName("dtRegRenew")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FormerProduct).HasMaxLength(200);

                entity.Property(e => e.HomePage).HasMaxLength(300);

                entity.Property(e => e.LeadCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LeadName1).HasMaxLength(100);

                entity.Property(e => e.LeadName2).HasMaxLength(100);

                entity.Property(e => e.Nationality).HasMaxLength(50);

                entity.Property(e => e.PassPortExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassPortIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassPortIssuePlace).HasMaxLength(50);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.PeriodType).HasComment("1 day, 2 month, 3 year");

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.PrePaidPercent).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ReportDiscValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxExemptionNo).HasMaxLength(50);

                entity.Property(e => e.TaxRefNo).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.LeadType)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.LeadTypeId)
                    .HasConstraintName("FK_CRM_Leads_CRM_LeadTypes");

                entity.HasOne(d => d.MarketChannel)
                    .WithMany(p => p.CrmLeads)
                    .HasForeignKey(d => d.MarketChannelId)
                    .HasConstraintName("FK_CRM_Leads_CRM_MarketChannels");
            });

            modelBuilder.Entity<CrmLeadsMembers>(entity =>
            {
                entity.HasKey(e => e.LeadMemberId);

                entity.ToTable("CRM_LeadsMembers");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CrmLeadsMembersDetails>(entity =>
            {
                entity.HasKey(e => e.LeadMemberDetailId);

                entity.ToTable("CRM_LeadsMembersDetails");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.LeadMember)
                    .WithMany(p => p.CrmLeadsMembersDetails)
                    .HasForeignKey(d => d.LeadMemberId)
                    .HasConstraintName("FK_CRM_LeadsMembersDetails_CRM_LeadsMembers");
            });

            modelBuilder.Entity<CrmLeadsMembersJoin>(entity =>
            {
                entity.HasKey(e => e.LeadMemberJoin);

                entity.ToTable("CRM_LeadsMembersJoin");

                entity.Property(e => e.LeadMemberJoin).ValueGeneratedNever();

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.CrmLeadsMembersJoin)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_CRM_LeadsMembersJoin_CRM_Leads");

                entity.HasOne(d => d.LeadMember)
                    .WithMany(p => p.CrmLeadsMembersJoin)
                    .HasForeignKey(d => d.LeadMemberId)
                    .HasConstraintName("FK_CRM_LeadsMembersJoin_CRM_LeadsMembers");
            });

            modelBuilder.Entity<CrmMarketChannels>(entity =>
            {
                entity.HasKey(e => e.MarketChannelId);

                entity.ToTable("CRM_MarketChannels");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.ChannelCode).HasMaxLength(50);

                entity.Property(e => e.ChannelName1).HasMaxLength(100);

                entity.Property(e => e.ChannelName2).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CrmSalesPlan>(entity =>
            {
                entity.HasKey(e => e.SalesPlanId);

                entity.ToTable("CRM_SalesPlan");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PlanName1).HasMaxLength(100);

                entity.Property(e => e.PlanName2).HasMaxLength(100);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CrmSalesPlanDetail>(entity =>
            {
                entity.HasKey(e => e.SalesPlanDetailId);

                entity.ToTable("CRM_SalesPlanDetail");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Mission).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.SalesPlan)
                    .WithMany(p => p.CrmSalesPlanDetail)
                    .HasForeignKey(d => d.SalesPlanId)
                    .HasConstraintName("FK_CRM_SalesPlanDetail_CRM_SalesPlan");
            });

            modelBuilder.Entity<CrmSurvey>(entity =>
            {
                entity.HasKey(e => e.SurveyId);

                entity.ToTable("CRM_Survey");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VisitCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VisitName1).HasMaxLength(100);

                entity.Property(e => e.VisitName2).HasMaxLength(100);

                entity.HasOne(d => d.VisitType)
                    .WithMany(p => p.CrmSurvey)
                    .HasForeignKey(d => d.VisitTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CRM_Survey_CRM_VisitTypes");
            });

            modelBuilder.Entity<CrmSurveyMemberJoin>(entity =>
            {
                entity.HasKey(e => e.SurveyVisitId);

                entity.ToTable("CRM_SurveyMemberJoin");
            });

            modelBuilder.Entity<CrmTeamMembers>(entity =>
            {
                entity.HasKey(e => e.TeamMemberId);

                entity.ToTable("CRM_TeamMembers");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DefaultTarget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.MemberCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MemberName1).HasMaxLength(100);

                entity.Property(e => e.MemberName2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.CrmTeamMembers)
                    .HasForeignKey(d => d.TeamId)
                    .HasConstraintName("FK_CRM_TeamMembers_CRM_Teams");
            });

            modelBuilder.Entity<CrmTeams>(entity =>
            {
                entity.HasKey(e => e.TeamId);

                entity.ToTable("CRM_Teams");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DefaultTarget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TeamCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TeamName1).HasMaxLength(100);

                entity.Property(e => e.TeamName2).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<CrmVisitSurveys>(entity =>
            {
                entity.HasKey(e => e.VisitSurveyId);

                entity.ToTable("CRM_VisitSurveys");

                entity.Property(e => e.Answer1).HasMaxLength(200);

                entity.Property(e => e.Answer2).HasMaxLength(200);

                entity.Property(e => e.Answer3).HasMaxLength(200);

                entity.Property(e => e.Answer4).HasMaxLength(200);

                entity.Property(e => e.FilePath).HasMaxLength(500);

                entity.HasOne(d => d.Visit)
                    .WithMany(p => p.CrmVisitSurveys)
                    .HasForeignKey(d => d.VisitId)
                    .HasConstraintName("FK_CRM_VisitSurveys_CRM_Visits");
            });

            modelBuilder.Entity<CrmVisitTypes>(entity =>
            {
                entity.HasKey(e => e.VisitTypeId);

                entity.ToTable("CRM_VisitTypes");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VisitCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VisitName1).HasMaxLength(100);

                entity.Property(e => e.VisitName2).HasMaxLength(100);
            });

            modelBuilder.Entity<CrmVisits>(entity =>
            {
                entity.HasKey(e => e.VisitId);

                entity.ToTable("CRM_Visits");

                entity.Property(e => e.BounusDesc).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.VisitType)
                    .WithMany(p => p.CrmVisits)
                    .HasForeignKey(d => d.VisitTypeId)
                    .HasConstraintName("FK_CRM_Visits_CRM_VisitTypes");
            });

            modelBuilder.Entity<DeliverCustSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliverCustSearch");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeliverQtyOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<DeliverSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliverSearch");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.SalesInvDocTrNo).HasMaxLength(151);

                entity.Property(e => e.SourcTyp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<GPrintLog>(entity =>
            {
                entity.HasKey(e => e.PrintLogId);

                entity.ToTable("G_PrintLog");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.DocName).HasMaxLength(100);

                entity.Property(e => e.PrintTime).HasColumnType("smalldatetime");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<GUserGroups>(entity =>
            {
                entity.HasKey(e => e.UserGroupId);

                entity.ToTable("G_UserGroups");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UserGroupCode).HasMaxLength(50);

                entity.Property(e => e.UserGroupName1).HasMaxLength(100);

                entity.Property(e => e.UserGroupName2).HasMaxLength(100);
            });

            modelBuilder.Entity<GUserModule>(entity =>
            {
                entity.HasKey(e => e.UserModuleId);

                entity.ToTable("G_USER_MODULE");

                entity.Property(e => e.Custom1).HasColumnName("CUSTOM1");

                entity.Property(e => e.DefaultReport).HasMaxLength(150);

                entity.Property(e => e.ModuleCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModuleDescA).HasMaxLength(100);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.GUserModule)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_G_USER_MODULE_G_Users");
            });

            modelBuilder.Entity<GUserRole>(entity =>
            {
                entity.HasKey(e => e.UserRoleId);

                entity.ToTable("G_UserRole");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.RoleCode).HasMaxLength(50);

                entity.Property(e => e.RoleName1).HasMaxLength(100);

                entity.Property(e => e.RoleName2).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<GUserRolePermissions>(entity =>
            {
                entity.HasKey(e => e.UserRolePermId);

                entity.ToTable("G_UserRolePermissions");

                entity.Property(e => e.ModuleCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ModuleDescA).HasMaxLength(100);

                entity.Property(e => e.ModuleType).HasComment("1 screen, 2 TabPage,3 Label");

                entity.HasOne(d => d.UserRole)
                    .WithMany(p => p.GUserRolePermissions)
                    .HasForeignKey(d => d.UserRoleId)
                    .HasConstraintName("FK_G_UserRolePermissions_G_UserRole");
            });

            modelBuilder.Entity<GUserScreenFields>(entity =>
            {
                entity.HasKey(e => e.ScreenFieldId);

                entity.ToTable("G_UserScreenFields");

                entity.Property(e => e.AuthDesc).HasMaxLength(100);

                entity.Property(e => e.FieldName).HasMaxLength(50);
            });

            modelBuilder.Entity<GUsers>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("G_Users");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Custom1).HasMaxLength(20);

                entity.Property(e => e.Custom2).HasMaxLength(500);

                entity.Property(e => e.Custom3).HasMaxLength(20);

                entity.Property(e => e.Custom4).HasMaxLength(20);

                entity.Property(e => e.Custom5).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UserCode).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.UserType).HasComment("0 User , 1 superUser , 2 admin");

                entity.HasOne(d => d.UserRole)
                    .WithMany(p => p.GUsers)
                    .HasForeignKey(d => d.UserRoleId)
                    .HasConstraintName("FK_G_Users_G_UserRole");
            });

            modelBuilder.Entity<HrActivityDetailElements>(entity =>
            {
                entity.HasKey(e => e.ActivityElementId);

                entity.ToTable("Hr_ActivityDetailElements");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.EmpActivityDetail)
                    .WithMany(p => p.HrActivityDetailElements)
                    .HasForeignKey(d => d.EmpActivityDetailId)
                    .HasConstraintName("FK_Hr_ActivityDetailElements_Hr_EmpActivityDetail");
            });

            modelBuilder.Entity<HrAttend>(entity =>
            {
                entity.ToTable("Hr_Attend");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Countearly)
                    .HasColumnName("countearly")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Countearlypure)
                    .HasColumnName("countearlypure")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Countleate)
                    .HasColumnName("countleate")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Countovertim)
                    .HasColumnName("countovertim")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Dateat)
                    .HasColumnName("dateat")
                    .HasColumnType("date");

                entity.Property(e => e.DevId).HasColumnName("Dev_id");

                entity.Property(e => e.Mode).HasColumnName("mode");

                entity.Property(e => e.Moderol)
                    .HasColumnName("moderol")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.RolId).HasColumnName("rol_id");

                entity.Property(e => e.Timeat).HasColumnName("timeat");
            });

            modelBuilder.Entity<HrAttendDocDetails>(entity =>
            {
                entity.HasKey(e => e.AttendDocDetailsId);

                entity.ToTable("Hr_AttendDocDetails");

                entity.Property(e => e.AttenDelayByDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AttenDelayByHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AttenDelayByMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AttendDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DismissDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EarlyAttendByDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyAttendByHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyAttendByMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveByDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveByHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveByMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FirstShftFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftTo).HasColumnType("smalldatetime");

                entity.Property(e => e.NetTimeByDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetTimeByHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetTimeByMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OverTimeByDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OverTimeByHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OverTimeByMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SecondShftFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftTo).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftTo).HasColumnType("smalldatetime");

                entity.HasOne(d => d.AttendDoc)
                    .WithMany(p => p.HrAttendDocDetails)
                    .HasForeignKey(d => d.AttendDocId)
                    .HasConstraintName("FK_Hr_AttendDocDetails_Hr_AttendanceDoc");
            });

            modelBuilder.Entity<HrAttendDocFactElements>(entity =>
            {
                entity.HasKey(e => e.FactAttendId);

                entity.ToTable("Hr_AttendDocFactElements");

                entity.Property(e => e.EarlyAttendDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyAttendHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyAttendMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LateArrivalDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LateArrivalHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LateArrivalMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Shift1NoShow).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Shift1Show).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Shift2NoShow).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Shift2Show).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Shift3NoShow).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Shift3Show).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkDaysPeriod).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkHoursPeriod).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationOvertimeDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationOvertimeHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationOvertimeMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationWorkDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationWorkHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationWorkMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekEndWorkDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekEndWorkHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekEndWorkMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekendOvertimeDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekendOvertimeHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekendOvertimeMinutes).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkDayNoShow).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkDayShow).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkdayOvertimeDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkdayOvertimeHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkdayOvertimeMinutes).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.AttendDoc)
                    .WithMany(p => p.HrAttendDocFactElements)
                    .HasForeignKey(d => d.AttendDocId)
                    .HasConstraintName("FK_Hr_AttendDocFactElements_Hr_AttendanceDoc");
            });

            modelBuilder.Entity<HrAttendElementTrans>(entity =>
            {
                entity.HasKey(e => e.ElementTransId);

                entity.ToTable("Hr_AttendElementTrans");

                entity.Property(e => e.ElementValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ModifiedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OriginalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TableCode).HasMaxLength(50);

                entity.Property(e => e.TimeUnit).HasComment("1 number,2 minutes,3 hours,4 days");
            });

            modelBuilder.Entity<HrAttendanceDoc>(entity =>
            {
                entity.HasKey(e => e.AttendDocId);

                entity.ToTable("Hr_AttendanceDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrAttendanceElements>(entity =>
            {
                entity.HasKey(e => e.AttendElementId);

                entity.ToTable("Hr_AttendanceElements");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ElementCode).HasMaxLength(50);

                entity.Property(e => e.FixedValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.UnitDescription).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrAttendrole>(entity =>
            {
                entity.ToTable("Hr_attendrole");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Endstarttimeattend).HasColumnName("endstarttimeattend");

                entity.Property(e => e.Endtimeatdepartur).HasColumnName("endtimeatdepartur");

                entity.Property(e => e.Nameshift)
                    .HasColumnName("nameshift")
                    .HasMaxLength(50);

                entity.Property(e => e.Satarttimeattdend).HasColumnName("satarttimeattdend");

                entity.Property(e => e.Starttimeatdepartur).HasColumnName("starttimeatdepartur");
            });

            modelBuilder.Entity<HrDepartments>(entity =>
            {
                entity.HasKey(e => e.DepartMentId);

                entity.ToTable("Hr_Departments");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DepartTask).HasMaxLength(500);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Hr_Departments_Hr_Departments");
            });

            modelBuilder.Entity<HrDevicesCon>(entity =>
            {
                entity.ToTable("Hr_DevicesCon");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ip)
                    .HasColumnName("ip")
                    .HasColumnType("text");

                entity.Property(e => e.Keycomm)
                    .HasColumnName("keycomm")
                    .HasColumnType("text");

                entity.Property(e => e.Namedev)
                    .HasColumnName("namedev")
                    .HasMaxLength(50);

                entity.Property(e => e.Port)
                    .HasColumnName("port")
                    .HasColumnType("text");
            });

            modelBuilder.Entity<HrEducation>(entity =>
            {
                entity.HasKey(e => e.EducationId);

                entity.ToTable("Hr_Education");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EducationCode)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.EducationDesc)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.EducationName1)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.EducationName2)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Qualification)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrEmpActivity>(entity =>
            {
                entity.HasKey(e => e.EmpActivityId);

                entity.ToTable("Hr_EmpActivity");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrEmpActivityDetail>(entity =>
            {
                entity.HasKey(e => e.EmpActivityDetailId);

                entity.ToTable("Hr_EmpActivityDetail");

                entity.HasOne(d => d.EmpActivity)
                    .WithMany(p => p.HrEmpActivityDetail)
                    .HasForeignKey(d => d.EmpActivityId)
                    .HasConstraintName("FK_Hr_EmpActivityDetail_Hr_EmpActivity");
            });

            modelBuilder.Entity<HrEmpDocTypes>(entity =>
            {
                entity.HasKey(e => e.EmpDocTypId);

                entity.ToTable("Hr_EmpDocTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrEmpDocuments>(entity =>
            {
                entity.HasKey(e => e.EmpDocId);

                entity.ToTable("Hr_EmpDocuments");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IssuePlace).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.EmpDocTyp)
                    .WithMany(p => p.HrEmpDocuments)
                    .HasForeignKey(d => d.EmpDocTypId)
                    .HasConstraintName("FK_Hr_EmpDocuments_Hr_EmpDocTypes");
            });

            modelBuilder.Entity<HrEmpElementPeriodBalance>(entity =>
            {
                entity.HasKey(e => e.EmpElementId);

                entity.ToTable("Hr_EmpElementPeriodBalance");

                entity.Property(e => e.ElementValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeUnit).HasComment("1 minute,2 hour,3 day, 4 number");
            });

            modelBuilder.Entity<HrEmpGroups>(entity =>
            {
                entity.HasKey(e => e.HrempGroupId);

                entity.ToTable("Hr_EmpGroups");

                entity.Property(e => e.HrempGroupId).HasColumnName("HREmpGroupId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.GroupCode).HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Hr_EmpGroups_Hr_EmpGroups");
            });

            modelBuilder.Entity<HrEmpLoanRequest>(entity =>
            {
                entity.HasKey(e => e.EmpLoanReqId);

                entity.ToTable("Hr_EmpLoanRequest");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EmpLoanBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InstallmentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastInstallmentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LoanValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrEmpLoans>(entity =>
            {
                entity.HasKey(e => e.EmpLoanId);

                entity.ToTable("Hr_EmpLoans");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.InstallmentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastInstallmentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastPayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LoanBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LoanCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LoanValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.StartPayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExemption).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrEmpMovePromotDetail>(entity =>
            {
                entity.HasKey(e => e.EmpMoveDetailId);

                entity.ToTable("Hr_EmpMovePromotDetail");

                entity.Property(e => e.OldSalaryValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalaryValu).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.EmpMove)
                    .WithMany(p => p.HrEmpMovePromotDetail)
                    .HasForeignKey(d => d.EmpMoveId)
                    .HasConstraintName("FK_Hr_EmpMovePromotDetail_Hr_EmpMovePromotion");
            });

            modelBuilder.Entity<HrEmpMovePromotion>(entity =>
            {
                entity.HasKey(e => e.EmpMoveId)
                    .HasName("PK_Hr_MoveAndPromotion");

                entity.ToTable("Hr_EmpMovePromotion");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NewTitle).HasMaxLength(100);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrEmpSalaryDistribution>(entity =>
            {
                entity.HasKey(e => e.SalaryDistId);

                entity.ToTable("Hr_EmpSalaryDistribution");

                entity.Property(e => e.SalaryPercent).HasColumnType("numeric(18, 5)");
            });

            modelBuilder.Entity<HrEmpSalaryTypes>(entity =>
            {
                entity.HasKey(e => e.EmpSalaryTypesId);

                entity.ToTable("Hr_EmpSalaryTypes");

                entity.Property(e => e.SalaryValu).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.HrEmpSalaryTypes)
                    .HasForeignKey(d => d.EmpId)
                    .HasConstraintName("FK_Hr_EmpSalaryTypes_Hr_Employees");

                entity.HasOne(d => d.SalaryTyp)
                    .WithMany(p => p.HrEmpSalaryTypes)
                    .HasForeignKey(d => d.SalaryTypId)
                    .HasConstraintName("FK_Hr_EmpSalaryTypes_Hr_SalaryTypes");
            });

            modelBuilder.Entity<HrEmpVacation>(entity =>
            {
                entity.HasKey(e => e.EmpVacId);

                entity.ToTable("Hr_EmpVacation");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrEmpVacationsDetails>(entity =>
            {
                entity.HasKey(e => e.EmpVacDetailId)
                    .HasName("PK_EmpVacationsDetails");

                entity.ToTable("Hr_EmpVacationsDetails");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.EmpVac)
                    .WithMany(p => p.HrEmpVacationsDetails)
                    .HasForeignKey(d => d.EmpVacId)
                    .HasConstraintName("FK_Hr_EmpVacationsDetails_Hr_EmpVacation");
            });

            modelBuilder.Entity<HrEmployees>(entity =>
            {
                entity.HasKey(e => e.EmpId);

                entity.ToTable("Hr_Employees");

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Attendance).HasComment("true full Time,false Part time");

                entity.Property(e => e.BankAccNo).HasMaxLength(50);

                entity.Property(e => e.BankName).HasMaxLength(80);

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Car).HasMaxLength(50);

                entity.Property(e => e.CommisionCollectionPerc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ContractEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContractSrtDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContractType).HasComment("true limited, false unlimited");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DailyCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeviceEmpCode).HasMaxLength(50);

                entity.Property(e => e.DrivingExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DrivingIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DrivingLicense).HasMaxLength(50);

                entity.Property(e => e.DrivingRenewalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpImage).HasColumnType("image");

                entity.Property(e => e.EtaxCustType)
                    .HasMaxLength(50)
                    .HasComment("Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required");

                entity.Property(e => e.Evaluation).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.HealthInsEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HealthInsId)
                    .HasColumnName("HealthInsID")
                    .HasMaxLength(30);

                entity.Property(e => e.HourlyCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HourlyCostRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HrempGroupId).HasColumnName("HREmpGroupId");

                entity.Property(e => e.IdexpiryDate)
                    .HasColumnName("IDExpiryDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdissueDate)
                    .HasColumnName("IDIssueDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idno)
                    .HasColumnName("IDNo")
                    .HasMaxLength(50);

                entity.Property(e => e.LastVacsUpdate).HasColumnType("smalldatetime");

                entity.Property(e => e.MaritalStatus).HasComment("0 single,1 married,2 married and have kids");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PassportExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassportIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassportNo).HasMaxLength(50);

                entity.Property(e => e.Phone1).HasMaxLength(20);

                entity.Property(e => e.Phone2).HasMaxLength(20);

                entity.Property(e => e.Phone3).HasMaxLength(20);

                entity.Property(e => e.Qualification).HasMaxLength(500);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SocialSecurityId)
                    .HasColumnName("SocialSecurityID")
                    .HasMaxLength(30);

                entity.Property(e => e.Syndicate)
                    .HasColumnName("syndicate")
                    .HasMaxLength(30);

                entity.Property(e => e.SyndicateId)
                    .HasColumnName("syndicateID")
                    .HasMaxLength(30);

                entity.Property(e => e.TaxRefNo).HasMaxLength(100);

                entity.Property(e => e.TotalDailyCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalHourlyCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.WorkStartDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.DepartMent)
                    .WithMany(p => p.HrEmployees)
                    .HasForeignKey(d => d.DepartMentId)
                    .HasConstraintName("FK_Hr_Employees_Hr_Departments");

                entity.HasOne(d => d.HrempGroup)
                    .WithMany(p => p.HrEmployees)
                    .HasForeignKey(d => d.HrempGroupId)
                    .HasConstraintName("FK_Hr_Employees_Hr_EmpGroups");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.HrEmployees)
                    .HasForeignKey(d => d.JobId)
                    .HasConstraintName("FK_Hr_Employees_Hr_Jobs");

                entity.HasOne(d => d.PeriodTable)
                    .WithMany(p => p.HrEmployees)
                    .HasForeignKey(d => d.PeriodTableId)
                    .HasConstraintName("FK_Hr_Employees_Hr_PeriodsTables");

                entity.HasOne(d => d.Shift)
                    .WithMany(p => p.HrEmployees)
                    .HasForeignKey(d => d.ShiftId)
                    .HasConstraintName("FK_Hr_Employees_Hr_Shifts");
            });

            modelBuilder.Entity<HrEmpsSalaryTemp>(entity =>
            {
                entity.HasKey(e => e.EmpsSalaryTempId);

                entity.ToTable("Hr_EmpsSalaryTemp");

                entity.Property(e => e.HrempGroupId).HasColumnName("HREmpGroupId");

                entity.Property(e => e.SalaryValu).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.SalaryTyp)
                    .WithMany(p => p.HrEmpsSalaryTemp)
                    .HasForeignKey(d => d.SalaryTypId)
                    .HasConstraintName("FK_Hr_EmpsSalaryTemp_Hr_SalaryTypes");
            });

            modelBuilder.Entity<HrJobs>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("Hr_Jobs");

                entity.Property(e => e.Add1).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jdesc)
                    .HasColumnName("JDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.Jduties)
                    .HasColumnName("JDuties")
                    .HasMaxLength(500);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.Jqualifications)
                    .HasColumnName("JQualifications")
                    .HasMaxLength(500);

                entity.Property(e => e.Jresponsibilities)
                    .HasColumnName("JResponsibilities")
                    .HasMaxLength(500);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.StandardDailyWage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StandardDailyWorkHours).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.StandardHourlyWage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StandardMonthlyWage).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrKpis>(entity =>
            {
                entity.HasKey(e => e.Kpiid);

                entity.ToTable("Hr_KPIS");

                entity.Property(e => e.Kpiid).HasColumnName("KPIId");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.KpiPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrLeavPermissionRequest>(entity =>
            {
                entity.HasKey(e => e.LeavPermReqId);

                entity.ToTable("Hr_LeavPermissionRequest");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.HoursCount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrLeavePermision>(entity =>
            {
                entity.HasKey(e => e.LeavPermisionId);

                entity.ToTable("Hr_LeavePermision");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.HoursCount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.MissionDesc).HasMaxLength(1000);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrMobileSetting>(entity =>
            {
                entity.HasKey(e => e.HrMobSetId);

                entity.ToTable("HR_MobileSetting");
            });

            modelBuilder.Entity<HrPeriodTableDetail>(entity =>
            {
                entity.HasKey(e => e.PeriodTablDetailId);

                entity.ToTable("Hr_PeriodTableDetail");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PayDayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PeriodEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PeriodStrtDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SubPeriodCode).HasMaxLength(50);

                entity.Property(e => e.TotalVacsDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalVacsHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkHours).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PeriodTable)
                    .WithMany(p => p.HrPeriodTableDetail)
                    .HasForeignKey(d => d.PeriodTableId)
                    .HasConstraintName("FK_Hr_PeriodTableDetail_Hr_PeriodsTables");
            });

            modelBuilder.Entity<HrPeriodTablePolicy>(entity =>
            {
                entity.HasKey(e => e.PeriodPolicyId);

                entity.ToTable("Hr_PeriodTablePolicy");

                entity.Property(e => e.Approximate).HasColumnType("numeric(10, 3)");

                entity.Property(e => e.Minimum).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PeriodTable)
                    .WithMany(p => p.HrPeriodTablePolicy)
                    .HasForeignKey(d => d.PeriodTableId)
                    .HasConstraintName("FK_Hr_PeriodTablePolicy_Hr_PeriodsTables");
            });

            modelBuilder.Entity<HrPeriodTableVacations>(entity =>
            {
                entity.HasKey(e => e.PeriodVacatId);

                entity.ToTable("Hr_PeriodTableVacations");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.VacationDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.PeriodTable)
                    .WithMany(p => p.HrPeriodTableVacations)
                    .HasForeignKey(d => d.PeriodTableId)
                    .HasConstraintName("FK_Hr_PeriodTableVacations_Hr_PeriodsTables");
            });

            modelBuilder.Entity<HrPeriodsTables>(entity =>
            {
                entity.HasKey(e => e.PeriodTableId);

                entity.ToTable("Hr_PeriodsTables");

                entity.Property(e => e.AcceptShftBeforDismis).HasComment("احتساب الورديه فى حالة خروج الموظف و رجوعه قبل ميعاد الانصراف مع تجاهل عدد الساعات المحققه");

                entity.Property(e => e.AcceptShiftHours).HasComment("اعتبار تحقيق الورديه بمجرد تحقيق عدد ساعات الورديه بغض النظر عن توقيت الحضور و الانصراف");

                entity.Property(e => e.AcceptShiftVacs).HasComment("قبول تعويض الورديات فى أيام الأجازات");

                entity.Property(e => e.CancelEarlyLeave).HasComment("الغاء الانصراف المبكر فى حالة تسجيل حضور ثانى فى نفس اليوم");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CutLateTimFromOverTime).HasComment("خصم التأخير و الانصراف المبكر من الوقت الاضافى لنفس اليوم");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EarlyAttendMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyAttendRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyAttendUnit).HasMaxLength(20);

                entity.Property(e => e.EarlyLeaveMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EarlyLeaveUnit).HasMaxLength(20);

                entity.Property(e => e.FirstDayWork).HasColumnType("smalldatetime");

                entity.Property(e => e.LateArrivalMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LateArrivalRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LateArrivalUnit).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PeriodCode).HasMaxLength(50);

                entity.Property(e => e.ShiftNotAcheived).HasComment("عدم احتساب الورديه فى حالة خروج الموظف فى منتصف اليوم قبل ميعاد الانصراف");

                entity.Property(e => e.SubPeriodCount).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.TableEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TableStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.VacationOvertimeMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationOvertimeRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationOvertimeUnit).HasMaxLength(20);

                entity.Property(e => e.VacationWorkMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationWorkRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VacationWorkUnit).HasMaxLength(20);

                entity.Property(e => e.WeekEndWorkMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekEndWorkRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekEndWorkUnit).HasMaxLength(20);

                entity.Property(e => e.WeekendOvertimeMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekendOvertimeRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeekendOvertimeUnit).HasMaxLength(20);

                entity.Property(e => e.WorkdayOvertimeMinVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkdayOvertimeRound).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkdayOvertimeUnit).HasMaxLength(20);
            });

            modelBuilder.Entity<HrRewardAndPenalty>(entity =>
            {
                entity.HasKey(e => e.RewardId);

                entity.ToTable("Hr_RewardAndPenalty");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ExecutDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitDesc).HasMaxLength(100);

                entity.Property(e => e.UnitValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrSalaryCalcMethod>(entity =>
            {
                entity.HasKey(e => e.SalaryCalcMethod);

                entity.ToTable("Hr_SalaryCalcMethod");

                entity.Property(e => e.CalcMethodCode).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrSalaryIssueDetails>(entity =>
            {
                entity.HasKey(e => e.SalaryIssuDetailId);

                entity.ToTable("Hr_SalaryIssueDetails");

                entity.Property(e => e.AddValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeductValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ElementCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ElementCountDesc).HasMaxLength(100);

                entity.Property(e => e.ElementUnitValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OtherValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.SalaryIssuDoc)
                    .WithMany(p => p.HrSalaryIssueDetails)
                    .HasForeignKey(d => d.SalaryIssuDocId)
                    .HasConstraintName("FK_Hr_SalaryIssueDetails_Hr_SalaryIssueDoc");
            });

            modelBuilder.Entity<HrSalaryIssueDistribution>(entity =>
            {
                entity.HasKey(e => e.SalaryIssuDistId);

                entity.ToTable("Hr_SalaryIssueDistribution");

                entity.Property(e => e.SalaryDays).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.SalaryHours).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.SalaryPercent).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.ValueShare).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.SalaryIssuDoc)
                    .WithMany(p => p.HrSalaryIssueDistribution)
                    .HasForeignKey(d => d.SalaryIssuDocId)
                    .HasConstraintName("FK_Hr_SalaryIssueDistribution_Hr_SalaryIssueDoc");
            });

            modelBuilder.Entity<HrSalaryIssueDoc>(entity =>
            {
                entity.HasKey(e => e.SalaryIssuDocId);

                entity.ToTable("Hr_SalaryIssueDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalAddValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDeduction).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalOtherValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrSalaryTypes>(entity =>
            {
                entity.HasKey(e => e.SalaryTypId);

                entity.ToTable("Hr_SalaryTypes");

                entity.Property(e => e.AddField1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddField2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Approx).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Devide).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ElementCount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.ElementCountDesc).HasMaxLength(100);

                entity.Property(e => e.MaximumVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MinimumVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Multiply).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.SalaryCode).HasMaxLength(50);

                entity.Property(e => e.SalaryValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.ZeroIfLargerThan).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<HrSegments>(entity =>
            {
                entity.HasKey(e => e.SegmentId);

                entity.ToTable("Hr_Segments");

                entity.Property(e => e.FromSegmant).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.SegmantPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ToSegmant).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.SalaryTyp)
                    .WithMany(p => p.HrSegments)
                    .HasForeignKey(d => d.SalaryTypId)
                    .HasConstraintName("FK_Hr_Segments_Hr_SalaryTypes");
            });

            modelBuilder.Entity<HrShifts>(entity =>
            {
                entity.HasKey(e => e.ShiftId);

                entity.ToTable("Hr_Shifts");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Day1Name1).HasMaxLength(50);

                entity.Property(e => e.Day1Name2).HasMaxLength(50);

                entity.Property(e => e.Day2Name1).HasMaxLength(50);

                entity.Property(e => e.Day2Name2).HasMaxLength(50);

                entity.Property(e => e.Day3Name1).HasMaxLength(50);

                entity.Property(e => e.Day3Name2).HasMaxLength(50);

                entity.Property(e => e.Day4Name1).HasMaxLength(50);

                entity.Property(e => e.Day4Name2).HasMaxLength(50);

                entity.Property(e => e.Day5Name1).HasMaxLength(50);

                entity.Property(e => e.Day5Name2).HasMaxLength(50);

                entity.Property(e => e.Day6Name1).HasMaxLength(50);

                entity.Property(e => e.Day6Name2).HasMaxLength(50);

                entity.Property(e => e.Day7Name1).HasMaxLength(50);

                entity.Property(e => e.Day7Name2).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FirstShfDay1tFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay1To).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay2From).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay2To).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay3From).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay3To).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay4From).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay4To).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay5From).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay5To).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay6From).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay6To).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay7From).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstShftDay7To).HasColumnType("smalldatetime");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.SecondShftDay1From).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay1To).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay2From).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay2To).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay3From).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay3To).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay4From).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay4To).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay5From).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay5To).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay6From).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay6To).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay7From).HasColumnType("smalldatetime");

                entity.Property(e => e.SecondShftDay7To).HasColumnType("smalldatetime");

                entity.Property(e => e.ShiftCode).HasMaxLength(50);

                entity.Property(e => e.ThirdShftDay1From).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay1To).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay2From).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay2To).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay3From).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay3To).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay4From).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay4To).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay5From).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay5To).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay6From).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay6To).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay7From).HasColumnType("smalldatetime");

                entity.Property(e => e.ThirdShftDay7To).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrTermination>(entity =>
            {
                entity.HasKey(e => e.TerminateId);

                entity.ToTable("Hr_Termination");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ServiceEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<HrVacationDoc>(entity =>
            {
                entity.HasKey(e => e.VacationDocId);

                entity.ToTable("Hr_VacationDoc");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrVacationEdit>(entity =>
            {
                entity.HasKey(e => e.VacationEditDocId);

                entity.ToTable("Hr_VacationEdit");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NewReturnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<HrVacationRequest>(entity =>
            {
                entity.HasKey(e => e.VacRequestId);

                entity.ToTable("Hr_VacationRequest");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<LaLands>(entity =>
            {
                entity.HasKey(e => e.LandId);

                entity.ToTable("La_Lands");

                entity.Property(e => e.BasicMemeber).HasMaxLength(100);

                entity.Property(e => e.LandSize).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.LaLands)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_La_Lands_MS_Customer");
            });

            modelBuilder.Entity<LaPropSerial>(entity =>
            {
                entity.HasKey(e => e.PropId);

                entity.ToTable("La_PropSerial");

                entity.HasOne(d => d.CustMainNavigation)
                    .WithMany(p => p.LaPropSerial)
                    .HasForeignKey(d => d.CustMain)
                    .HasConstraintName("FK_La_PropSerial_MS_Customer");
            });

            modelBuilder.Entity<MobSalesInvoice>(entity =>
            {
                entity.HasKey(e => e.MobInvId);

                entity.ToTable("Mob_SalesInvoice");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankTransfer).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxReference).HasMaxLength(200);

                entity.Property(e => e.EtaxRemarks).HasMaxLength(100);

                entity.Property(e => e.EtaxSentTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCommision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodDatafield).HasMaxLength(250);

                entity.Property(e => e.PayMethodPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJobOrders).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyCar).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyNoVehicl).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyPump).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MobSalesInvoiceItemCard>(entity =>
            {
                entity.HasKey(e => e.InvItemCardId);

                entity.ToTable("Mob_SalesInvoiceItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CityIdfrom).HasColumnName("CityIDFrom");

                entity.Property(e => e.CityIdto).HasColumnName("CityIDTo");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.JobProductId).HasColumnName("jobProductId");

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OfferPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MobSalesInvoiceItemCard)
                    .HasForeignKey(d => d.MobInvId)
                    .HasConstraintName("FK_Mob_SalesInvoiceItemCard_Mob_SalesInvoice");
            });

            modelBuilder.Entity<MsAdjustMents>(entity =>
            {
                entity.HasKey(e => e.AdjustId);

                entity.ToTable("Ms_AdjustMents");

                entity.Property(e => e.AdjSourcType).HasComment("1 customer, 2 vendor");

                entity.Property(e => e.AdjSourcTypeId).HasComment("customer or vendor id");

                entity.Property(e => e.AdjType).HasComment("1 debit, 2 credit");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DifferenceInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaidInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ResourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCheques).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsAttachments>(entity =>
            {
                entity.HasKey(e => e.AttachId);

                entity.ToTable("Ms_Attachments");

                entity.Property(e => e.AttachDesc1).HasMaxLength(255);

                entity.Property(e => e.AttachDesc2).HasMaxLength(255);

                entity.Property(e => e.AttachPath).HasMaxLength(500);

                entity.Property(e => e.AttachPath2).HasMaxLength(500);

                entity.Property(e => e.AttachType).HasMaxLength(50);

                entity.Property(e => e.EncyptionDesc).HasMaxLength(500);

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IssuePlace).HasMaxLength(100);

                entity.Property(e => e.RenewalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TableCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MsBankAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId);

                entity.ToTable("Ms_BankAccount");

                entity.Property(e => e.AcounntNameA).HasMaxLength(100);

                entity.Property(e => e.AcounntNameE).HasMaxLength(100);

                entity.Property(e => e.AcountCode).HasMaxLength(50);
            });

            modelBuilder.Entity<MsBoxBank>(entity =>
            {
                entity.HasKey(e => e.BoxId);

                entity.ToTable("MS_BoxBank");

                entity.Property(e => e.BoxId).HasComment("0 Box ,1  Bank");

                entity.Property(e => e.BankFax).HasMaxLength(20);

                entity.Property(e => e.BankMobile).HasMaxLength(20);

                entity.Property(e => e.BankResposableName).HasMaxLength(50);

                entity.Property(e => e.BankTel).HasMaxLength(20);

                entity.Property(e => e.BoxCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CheckPrintId).HasColumnName("CheckPrintID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Desca)
                    .HasColumnName("DESCA")
                    .HasMaxLength(100);

                entity.Property(e => e.Desce)
                    .HasColumnName("DESCE")
                    .HasMaxLength(100);

                entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsBank).HasComment("0 Box ; 1 Bank");

                entity.Property(e => e.KeeperName).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsBoxCurrency>(entity =>
            {
                entity.HasKey(e => e.BoxCurrencyId);

                entity.ToTable("MS_BoxCurrency");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.MsBoxCurrency)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_MS_BoxCurrency_Ms_BankAccount");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.MsBoxCurrency)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_MS_BoxCurrency_MS_BoxBank");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.MsBoxCurrency)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_MS_BoxCurrency_MS_Currency");
            });

            modelBuilder.Entity<MsBoxTransferDetail>(entity =>
            {
                entity.HasKey(e => e.BoxTranDetailId)
                    .HasName("PK_BoxTransferDetail");

                entity.ToTable("MS_BoxTransferDetail");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.Valu)
                    .HasColumnName("valu")
                    .HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.BoxTran)
                    .WithMany(p => p.MsBoxTransferDetail)
                    .HasForeignKey(d => d.BoxTranId)
                    .HasConstraintName("FK_MS_BoxTransferDetail_MS_BoxTransferNote");
            });

            modelBuilder.Entity<MsBoxTransferNote>(entity =>
            {
                entity.HasKey(e => e.BoxTranId);

                entity.ToTable("MS_BoxTransferNote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.StrCustm1)
                    .HasColumnName("strCustm1")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm2)
                    .HasColumnName("strCustm2")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm3)
                    .HasColumnName("strCustm3")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsBoxUsers>(entity =>
            {
                entity.HasKey(e => e.BoxUsersId);

                entity.ToTable("Ms_BoxUsers");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.MsBoxUsers)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Ms_BoxUsers_MS_BoxBank");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MsBoxUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Ms_BoxUsers_G_Users");
            });

            modelBuilder.Entity<MsBusinessPartnerCategory>(entity =>
            {
                entity.HasKey(e => e.BsPartnerCatId);

                entity.ToTable("Ms_BusinessPartnerCategory");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.PartnerCatCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartnerCatDescA).HasMaxLength(100);

                entity.Property(e => e.PartnerCatDescE).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsBusinessPartnerType>(entity =>
            {
                entity.HasKey(e => e.BsPartnerTypeId);

                entity.ToTable("Ms_BusinessPartnerType");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.PartnerTypeCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartnerTypeDescA).HasMaxLength(100);

                entity.Property(e => e.PartnerTypeDescE).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsBusinessPartners>(entity =>
            {
                entity.HasKey(e => e.BspartnerId);

                entity.ToTable("Ms_BusinessPartners");

                entity.Property(e => e.BspartnerId).HasColumnName("BSPartnerId");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.CarLicenseExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssuePlace).HasMaxLength(50);

                entity.Property(e => e.CarLicenseNo).HasMaxLength(50);

                entity.Property(e => e.Company).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CreditLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLimitAllowed).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustId)
                    .HasColumnName("CustID")
                    .HasMaxLength(100);

                entity.Property(e => e.CustJob).HasMaxLength(100);

                entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultDisc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DtReg)
                    .HasColumnName("dtReg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtRegRenew)
                    .HasColumnName("dtRegRenew")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Evaluation).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.HomePage).HasMaxLength(300);

                entity.Property(e => e.Nationality).HasMaxLength(50);

                entity.Property(e => e.PartnerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartnerDescA).HasMaxLength(100);

                entity.Property(e => e.PartnerDescE).HasMaxLength(100);

                entity.Property(e => e.PassPortExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassPortIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassPortIssuePlace).HasMaxLength(50);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.PeriodType).HasComment("1 day, 2 month, 3 year");

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.PrePaidPercent).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ReportDiscValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxExemptionNo).HasMaxLength(50);

                entity.Property(e => e.TaxRefNo).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.BsPartnerCat)
                    .WithMany(p => p.MsBusinessPartners)
                    .HasForeignKey(d => d.BsPartnerCatId)
                    .HasConstraintName("FK_Ms_BusinessPartners_Ms_BusinessPartnerCategory");

                entity.HasOne(d => d.BsPartnerType)
                    .WithMany(p => p.MsBusinessPartners)
                    .HasForeignKey(d => d.BsPartnerTypeId)
                    .HasConstraintName("FK_Ms_BusinessPartners_Ms_BusinessPartnerType");
            });

            modelBuilder.Entity<MsCashTransactionDetail>(entity =>
            {
                entity.HasKey(e => e.PaidDocId);

                entity.ToTable("MS_CashTransactionDetail");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaidBeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Paid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidBeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidByDoc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidByDocBeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.Total).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrNoDesc).HasMaxLength(100);

                entity.HasOne(d => d.Adjust)
                    .WithMany(p => p.MsCashTransactionDetail)
                    .HasForeignKey(d => d.AdjustId)
                    .HasConstraintName("FK_MS_CashTransactionDetail_Ms_AdjustMents");

                entity.HasOne(d => d.Jurnal)
                    .WithMany(p => p.MsCashTransactionDetail)
                    .HasForeignKey(d => d.JurnalId)
                    .HasConstraintName("FK_MS_CashTransactionDetail_Cal_JurnalEntry");

                entity.HasOne(d => d.Pay)
                    .WithMany(p => p.MsCashTransactionDetail)
                    .HasForeignKey(d => d.PayId)
                    .HasConstraintName("FK_MS_CashTransactionDetail_MS_PaymentNote");

                entity.HasOne(d => d.Rect)
                    .WithMany(p => p.MsCashTransactionDetail)
                    .HasForeignKey(d => d.RectId)
                    .HasConstraintName("FK_MS_CashTransactionDetail_Ms_ReceiptNote");
            });

            modelBuilder.Entity<MsCheqBooks>(entity =>
            {
                entity.HasKey(e => e.CheqBookId)
                    .HasName("PK_Ms_Books");

                entity.ToTable("Ms_CheqBooks");

                entity.Property(e => e.CheqBookCode).HasMaxLength(100);

                entity.Property(e => e.CheqBookNamAr)
                    .HasColumnName("CheqBookNamAR")
                    .HasMaxLength(100);

                entity.Property(e => e.CheqBookNamEn)
                    .HasColumnName("CheqBookNamEN")
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.MsCheqBooks)
                    .HasForeignKey(d => d.EmpId)
                    .HasConstraintName("FK_Ms_Books_Hr_Employees");
            });

            modelBuilder.Entity<MsChequeTransfer>(entity =>
            {
                entity.HasKey(e => e.ChequTranId);

                entity.ToTable("Ms_ChequeTransfer");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsChequeTransferDetail>(entity =>
            {
                entity.HasKey(e => e.ChequTranDetailId);

                entity.ToTable("Ms_ChequeTransferDetail");

                entity.Property(e => e.BalanceAfter).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);
            });

            modelBuilder.Entity<MsChequesOpenning>(entity =>
            {
                entity.HasKey(e => e.ChequeOpenId);

                entity.ToTable("Ms_ChequesOpenning");

                entity.Property(e => e.BeneficiaryAccId).HasColumnName("beneficiaryAccId");

                entity.Property(e => e.BoxCurrencyId).HasComment("if Paper In [bank account and chartof account], if PaperOut [should be from book] and book is related to bank account which is related to account in chart of accounts");

                entity.Property(e => e.ChequeNumber).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HelpTableName).HasMaxLength(100);

                entity.Property(e => e.Rate).HasColumnType("numeric(28, 7)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Value).HasColumnType("numeric(28, 7)");

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(28, 7)");
            });

            modelBuilder.Entity<MsCommission>(entity =>
            {
                entity.HasKey(e => e.CommissionDocId);

                entity.ToTable("Ms_Commission");

                entity.Property(e => e.CommissionPercent).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.CommissionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsCompany>(entity =>
            {
                entity.HasKey(e => e.CompanyId)
                    .HasName("PK_Cal_Company");

                entity.ToTable("MS_Company");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.CompNameA).HasMaxLength(100);

                entity.Property(e => e.CompNameE).HasMaxLength(100);

                entity.Property(e => e.CompShortNameA).HasMaxLength(50);

                entity.Property(e => e.CompShortNameE).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DateOfEstablishment).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.Email1).HasMaxLength(100);

                entity.Property(e => e.Email2).HasMaxLength(100);

                entity.Property(e => e.Email3).HasMaxLength(100);

                entity.Property(e => e.Fax1).HasMaxLength(50);

                entity.Property(e => e.Fax2).HasMaxLength(50);

                entity.Property(e => e.Fax3).HasMaxLength(50);

                entity.Property(e => e.Fax4).HasMaxLength(50);

                entity.Property(e => e.LegalEntity).HasMaxLength(255);

                entity.Property(e => e.Logo).HasColumnType("image");

                entity.Property(e => e.MailBox).HasMaxLength(150);

                entity.Property(e => e.Mobile).HasMaxLength(50);

                entity.Property(e => e.Mobile1).HasMaxLength(50);

                entity.Property(e => e.Mobile2).HasMaxLength(50);

                entity.Property(e => e.Mobile3).HasMaxLength(50);

                entity.Property(e => e.OwnerName).HasMaxLength(100);

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.Tel1).HasMaxLength(50);

                entity.Property(e => e.Tel2).HasMaxLength(50);

                entity.Property(e => e.Tel3).HasMaxLength(50);

                entity.Property(e => e.Tel4).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.Website).HasMaxLength(100);

                entity.Property(e => e.Website1).HasMaxLength(100);

                entity.Property(e => e.Website2).HasMaxLength(100);

                entity.Property(e => e.Website3).HasMaxLength(100);

                entity.Property(e => e.YearEndTo).HasColumnType("smalldatetime");

                entity.Property(e => e.YearStartfrom).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsCurrency>(entity =>
            {
                entity.HasKey(e => e.CurrencyId);

                entity.ToTable("MS_Currency");

                entity.Property(e => e.CollectionCurrencyFractionName).HasMaxLength(100);

                entity.Property(e => e.CollectionCurrencyFractionName2).HasMaxLength(100);

                entity.Property(e => e.CollectionCurrencyName).HasMaxLength(100);

                entity.Property(e => e.CollectionCurrencyName2).HasMaxLength(100);

                entity.Property(e => e.CollectionCurrencyTempName).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CurrancyNameFractionOverthree).HasMaxLength(100);

                entity.Property(e => e.CurrancyNameFractionOverthree2).HasMaxLength(100);

                entity.Property(e => e.CurrancyNameOverthree).HasMaxLength(100);

                entity.Property(e => e.CurrancyNameOverthree2).HasMaxLength(100);

                entity.Property(e => e.CurrancyNameTempOver3).HasMaxLength(100);

                entity.Property(e => e.CurrenctType).HasMaxLength(50);

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CurrencySymbol).HasMaxLength(50);

                entity.Property(e => e.DefualtCurrency).HasDefaultValueSql("((0))");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DoubleCurencyFractionname).HasMaxLength(100);

                entity.Property(e => e.DoubleCurencyFractionname2).HasMaxLength(100);

                entity.Property(e => e.DoubleCurencyTempname).HasMaxLength(100);

                entity.Property(e => e.DoubleCurencyname).HasMaxLength(100);

                entity.Property(e => e.DoubleCurencyname2).HasMaxLength(100);

                entity.Property(e => e.EquivalentConversionPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxUnitCode).HasMaxLength(50);

                entity.Property(e => e.FractionalUnit)
                    .HasColumnName("fractionalUnit")
                    .HasMaxLength(50);

                entity.Property(e => e.LastModify).HasColumnType("smalldatetime");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.SingleCurencyFractionname)
                    .HasColumnName("singleCurencyFractionname")
                    .HasMaxLength(100);

                entity.Property(e => e.SingleCurencyFractionname2)
                    .HasColumnName("singleCurencyFractionname2")
                    .HasMaxLength(100);

                entity.Property(e => e.SingleCurencyTempname)
                    .HasColumnName("singleCurencyTempname")
                    .HasMaxLength(100);

                entity.Property(e => e.SingleCurencyname)
                    .HasColumnName("singleCurencyname")
                    .HasMaxLength(100);

                entity.Property(e => e.SingleCurencyname2)
                    .HasColumnName("singleCurencyname2")
                    .HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsCurrencyCategory>(entity =>
            {
                entity.HasKey(e => e.CurrencyCategoryId);

                entity.ToTable("MS_CurrencyCategory");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CurrencyCategoryNameA).HasMaxLength(100);

                entity.Property(e => e.CurrencyCategoryNameE).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsCurrencyCategoryJoin>(entity =>
            {
                entity.HasKey(e => e.CurrencyCatJoinId);

                entity.ToTable("Ms_CurrencyCategoryJoin");

                entity.HasOne(d => d.CurrencyCategory)
                    .WithMany(p => p.MsCurrencyCategoryJoin)
                    .HasForeignKey(d => d.CurrencyCategoryId)
                    .HasConstraintName("FK_Ms_CurrencyCategoryJoin_MS_CurrencyCategory");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.MsCurrencyCategoryJoin)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_Ms_CurrencyCategoryJoin_MS_Currency");
            });

            modelBuilder.Entity<MsCurrencyDailyRateChanges>(entity =>
            {
                entity.HasKey(e => e.CurrencyChangeId);

                entity.ToTable("Ms_CurrencyDailyRateChanges");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DateAndTime).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.NewRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OldRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsCurrencyRate>(entity =>
            {
                entity.HasKey(e => e.EqualCurrencyPriceId);

                entity.ToTable("Ms_CurrencyRate");

                entity.Property(e => e.LastModify).HasColumnType("smalldatetime");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.MsCurrencyRate)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_Ms_CurrencyRate_MS_Currency");
            });

            modelBuilder.Entity<MsCusromerUsers>(entity =>
            {
                entity.HasKey(e => e.CustUserId);

                entity.ToTable("Ms_CusromerUsers");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.MsCusromerUsers)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Ms_CusromerUsers_MS_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MsCusromerUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Ms_CusromerUsers_G_Users");
            });

            modelBuilder.Entity<MsCustImgs>(entity =>
            {
                entity.HasKey(e => e.CustImgId)
                    .HasName("PK_CustImgs");

                entity.ToTable("Ms_CustImgs");

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.ImgDesc1).HasMaxLength(250);

                entity.Property(e => e.ImgDesc2).HasMaxLength(250);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.MsCustImgs)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Ms_CustImgs_MS_Customer");
            });

            modelBuilder.Entity<MsCustomer>(entity =>
            {
                entity.HasKey(e => e.CustomerId);

                entity.ToTable("MS_Customer");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.CarLicenseExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CarLicenseIssuePlace).HasMaxLength(50);

                entity.Property(e => e.CarLicenseNo).HasMaxLength(50);

                entity.Property(e => e.Company).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CreditLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLimitAllowed).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustId)
                    .HasColumnName("CustID")
                    .HasMaxLength(100);

                entity.Property(e => e.CustJob).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultDisc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DtReg)
                    .HasColumnName("dtReg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtRegRenew)
                    .HasColumnName("dtRegRenew")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.EtaxCustType)
                    .HasMaxLength(50)
                    .HasComment("Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required");

                entity.Property(e => e.Evaluation).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.HomePage).HasMaxLength(300);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.LegalStatus).HasMaxLength(500);

                entity.Property(e => e.Nationality).HasMaxLength(50);

                entity.Property(e => e.PassPortExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassPortIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassPortIssuePlace).HasMaxLength(50);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.PeriodType).HasComment("1 day, 2 month, 3 year");

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.PrePaidPercent).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ReportDiscValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxExemptionNo).HasMaxLength(50);

                entity.Property(e => e.TaxRefNo).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.MsCustomer)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_MS_Customer_MS_Currency");

                entity.HasOne(d => d.CustomerCat)
                    .WithMany(p => p.MsCustomer)
                    .HasForeignKey(d => d.CustomerCatId)
                    .HasConstraintName("FK_MS_Customer_MS_CustomerCategory");

                entity.HasOne(d => d.CustomerType)
                    .WithMany(p => p.MsCustomer)
                    .HasForeignKey(d => d.CustomerTypeId)
                    .HasConstraintName("FK_MS_Customer_Ms_CustomerTypes");
            });

            modelBuilder.Entity<MsCustomerBranches>(entity =>
            {
                entity.HasKey(e => e.CustBranchId);

                entity.ToTable("Ms_CustomerBranches");

                entity.Property(e => e.Address).HasMaxLength(250);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CustBranchCode).HasMaxLength(50);

                entity.Property(e => e.CustBranchName1).HasMaxLength(100);

                entity.Property(e => e.CustBranchName2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.MsCustomerBranches)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Ms_CustomerBranches_MS_Customer");
            });

            modelBuilder.Entity<MsCustomerCategory>(entity =>
            {
                entity.HasKey(e => e.CustomerCatId);

                entity.ToTable("MS_CustomerCategory");

                entity.Property(e => e.CatCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.CatDescE).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsCustomerContacts>(entity =>
            {
                entity.HasKey(e => e.CustContactId);

                entity.ToTable("Ms_CustomerContacts");

                entity.Property(e => e.Bank1).HasMaxLength(100);

                entity.Property(e => e.Bank2).HasMaxLength(50);

                entity.Property(e => e.Bank3).HasMaxLength(50);

                entity.Property(e => e.BankAccNo1).HasMaxLength(50);

                entity.Property(e => e.BankAccNo2).HasMaxLength(50);

                entity.Property(e => e.BankAccNo3).HasMaxLength(50);

                entity.Property(e => e.ContactAddress1).HasMaxLength(100);

                entity.Property(e => e.ContactAddress2).HasMaxLength(100);

                entity.Property(e => e.ContactAddress3).HasMaxLength(100);

                entity.Property(e => e.ContactCode).HasMaxLength(50);

                entity.Property(e => e.ContactEmail1).HasMaxLength(100);

                entity.Property(e => e.ContactEmail2).HasMaxLength(100);

                entity.Property(e => e.ContactEmail3).HasMaxLength(100);

                entity.Property(e => e.ContactName1).HasMaxLength(100);

                entity.Property(e => e.ContactName2).HasMaxLength(100);

                entity.Property(e => e.ContactPhone1).HasMaxLength(30);

                entity.Property(e => e.ContactPhone2).HasMaxLength(30);

                entity.Property(e => e.ContactPhone3).HasMaxLength(30);

                entity.Property(e => e.ContactPhone4).HasMaxLength(30);

                entity.Property(e => e.ContactPhone5).HasMaxLength(30);

                entity.Property(e => e.Idno)
                    .HasColumnName("IDNo")
                    .HasMaxLength(20);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.Remark1).HasMaxLength(200);

                entity.Property(e => e.Remark2).HasMaxLength(200);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.MsCustomerContacts)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Ms_CustomerContacts_MS_Customer");
            });

            modelBuilder.Entity<MsCustomerFollowUpTypes>(entity =>
            {
                entity.HasKey(e => e.FollowUpTypeId)
                    .HasName("PK_Ms_CustomerFollowUp");

                entity.ToTable("Ms_CustomerFollowUpTypes");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsCustomerTypes>(entity =>
            {
                entity.HasKey(e => e.CustomerTypeId);

                entity.ToTable("Ms_CustomerTypes");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomerTypeCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerTypeDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerTypeDescE).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsCustomersFollowUp>(entity =>
            {
                entity.HasKey(e => e.FollowUpUpdateId);

                entity.ToTable("Ms_CustomersFollowUp");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.MsCustomersFollowUp)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_Ms_CustomersFollowUp_MS_Customer");
            });

            modelBuilder.Entity<MsDeliverItemCard>(entity =>
            {
                entity.HasKey(e => e.DelivItemCardId)
                    .HasName("PK_DeliverItemCard");

                entity.ToTable("Ms_DeliverItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.JobMaterialId).HasColumnName("jobMaterialId");

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Deliver)
                    .WithMany(p => p.MsDeliverItemCard)
                    .HasForeignKey(d => d.DeliverId)
                    .HasConstraintName("FK_Ms_DeliverItemCard_Ms_DeliverSalesInvoice");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsDeliverItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_DeliverItemCard_MS_ItemCard");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsDeliverItemCard)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Ms_DeliverItemCard_Ms_ItemUnit");
            });

            modelBuilder.Entity<MsDeliverSalesInvoice>(entity =>
            {
                entity.HasKey(e => e.DeliverId);

                entity.ToTable("Ms_DeliverSalesInvoice");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeliverQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeliverQtyOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsClosed).HasComment("True Closed ;  False  Not Closed");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPricFromInvBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceFromInv).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Status).HasComment("0 Invoice ; 1 Customer ; 2 Return");

                entity.Property(e => e.StrCustm4)
                    .HasColumnName("strCustm4")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCostAveragBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCostAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalLastCostBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyCar).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyNoVehicl).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyPump).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsDeliverSalesInvoiceExpenses>(entity =>
            {
                entity.HasKey(e => e.DeliverIdExpenseId);

                entity.ToTable("Ms_DeliverSalesInvoiceExpenses");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.ValueAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueCurrency).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Deliver)
                    .WithMany(p => p.MsDeliverSalesInvoiceExpenses)
                    .HasForeignKey(d => d.DeliverId)
                    .HasConstraintName("FK_Ms_DeliverSalesInvoiceExpenses_Ms_DeliverSalesInvoice");
            });

            modelBuilder.Entity<MsDeliverSalesInvoiceMultiAccounts>(entity =>
            {
                entity.HasKey(e => e.SalesDelMultiAccountId);

                entity.ToTable("Ms_DeliverSalesInvoiceMultiAccounts");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.Deliver)
                    .WithMany(p => p.MsDeliverSalesInvoiceMultiAccounts)
                    .HasForeignKey(d => d.DeliverId)
                    .HasConstraintName("FK_Ms_DeliverSalesInvoiceMultiAccounts_Ms_DeliverSalesInvoice");
            });

            modelBuilder.Entity<MsDescription>(entity =>
            {
                entity.HasKey(e => e.DescriptionId);

                entity.ToTable("Ms_Description");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);
            });

            modelBuilder.Entity<MsExpenses>(entity =>
            {
                entity.HasKey(e => e.ExpensesId);

                entity.ToTable("MS_Expenses");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ExpensesCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ExpensesDescA).HasMaxLength(100);

                entity.Property(e => e.ExpensesDescE).HasMaxLength(100);

                entity.Property(e => e.ExpensesType).HasComment("0 Sales , 1 Purchase , 2 Others");

                entity.Property(e => e.ExpensesValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaCapacity>(entity =>
            {
                entity.HasKey(e => e.CapcityId)
                    .HasName("PK_Ms_Capacity");

                entity.ToTable("MsGA_Capacity");

                entity.Property(e => e.CapcityCode).HasMaxLength(50);

                entity.Property(e => e.CapcityDescA).HasMaxLength(100);

                entity.Property(e => e.CapcityDescE).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Size).HasMaxLength(50);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaLetterExport>(entity =>
            {
                entity.HasKey(e => e.LetterExportId);

                entity.ToTable("MsGA_LetterExport");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomsNo).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaLetterExportDetail>(entity =>
            {
                entity.HasKey(e => e.LetExpDetailId);

                entity.ToTable("MsGA_LetterExportDetail");

                entity.Property(e => e.AddDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.BuyerAddress).HasMaxLength(200);

                entity.Property(e => e.BuyerId).HasMaxLength(50);

                entity.Property(e => e.BuyerName).HasMaxLength(100);

                entity.Property(e => e.ColLetterPrinted).HasColumnName("colLetterPrinted");

                entity.Property(e => e.ColQutPrinted).HasColumnName("colQutPrinted");

                entity.Property(e => e.ColSalePrinted).HasColumnName("colSalePrinted");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.LetterExport)
                    .WithMany(p => p.MsGaLetterExportDetail)
                    .HasForeignKey(d => d.LetterExportId)
                    .HasConstraintName("FK_MsGA_LetterExportDetail_MsGA_LetterExport");
            });

            modelBuilder.Entity<MsGaLetterFayum>(entity =>
            {
                entity.HasKey(e => e.LetterFayumId);

                entity.ToTable("MsGA_LetterFayum");

                entity.Property(e => e.AddField11).HasMaxLength(100);

                entity.Property(e => e.AddField21).HasMaxLength(100);

                entity.Property(e => e.BookBodyPrintTime).HasColumnType("smalldatetime");

                entity.Property(e => e.BookMotorPrintTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Client2)
                    .HasColumnName("client2")
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LogoPrintedBody).HasMaxLength(100);

                entity.Property(e => e.LogoPrintedMotor).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaLetterFayumDetail>(entity =>
            {
                entity.HasKey(e => e.LetFayumDetailId);

                entity.ToTable("MsGA_LetterFayumDetail");

                entity.Property(e => e.AddDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField11).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField21).HasMaxLength(100);

                entity.Property(e => e.BuyerAddress).HasMaxLength(200);

                entity.Property(e => e.BuyerId).HasMaxLength(50);

                entity.Property(e => e.BuyerName).HasMaxLength(100);

                entity.Property(e => e.ColLetterPrinted).HasColumnName("colLetterPrinted");

                entity.Property(e => e.ColQutPrinted).HasColumnName("colQutPrinted");

                entity.Property(e => e.ColSalePrinted).HasColumnName("colSalePrinted");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.LetterFayum)
                    .WithMany(p => p.MsGaLetterFayumDetail)
                    .HasForeignKey(d => d.LetterFayumId)
                    .HasConstraintName("FK_MsGA_LetterFayumDetail_MsGA_LetterFayum");
            });

            modelBuilder.Entity<MsGaLetterNormal>(entity =>
            {
                entity.HasKey(e => e.LetterNormId);

                entity.ToTable("MsGA_LetterNormal");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.BookBodyPrintTime).HasColumnType("smalldatetime");

                entity.Property(e => e.BookMotorPrintTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Client2)
                    .HasColumnName("client2")
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LogoPrintedBody).HasMaxLength(100);

                entity.Property(e => e.LogoPrintedMotor).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaLetterNormalDetail>(entity =>
            {
                entity.HasKey(e => e.LetNormDetailId);

                entity.ToTable("MsGA_LetterNormalDetail");

                entity.Property(e => e.AddDate).HasColumnType("smalldatetime");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField11).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField21).HasMaxLength(100);

                entity.Property(e => e.BuyerAddress).HasMaxLength(200);

                entity.Property(e => e.BuyerId).HasMaxLength(50);

                entity.Property(e => e.BuyerName).HasMaxLength(100);

                entity.Property(e => e.ColLetterPrinted).HasColumnName("colLetterPrinted");

                entity.Property(e => e.ColQutPrinted).HasColumnName("colQutPrinted");

                entity.Property(e => e.ColSalePrinted).HasColumnName("colSalePrinted");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.PlateNo).HasMaxLength(50);

                entity.Property(e => e.TaxReg).HasMaxLength(50);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.LetterNorm)
                    .WithMany(p => p.MsGaLetterNormalDetail)
                    .HasForeignKey(d => d.LetterNormId)
                    .HasConstraintName("FK_MsGA_LetterNormalDetail_MsGA_LetterNormal");
            });

            modelBuilder.Entity<MsGaLetterQuery>(entity =>
            {
                entity.HasKey(e => e.GawabQueryId);

                entity.ToTable("MsGA_LetterQuery");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaLetterTax>(entity =>
            {
                entity.HasKey(e => e.LetterTaxId);

                entity.ToTable("MsGA_LetterTax");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaLetterTempTax>(entity =>
            {
                entity.HasKey(e => e.LetterTaxTempId);

                entity.ToTable("MsGA_LetterTempTax");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Price).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.TaxPercent).HasColumnType("numeric(7, 2)");

                entity.Property(e => e.TaxValu).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.TempCode).HasMaxLength(50);

                entity.Property(e => e.TempDesca).HasMaxLength(100);

                entity.Property(e => e.TempDesce).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaMachineType>(entity =>
            {
                entity.HasKey(e => e.MachineId)
                    .HasName("PK_Ms_type");

                entity.ToTable("MsGA_MachineType");

                entity.Property(e => e.MachineId).HasColumnName("MachineID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.MachineCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MachineName).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaMoror>(entity =>
            {
                entity.HasKey(e => e.MororId)
                    .HasName("PK_GAV_Moror");

                entity.ToTable("MsGA_Moror");

                entity.Property(e => e.MororId).HasColumnName("MororID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.MoroCode)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaMotorSn>(entity =>
            {
                entity.HasKey(e => e.MotorDocId);

                entity.ToTable("MsGA_MotorSN");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaMotorSndetail>(entity =>
            {
                entity.HasKey(e => e.MotorSearialId)
                    .HasName("PK_Ms_MotorSearial");

                entity.ToTable("MsGA_MotorSNDetail");

                entity.Property(e => e.MotorSearialId).HasColumnName("MotorSearialID");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.BasicSaleType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 Cash ; 1 Installment");

                entity.Property(e => e.BodySn)
                    .HasColumnName("BodySN")
                    .HasMaxLength(200);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.MachineId).HasColumnName("MachineID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.MororId).HasColumnName("MororID");

                entity.Property(e => e.MotorSn)
                    .HasColumnName("MotorSN")
                    .HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.HasOne(d => d.LetterFayum)
                    .WithMany(p => p.MsGaMotorSndetail)
                    .HasForeignKey(d => d.LetterFayumId)
                    .HasConstraintName("FK_MsGA_MotorSNDetail_MsGA_LetterFayum");

                entity.HasOne(d => d.LetterNorm)
                    .WithMany(p => p.MsGaMotorSndetail)
                    .HasForeignKey(d => d.LetterNormId)
                    .HasConstraintName("FK_MsGA_MotorSNDetail_MsGA_LetterNormal");

                entity.HasOne(d => d.MotorDoc)
                    .WithMany(p => p.MsGaMotorSndetail)
                    .HasForeignKey(d => d.MotorDocId)
                    .HasConstraintName("FK_MsGA_MotorSNDetail_MsGA_MotorSN");
            });

            modelBuilder.Entity<MsGaPeriodicBook>(entity =>
            {
                entity.HasKey(e => e.PeriodicBookId);

                entity.ToTable("MsGA_PeriodicBook");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.ApprovalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Cover1).HasMaxLength(1000);

                entity.Property(e => e.Cover2).HasMaxLength(1000);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FirstLetter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastLetter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Logo1).HasMaxLength(1000);

                entity.Property(e => e.Logo2).HasMaxLength(1000);

                entity.Property(e => e.Logo3).HasMaxLength(1000);

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.Model).HasMaxLength(200);

                entity.Property(e => e.PreFix)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaPeriodicBookDetail>(entity =>
            {
                entity.HasKey(e => e.PeriodicBookDetailId);

                entity.ToTable("MsGA_PeriodicBookDetail");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.BasicSaleType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 Cash ; 1 Installment");

                entity.Property(e => e.BodySn)
                    .HasColumnName("BodySN")
                    .HasMaxLength(200);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.MachineId).HasColumnName("MachineID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.MororId).HasColumnName("MororID");

                entity.Property(e => e.MotorSn)
                    .HasColumnName("MotorSN")
                    .HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.HasOne(d => d.LetterNorm)
                    .WithMany(p => p.MsGaPeriodicBookDetail)
                    .HasForeignKey(d => d.LetterNormId)
                    .HasConstraintName("FK_MsGA_PeriodicBookDetail_MsGA_LetterNormal");

                entity.HasOne(d => d.PeriodicBook)
                    .WithMany(p => p.MsGaPeriodicBookDetail)
                    .HasForeignKey(d => d.PeriodicBookId)
                    .HasConstraintName("FK_MsGA_PeriodicBookDetail_MsGA_PeriodicBook");
            });

            modelBuilder.Entity<MsGaShipment>(entity =>
            {
                entity.HasKey(e => e.ShipMentId);

                entity.ToTable("MsGA_Shipment");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsGaShipmentDetail>(entity =>
            {
                entity.HasKey(e => e.ShipMentDetailId);

                entity.ToTable("MsGA_ShipmentDetail");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.BasicSaleType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 Cash ; 1 Installment");

                entity.Property(e => e.BodySn)
                    .HasColumnName("BodySN")
                    .HasMaxLength(200);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.MachineId).HasColumnName("MachineID");

                entity.Property(e => e.Model).HasMaxLength(50);

                entity.Property(e => e.MororId).HasColumnName("MororID");

                entity.Property(e => e.MotorSn)
                    .HasColumnName("MotorSN")
                    .HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.HasOne(d => d.LetterExport)
                    .WithMany(p => p.MsGaShipmentDetail)
                    .HasForeignKey(d => d.LetterExportId)
                    .HasConstraintName("FK_MsGA_ShipmentDetail_MsGA_LetterExport");

                entity.HasOne(d => d.ShipMent)
                    .WithMany(p => p.MsGaShipmentDetail)
                    .HasForeignKey(d => d.ShipMentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsGA_ShipmentDetail_MsGA_Shipment");
            });

            modelBuilder.Entity<MsItemAlternatives>(entity =>
            {
                entity.HasKey(e => e.AlterId);

                entity.ToTable("MS_ItemAlternatives");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemAlternatives)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_ItemAlternatives_MS_ItemCard");
            });

            modelBuilder.Entity<MsItemCard>(entity =>
            {
                entity.HasKey(e => e.ItemCardId);

                entity.ToTable("MS_ItemCard");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.AnimalClass).HasComment("1 animal, 2 food, 3 medicin");

                entity.Property(e => e.BeforLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Discount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FirstPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FirstQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Height).HasMaxLength(50);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemColor).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(200);

                entity.Property(e => e.ItemDescE).HasMaxLength(200);

                entity.Property(e => e.ItemLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemMax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemSize).HasMaxLength(50);

                entity.Property(e => e.ItemType).HasComment("1  Finished product,2 Material,3 non stock Item,4 Manufactured,5 vehicle");

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LargePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LargeQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostManual).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastPurchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastSalePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.LeastProfitMargin).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LeastSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Length).HasMaxLength(50);

                entity.Property(e => e.ManualPurchasePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OfferDesc)
                    .HasMaxLength(255)
                    .HasComment("1 day, 2 month, 3 year");

                entity.Property(e => e.OfferFromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OfferToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PeriodType).HasComment("1 day, 2 month, 3 year");

                entity.Property(e => e.Price10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchasePrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QtyInBox).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInNotebook)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyPartiation)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.SecandPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SecandQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Separator)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SerialNoPrefix).HasMaxLength(50);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(20);

                entity.Property(e => e.Tax1Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Style).HasComment("0 Percent , 1 value , 2 Without");

                entity.Property(e => e.Tax2Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Style).HasComment("0 Percent , 1 value , 2 Without");

                entity.Property(e => e.Tax3Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Style).HasComment("0 Percent , 1 value , 2 Without");

                entity.Property(e => e.TaxItemCode).HasMaxLength(100);

                entity.Property(e => e.ThirdPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ThridQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.WarantyPeriodType).HasComment("1 day,2 week, 3 month, 4 year");

                entity.Property(e => e.Wheight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Width).HasMaxLength(50);

                entity.HasOne(d => d.ItemCategory)
                    .WithMany(p => p.MsItemCard)
                    .HasForeignKey(d => d.ItemCategoryId)
                    .HasConstraintName("FK_MS_ItemCard_MS_ItemCategory");
            });

            modelBuilder.Entity<MsItemCardOffers>(entity =>
            {
                entity.HasKey(e => e.OfferItemId);

                entity.ToTable("Ms_ItemCardOffers");

                entity.Property(e => e.BasicQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GiftDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GiftQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterDisc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemCardOffers)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_ItemCardOffers_MS_ItemCard");
            });

            modelBuilder.Entity<MsItemCardVendors>(entity =>
            {
                entity.HasKey(e => e.ItemVendorId);

                entity.ToTable("Ms_ItemCardVendors");
            });

            modelBuilder.Entity<MsItemCategory>(entity =>
            {
                entity.HasKey(e => e.ItemCategoryId);

                entity.ToTable("MS_ItemCategory");

                entity.Property(e => e.CategoryImage).HasColumnType("image");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ItemCatCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemCatDescA).HasMaxLength(100);

                entity.Property(e => e.ItemCatDescE).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsItemCollection>(entity =>
            {
                entity.HasKey(e => e.ItemCollectId);

                entity.ToTable("Ms_ItemCollection");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemCollection)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_ItemCollection_MS_ItemCard");
            });

            modelBuilder.Entity<MsItemCostHistory>(entity =>
            {
                entity.HasKey(e => e.ItemCostId)
                    .HasName("PK_MS_ItemCostLog");

                entity.ToTable("MS_ItemCostHistory");

                entity.Property(e => e.AffectByTableName).HasMaxLength(70);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(100);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemMax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LogType).HasMaxLength(20);

                entity.Property(e => e.PurNotReceived).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchaseOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInNotebook).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInWithoutCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutWithoutBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPartiation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RequestedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReservedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SaleNotDelivered).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WithoutCost).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsItemImages>(entity =>
            {
                entity.HasKey(e => e.ImgId);

                entity.ToTable("MS_ItemImages");

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.ImgDesc1).HasMaxLength(250);

                entity.Property(e => e.ImgDesc2).HasMaxLength(250);

                entity.Property(e => e.ImgPath).HasMaxLength(500);

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemImages)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_ItemImages_MS_ItemCard");
            });

            modelBuilder.Entity<MsItemPartition>(entity =>
            {
                entity.HasKey(e => e.ItemPartId);

                entity.ToTable("Ms_ItemPartition");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(100);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemMax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurNotReceived).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchaseOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInNotebook)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyInWithoutCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2Notebook)
                    .HasColumnName("QtyIUnit2Notebook")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyIunit2Partiation)
                    .HasColumnName("QtyIUnit2Partiation")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOutWithoutBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPartiation)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReservedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SaleNotDelivered).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Ttype)
                    .HasColumnName("TType")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("i for inserted, u for updated");

                entity.Property(e => e.Tversion)
                    .HasColumnName("TVersion")
                    .HasComment("number of updates on the table");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.VarianceQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WithoutCost).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemPartition)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_ItemPartition_MS_ItemCard");

                entity.HasOne(d => d.StorePart)
                    .WithMany(p => p.MsItemPartition)
                    .HasForeignKey(d => d.StorePartId)
                    .HasConstraintName("FK_Ms_ItemPartition_MS_Partition");
            });

            modelBuilder.Entity<MsItemSerials>(entity =>
            {
                entity.HasKey(e => e.ItemSerialId)
                    .HasName("PK_MS_ItemSerials_1");

                entity.ToTable("MS_ItemSerials");

                entity.Property(e => e.Color).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Height).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Length).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Srno1)
                    .HasColumnName("SRNo1")
                    .HasMaxLength(100);

                entity.Property(e => e.Srno2)
                    .HasColumnName("SRNo2")
                    .HasMaxLength(100);

                entity.Property(e => e.Srno3)
                    .HasColumnName("SRNo3")
                    .HasMaxLength(100);

                entity.Property(e => e.Srno4)
                    .HasColumnName("SRNo4")
                    .HasMaxLength(100);

                entity.Property(e => e.Srno5)
                    .HasColumnName("SRNo5")
                    .HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.WarrantyEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WarrantyStrtDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Width).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.DelivItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.DelivItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_Ms_DeliverItemCard");

                entity.HasOne(d => d.InvItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.InvItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_Ms_SalesInvoiceItemCard");

                entity.HasOne(d => d.OrderDetailItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.OrderDetailItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_Ms_SalesOrderItemCard");

                entity.HasOne(d => d.PurInvItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.PurInvItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_MS_PurchaseInvoiceItemCard");

                entity.HasOne(d => d.RetItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.RetItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_MS_ReturnSalesItemCard");

                entity.HasOne(d => d.RetPurchItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.RetPurchItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_MS_ReturnPurchaseItem");

                entity.HasOne(d => d.StockAdjustItem)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.StockAdjustItemId)
                    .HasConstraintName("FK_MS_ItemSerials_Ms_ItemStockAdjustmentDetail");

                entity.HasOne(d => d.StockRecItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.StockRecItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_MS_StockReceiptItemCard");

                entity.HasOne(d => d.TrItenCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.TrItenCardId)
                    .HasConstraintName("FK_MS_ItemSerials_MS_StockTranItemCard");

                entity.HasOne(d => d.TranReqItemCard)
                    .WithMany(p => p.MsItemSerials)
                    .HasForeignKey(d => d.TranReqItemCardId)
                    .HasConstraintName("FK_MS_ItemSerials_Ms_StockTranItemCardReq");
            });

            modelBuilder.Entity<MsItemSerialsTransactions>(entity =>
            {
                entity.HasKey(e => e.ItemSerialTranId);

                entity.ToTable("MS_ItemSerialsTransactions");

                entity.Property(e => e.TableCode).HasMaxLength(100);
            });

            modelBuilder.Entity<MsItemShortage>(entity =>
            {
                entity.HasKey(e => e.ItemShortId);

                entity.ToTable("Ms_ItemShortage");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.RequestedQtyBeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RequestedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsItemStartQty>(entity =>
            {
                entity.HasKey(e => e.StartQtyId);

                entity.ToTable("Ms_ItemStartQty");

                entity.Property(e => e.QtyInNotebook)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyPartiation)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemStartQty)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_ItemStartQty_MS_ItemCard");
            });

            modelBuilder.Entity<MsItemStockAdjustment>(entity =>
            {
                entity.HasKey(e => e.StockAdjustId);

                entity.ToTable("Ms_ItemStockAdjustment");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.StockTotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsItemStockAdjustmentDetail>(entity =>
            {
                entity.HasKey(e => e.StockAdjustItemId);

                entity.ToTable("Ms_ItemStockAdjustmentDetail");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageOld).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageOldUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiffQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiffQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostOld)
                    .HasColumnName("FIFOCostOld")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostOldUnit)
                    .HasColumnName("FIFOCostOldUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostOld)
                    .HasColumnName("LIFOCostOld")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostOldUnit)
                    .HasColumnName("LIFOCostOldUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NewQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OldQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateNew).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateOld).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemStockAdjustmentDetail)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_ItemStockAdjustmentDetail_MS_ItemCard");

                entity.HasOne(d => d.StockAdjust)
                    .WithMany(p => p.MsItemStockAdjustmentDetail)
                    .HasForeignKey(d => d.StockAdjustId)
                    .HasConstraintName("FK_Ms_ItemStockAdjustmentDetail_Ms_ItemStockAdjustment");
            });

            modelBuilder.Entity<MsItemUnit>(entity =>
            {
                entity.HasKey(e => e.UnitId);

                entity.ToTable("Ms_ItemUnit");

                entity.Property(e => e.BarCode1).HasMaxLength(60);

                entity.Property(e => e.BarCode10).HasMaxLength(60);

                entity.Property(e => e.BarCode11).HasMaxLength(60);

                entity.Property(e => e.BarCode12).HasMaxLength(60);

                entity.Property(e => e.BarCode13).HasMaxLength(60);

                entity.Property(e => e.BarCode14).HasMaxLength(60);

                entity.Property(e => e.BarCode15).HasMaxLength(60);

                entity.Property(e => e.BarCode2).HasMaxLength(60);

                entity.Property(e => e.BarCode3).HasMaxLength(60);

                entity.Property(e => e.BarCode4).HasMaxLength(60);

                entity.Property(e => e.BarCode5).HasMaxLength(60);

                entity.Property(e => e.BarCode6).HasMaxLength(60);

                entity.Property(e => e.BarCode7).HasMaxLength(60);

                entity.Property(e => e.BarCode8).HasMaxLength(60);

                entity.Property(e => e.BarCode9).HasMaxLength(60);

                entity.Property(e => e.BeforLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxUnitCode).HasMaxLength(50);

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostManual).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastSalePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LeastProfitMargin).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LeastSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualPurchasePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnitNameE).HasMaxLength(100);

                entity.Property(e => e.UnittRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Wheight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.X).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Y).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Z).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.BasUnit)
                    .WithMany(p => p.MsItemUnit)
                    .HasForeignKey(d => d.BasUnitId)
                    .HasConstraintName("FK_Ms_ItemUnit_Prod_BasicUnits");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemUnit)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_ItemUnit_MS_ItemCard");
            });

            modelBuilder.Entity<MsItemUnitPackingJoin>(entity =>
            {
                entity.HasKey(e => e.ItemPackSizeId);

                entity.ToTable("Ms_ItemUnitPackingJoin");

                entity.Property(e => e.MaxQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MaxWheight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MineQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInPackage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RecomendedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.HasOne(d => d.PackSize)
                    .WithMany(p => p.MsItemUnitPackingJoin)
                    .HasForeignKey(d => d.PackSizeId)
                    .HasConstraintName("FK_Ms_ItemUnitPackingJoin_Cod_PackingSize");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsItemUnitPackingJoin)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Ms_ItemUnitPackingJoin_Ms_ItemUnit");
            });

            modelBuilder.Entity<MsItemVendors>(entity =>
            {
                entity.HasKey(e => e.ItemVendorId);

                entity.ToTable("MS_ItemVendors");

                entity.Property(e => e.Price1)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price10)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price2)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price3)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price4)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price5)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price6)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price7)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price8)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price9)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity1)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity10)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity2)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity3)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity4)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity5)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity6)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity7)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity8)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Quantity9)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsItemVendors)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_ItemVendors_MS_ItemCard");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.MsItemVendors)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_MS_ItemVendors_MS_Vendor");
            });

            modelBuilder.Entity<MsJewelryPricing>(entity =>
            {
                entity.HasKey(e => e.GoldPricingId);

                entity.ToTable("Ms_JewelryPricing");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.GlobalGramPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GlobalKiloPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GlobalOuncePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.Kirat)
                    .HasColumnType("numeric(38, 10)")
                    .HasComment("18,21,24");

                entity.Property(e => e.KiratGlobalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.KiratLocalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LocaGramPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LocalKiloPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LocalOuncePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsKeeperBank>(entity =>
            {
                entity.HasKey(e => e.KeeperId);

                entity.ToTable("Ms_KeeperBank");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.KeeperNo).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCheques).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsKeeperBankDetail>(entity =>
            {
                entity.HasKey(e => e.KeeperDetailId);

                entity.ToTable("Ms_KeeperBankDetail");

                entity.Property(e => e.CollectDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.ReturnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TransferredAte).HasColumnType("smalldatetime");

                entity.HasOne(d => d.Keeper)
                    .WithMany(p => p.MsKeeperBankDetail)
                    .HasForeignKey(d => d.KeeperId)
                    .HasConstraintName("FK_Ms_KeeperBankDetail_Ms_KeeperBank");
            });

            modelBuilder.Entity<MsLetterOfGuarantee>(entity =>
            {
                entity.HasKey(e => e.LetOfGrnteeId);

                entity.ToTable("Ms_LetterOfGuarantee");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CashMargin).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Conditions).HasMaxLength(1500);

                entity.Property(e => e.CoverPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoverValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustodyGuarantee).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Expenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LetEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LimitGuarantee).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReceiverName).HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsLetterOfGuaranteeCategory>(entity =>
            {
                entity.HasKey(e => e.LetOfGrnteeCatId);

                entity.ToTable("Ms_LetterOfGuaranteeCategory");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsLetterOfGuaranteeStatus>(entity =>
            {
                entity.HasKey(e => e.LetOfGrnteeStatusId);

                entity.ToTable("Ms_LetterOfGuaranteeStatus");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsItemCardDefaulPartitions>(entity =>
            {
                entity.HasKey(e => e.ItemStorePrtId);

                entity.ToTable("Ms_ItemCardDefaulPartitions");
            });


            modelBuilder.Entity<MsLetterOfGuaranteeTrans>(entity =>
            {
                entity.HasKey(e => e.LetOfGrnteeTranId);

                entity.ToTable("Ms_LetterOfGuaranteeTrans");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CashMargin).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Conditions).HasMaxLength(1500);

                entity.Property(e => e.CoverPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoverValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustodyGuarantee).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.Expenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LetEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LetrOfGaccountId).HasColumnName("LetrOfGAccountId");

                entity.Property(e => e.LetrOfGcommisionAccountId).HasColumnName("LetrOfGCommisionAccountId");

                entity.Property(e => e.LetrOfGexpensAccountId).HasColumnName("LetrOfGExpensAccountId");

                entity.Property(e => e.LimitGuarantee).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReceiverName).HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.ValuEffect).HasComment("1 Uprais,2 Decreas, else none");

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.LetOfGrntee)
                    .WithMany(p => p.MsLetterOfGuaranteeTrans)
                    .HasForeignKey(d => d.LetOfGrnteeId)
                    .HasConstraintName("FK_Ms_LetterOfGuaranteeTrans_Ms_LetterOfGuarantee");
            });

            modelBuilder.Entity<MsLetterOfGuaranteeTypes>(entity =>
            {
                entity.HasKey(e => e.LetOfGrnteeTypeId);

                entity.ToTable("Ms_LetterOfGuaranteeTypes");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsLotNumberConfiguration>(entity =>
            {
                entity.HasKey(e => e.LotNumberConfigId);

                entity.ToTable("MS_LotNumberConfiguration");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.LotConfigDescription).HasMaxLength(500);

                entity.Property(e => e.Part1).HasMaxLength(10);

                entity.Property(e => e.Part10).HasMaxLength(10);

                entity.Property(e => e.Part10Label).HasMaxLength(50);

                entity.Property(e => e.Part1DateType).HasComment("1 day,2 week,3 month,4 year");

                entity.Property(e => e.Part1Label).HasMaxLength(50);

                entity.Property(e => e.Part1type).HasComment("1 fixed,2 manual,3 date");

                entity.Property(e => e.Part2).HasMaxLength(10);

                entity.Property(e => e.Part2Label).HasMaxLength(50);

                entity.Property(e => e.Part3).HasMaxLength(10);

                entity.Property(e => e.Part3Label).HasMaxLength(50);

                entity.Property(e => e.Part4).HasMaxLength(10);

                entity.Property(e => e.Part4Label).HasMaxLength(50);

                entity.Property(e => e.Part5).HasMaxLength(10);

                entity.Property(e => e.Part5Label).HasMaxLength(50);

                entity.Property(e => e.Part6).HasMaxLength(10);

                entity.Property(e => e.Part6Label).HasMaxLength(50);

                entity.Property(e => e.Part7).HasMaxLength(10);

                entity.Property(e => e.Part7Label).HasMaxLength(50);

                entity.Property(e => e.Part8).HasMaxLength(10);

                entity.Property(e => e.Part8Label).HasMaxLength(50);

                entity.Property(e => e.Part9).HasMaxLength(10);

                entity.Property(e => e.Part9Label).HasMaxLength(50);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsLotNumberExpiry>(entity =>
            {
                entity.HasKey(e => e.LotNumberExpiryId);

                entity.ToTable("MS_LotNumberExpiry");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Day).HasMaxLength(10);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FixedPart).HasMaxLength(50);

                entity.Property(e => e.LotNumberExpiry).HasMaxLength(50);

                entity.Property(e => e.ManualPart).HasMaxLength(50);

                entity.Property(e => e.ManualPart2).HasMaxLength(50);

                entity.Property(e => e.ManualPart3).HasMaxLength(50);

                entity.Property(e => e.ManualPart4).HasMaxLength(50);

                entity.Property(e => e.ManualPart5).HasMaxLength(50);

                entity.Property(e => e.ManualPart6).HasMaxLength(50);

                entity.Property(e => e.Month).HasMaxLength(10);

                entity.Property(e => e.PeriodType).HasComment("1 day, 2 month, 3 year");

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remark).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.Remarks4).HasMaxLength(100);

                entity.Property(e => e.Remarks5).HasMaxLength(100);

                entity.Property(e => e.Remarks6).HasMaxLength(100);

                entity.Property(e => e.Remarks7).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Week).HasMaxLength(10);

                entity.Property(e => e.Year).HasMaxLength(10);
            });

            modelBuilder.Entity<MsMobSettings>(entity =>
            {
                entity.HasKey(e => e.MobSetId);

                entity.ToTable("Ms_MobSettings");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsPartition>(entity =>
            {
                entity.HasKey(e => e.StorePartId);

                entity.ToTable("MS_Partition");

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.AnimalCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.PartCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartDescA).HasMaxLength(100);

                entity.Property(e => e.PartDescE).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.Size).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Space).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StoreKeeper).HasMaxLength(50);

                entity.Property(e => e.StrCustm2)
                    .HasColumnName("strCustm2")
                    .HasMaxLength(20);

                entity.Property(e => e.StrCustm3)
                    .HasColumnName("strCustm3")
                    .HasMaxLength(20);

                entity.Property(e => e.StrCustm4)
                    .HasColumnName("strCustm4")
                    .HasMaxLength(20);

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(20);

                entity.Property(e => e.StrCustm6)
                    .HasColumnName("strCustm6")
                    .HasMaxLength(20);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.X).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Y).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Z).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.MsPartition)
                    .HasForeignKey(d => d.StoreId)
                    .HasConstraintName("FK_MS_Partition_MS_Stores");
            });

            modelBuilder.Entity<MsPaymentNote>(entity =>
            {
                entity.HasKey(e => e.PayId);

                entity.ToTable("MS_PaymentNote");

                entity.HasIndex(e => new { e.TrNo, e.BookId })
                    .HasName("StopDoubleTrNoPayment")
                    .IsUnique();

                entity.Property(e => e.AccountTableName).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankAccNumber).HasMaxLength(50);

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.CheckType).HasComment("0 Paid ; 1 Back ; 2  Transfer;");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId).HasColumnName("DBTableId");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DifferenceInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Equation).HasMaxLength(1000);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaidInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OtherSource).HasMaxLength(100);

                entity.Property(e => e.PaidDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceType).HasComment(" 1  Customer ; 2 vendor ; 3  Other");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ResourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StrCustm1)
                    .HasColumnName("strCustm1")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm2)
                    .HasColumnName("strCustm2")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItems).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranType).HasComment("0  Cash ; 1  Check");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Value1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value1BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.MsPaymentNote)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_MS_PaymentNote_MS_BoxBank");

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.MsPaymentNote)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_MS_PaymentNote_MS_PurchasInvoice");

                entity.HasOne(d => d.RetSale)
                    .WithMany(p => p.MsPaymentNote)
                    .HasForeignKey(d => d.RetSaleId)
                    .HasConstraintName("FK_MS_PaymentNote_MS_ReturnSales");
            });

            modelBuilder.Entity<MsPaymentNoteCurrencies>(entity =>
            {
                entity.HasKey(e => e.PayCurId);

                entity.ToTable("Ms_PaymentNoteCurrencies");

                entity.Property(e => e.Count).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Total).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Pay)
                    .WithMany(p => p.MsPaymentNoteCurrencies)
                    .HasForeignKey(d => d.PayId)
                    .HasConstraintName("FK_Ms_PaymentNoteCurrencies_MS_PaymentNote");
            });

            modelBuilder.Entity<MsPaymentNoteItems>(entity =>
            {
                entity.HasKey(e => e.PayItemsId);

                entity.ToTable("Ms_PaymentNoteItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.ExecutedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Pay)
                    .WithMany(p => p.MsPaymentNoteItems)
                    .HasForeignKey(d => d.PayId)
                    .HasConstraintName("FK_Ms_PaymentNoteItems_MS_PaymentNote");
            });

            modelBuilder.Entity<MsPettyCashDetails>(entity =>
            {
                entity.HasKey(e => e.PettycashDetailId);

                entity.ToTable("MS_PettyCashDetails");

                entity.Property(e => e.ActionDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.ExecutedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remark1).HasMaxLength(100);

                entity.Property(e => e.Remark2).HasMaxLength(100);

                entity.Property(e => e.Remark3).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Pettycash)
                    .WithMany(p => p.MsPettyCashDetails)
                    .HasForeignKey(d => d.PettycashId)
                    .HasConstraintName("FK_MS_PettyCashDetails_MS_Pettycash");
            });

            modelBuilder.Entity<MsPettyPaymentJoin>(entity =>
            {
                entity.HasKey(e => e.PetyPayId);

                entity.ToTable("Ms_PettyPaymentJoin");

                entity.HasOne(d => d.Pay)
                    .WithMany(p => p.MsPettyPaymentJoin)
                    .HasForeignKey(d => d.PayId)
                    .HasConstraintName("FK_Ms_PettyPaymentJoin_MS_PaymentNote");

                entity.HasOne(d => d.Pettycash)
                    .WithMany(p => p.MsPettyPaymentJoin)
                    .HasForeignKey(d => d.PettycashId)
                    .HasConstraintName("FK_Ms_PettyPaymentJoin_MS_Pettycash");
            });

            modelBuilder.Entity<MsPettycash>(entity =>
            {
                entity.HasKey(e => e.PettycashId);

                entity.ToTable("MS_Pettycash");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceType).HasComment(" 1  Customer ; 2 vendor ; 3  Other");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalFilteredPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");
            });

            modelBuilder.Entity<MsPosItemCategory>(entity =>
            {
                entity.HasKey(e => e.PosItemCategoryId);

                entity.ToTable("Ms_PosItemCategory");
            });

            modelBuilder.Entity<MsPosPaymentMethods>(entity =>
            {
                entity.HasKey(e => e.PayMethodId);

                entity.ToTable("Ms_PosPaymentMethods");

                entity.Property(e => e.AddPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Desc1).HasMaxLength(250);

                entity.Property(e => e.Desc2).HasMaxLength(250);

                entity.Property(e => e.MethodImage).HasColumnType("image");

                entity.Property(e => e.UserQuestion).HasMaxLength(250);
            });

            modelBuilder.Entity<MsPosShifts>(entity =>
            {
                entity.HasKey(e => e.PosShiftLogId);

                entity.ToTable("Ms_PosShifts");

                entity.Property(e => e.PosShiftLogId).ValueGeneratedNever();

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ShiftEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.ShiftStart).HasColumnType("smalldatetime");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Trdate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsPosSpecialItems>(entity =>
            {
                entity.HasKey(e => e.SpecialItemCardId);

                entity.ToTable("Ms_PosSpecialItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);
            });

            modelBuilder.Entity<MsPossettings>(entity =>
            {
                entity.HasKey(e => e.PosSetId);

                entity.ToTable("Ms_POSSettings");

                entity.Property(e => e.CmdCredit)
                    .HasColumnName("cmdCredit")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdCredit2)
                    .HasColumnName("cmdCredit2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDelete)
                    .HasColumnName("cmdDelete")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDelete2)
                    .HasColumnName("cmdDelete2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDeleteItem)
                    .HasColumnName("cmdDeleteItem")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDeleteItem2)
                    .HasColumnName("cmdDeleteItem2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDiscount)
                    .HasColumnName("cmdDiscount")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDiscount2)
                    .HasColumnName("cmdDiscount2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDocSearch)
                    .HasColumnName("cmdDocSearch")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdDocSearch2)
                    .HasColumnName("cmdDocSearch2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdEdit)
                    .HasColumnName("cmdEdit")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdEdit2)
                    .HasColumnName("cmdEdit2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdFirst)
                    .HasColumnName("cmdFirst")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdFirst2)
                    .HasColumnName("cmdFirst2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdHold)
                    .HasColumnName("cmdHold")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdHold2)
                    .HasColumnName("cmdHold2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdItemEdit)
                    .HasColumnName("cmdItemEdit")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdItemEdit2)
                    .HasColumnName("cmdItemEdit2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdItemSearch1)
                    .HasColumnName("cmdItemSearch1")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdItemSearch2)
                    .HasColumnName("cmdItemSearch2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdLast)
                    .HasColumnName("cmdLast")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdLast2)
                    .HasColumnName("cmdLast2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdNew)
                    .HasColumnName("cmdNew")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdNew2)
                    .HasColumnName("cmdNew2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdNext)
                    .HasColumnName("cmdNext")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdNext2)
                    .HasColumnName("cmdNext2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdOffer1)
                    .HasColumnName("cmdOffer1")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdOffer2)
                    .HasColumnName("cmdOffer2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPay)
                    .HasColumnName("cmdPay")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPay2)
                    .HasColumnName("cmdPay2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPreview)
                    .HasColumnName("cmdPreview")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPreview2)
                    .HasColumnName("cmdPreview2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPrevious)
                    .HasColumnName("cmdPrevious")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPrevious2)
                    .HasColumnName("cmdPrevious2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPrint)
                    .HasColumnName("cmdPrint")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdPrint2)
                    .HasColumnName("cmdPrint2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdRetWithInv)
                    .HasColumnName("cmdRetWithInv")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdRetWithInv2)
                    .HasColumnName("cmdRetWithInv2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdRetWithoutInv)
                    .HasColumnName("cmdRetWithoutInv")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdRetWithoutInv2)
                    .HasColumnName("cmdRetWithoutInv2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdSave)
                    .HasColumnName("cmdSave")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdSave2)
                    .HasColumnName("cmdSave2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdShortage)
                    .HasColumnName("cmdShortage")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdShortage2)
                    .HasColumnName("cmdShortage2")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdUndo)
                    .HasColumnName("cmdUndo")
                    .HasMaxLength(20);

                entity.Property(e => e.CmdUndo2)
                    .HasColumnName("cmdUndo2")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<MsPurchInvVehicleJobOrderJoin>(entity =>
            {
                entity.HasKey(e => e.PurchVehiclJobOrderId);

                entity.ToTable("Ms_PurchInvVehicleJobOrderJoin");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.MsPurchInvVehicleJobOrderJoin)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_Ms_PurchInvVehicleJobOrderJoin_MS_PurchasInvoice");

                entity.HasOne(d => d.Vjorder)
                    .WithMany(p => p.MsPurchInvVehicleJobOrderJoin)
                    .HasForeignKey(d => d.VjorderId)
                    .HasConstraintName("FK_Ms_PurchInvVehicleJobOrderJoin_Sr_VehicleJobOrder");
            });

            modelBuilder.Entity<MsPurchOrderDetail>(entity =>
            {
                entity.HasKey(e => e.OrderDetailItemCardId);

                entity.ToTable("MS_PurchOrderDetail");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyExecuted).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyExecutedBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsPurchOrderDetail)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_PurchOrderDetail_MS_ItemCard");

                entity.HasOne(d => d.PurOrder)
                    .WithMany(p => p.MsPurchOrderDetail)
                    .HasForeignKey(d => d.PurOrderId)
                    .HasConstraintName("FK_MS_PurchOrderDetail_Ms_PurchasOrder");
            });

            modelBuilder.Entity<MsPurchOrderReqDetail>(entity =>
            {
                entity.HasKey(e => e.OrderDetailItemReqId);

                entity.ToTable("MS_PurchOrderReqDetail");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyExecuted).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyExecutedBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PurOrderReq)
                    .WithMany(p => p.MsPurchOrderReqDetail)
                    .HasForeignKey(d => d.PurOrderReqId)
                    .HasConstraintName("FK_MS_PurchOrderReqDetail_Ms_PurchasOrderRequest");
            });

            modelBuilder.Entity<MsPurchasInvoice>(entity =>
            {
                entity.HasKey(e => e.PurInvId);

                entity.ToTable("MS_PurchasInvoice");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AdvancExpenseBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AdvancExpenseWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankTransfer).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxReference).HasMaxLength(200);

                entity.Property(e => e.EtaxRemarks).HasMaxLength(100);

                entity.Property(e => e.EtaxSentTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesTaxes1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesTaxes2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesTaxes3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.PurOrder)
                    .WithMany(p => p.MsPurchasInvoice)
                    .HasForeignKey(d => d.PurOrderId)
                    .HasConstraintName("FK_MS_PurchasInvoice_Ms_PurchasOrder");

                entity.HasOne(d => d.TaxesId1Navigation)
                    .WithMany(p => p.MsPurchasInvoice)
                    .HasForeignKey(d => d.TaxesId1)
                    .HasConstraintName("FK_MS_PurchasInvoice_MS_Taxes");
            });

            modelBuilder.Entity<MsPurchasInvoiceCurrencies>(entity =>
            {
                entity.HasKey(e => e.PurInvCurId);

                entity.ToTable("MS_PurchasInvoiceCurrencies");

                entity.Property(e => e.Count).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Total).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.MsPurchasInvoiceCurrencies)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_MS_PurchasInvoiceCurrencies_MS_PurchasInvoice");
            });

            modelBuilder.Entity<MsPurchasInvoiceMultiAccounts>(entity =>
            {
                entity.HasKey(e => e.PurMultiAccountId);

                entity.ToTable("MS_PurchasInvoiceMultiAccounts");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.MsPurchasInvoiceMultiAccounts)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_MS_PurchasInvoiceMultiAccounts_MS_PurchasInvoice");
            });

            modelBuilder.Entity<MsPurchasOrder>(entity =>
            {
                entity.HasKey(e => e.PurOrderId);

                entity.ToTable("Ms_PurchasOrder");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsPurchasOrderRequest>(entity =>
            {
                entity.HasKey(e => e.PurOrderReqId);

                entity.ToTable("Ms_PurchasOrderRequest");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsPurchaseInvoiceCostReceived>(entity =>
            {
                entity.HasKey(e => e.PurNoCostStockId);

                entity.ToTable("Ms_PurchaseInvoiceCostReceived");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.MsPurchaseInvoiceCostReceived)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_Ms_PurchaseInvoiceCostReceived_MS_PurchasInvoice");
            });

            modelBuilder.Entity<MsPurchaseInvoiceExpenses>(entity =>
            {
                entity.HasKey(e => e.PurExpenseId);

                entity.ToTable("MS_PurchaseInvoiceExpenses");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.TaxAfterRate1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxAfterRate2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxAfterRate3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxCurrency1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxCurrency2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxCurrency3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueCurrency).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.MsPurchaseInvoiceExpenses)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_MS_PurchaseInvoiceExpenses_MS_PurchasInvoice");
            });

            modelBuilder.Entity<MsPurchaseInvoiceItemCard>(entity =>
            {
                entity.HasKey(e => e.InvItemCardId);

                entity.ToTable("MS_PurchaseInvoiceItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CityIdfrom).HasColumnName("CityIDFrom");

                entity.Property(e => e.CityIdto).HasColumnName("CityIDTo");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsmedicinNotify).HasColumnName("ISMedicinNotify");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyRecievedBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyScalDiffrence).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyScalDiffrenceValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QualityDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QualityValueDisc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityRecieved).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsPurchaseInvoiceItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_PurchaseInvoiceItemCard_MS_ItemCard");

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.MsPurchaseInvoiceItemCard)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_MS_PurchaseInvoiceItemCard_MS_PurchasInvoice");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsPurchaseInvoiceItemCard)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_MS_PurchaseInvoiceItemCard_Ms_ItemUnit");
            });

            modelBuilder.Entity<MsRecPayDocJoin>(entity =>
            {
                entity.HasKey(e => e.InvRecPayId);

                entity.ToTable("Ms_RecPayDocJoin");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Paid).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsReceiptNote>(entity =>
            {
                entity.HasKey(e => e.RectId);

                entity.ToTable("Ms_ReceiptNote");

                entity.HasIndex(e => new { e.TrNo, e.BookId })
                    .HasName("StopDoubleTrNo")
                    .IsUnique();

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankAccNumber).HasMaxLength(50);

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.ChequeTran).HasColumnType("smalldatetime");

                entity.Property(e => e.ClientAccNo).HasMaxLength(100);

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DifferenceInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Equation).HasMaxLength(1000);

                entity.Property(e => e.InstallDates).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaidInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OtherSource).HasMaxLength(100);

                entity.Property(e => e.PaidDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ResourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StrCustm1)
                    .HasColumnName("strCustm1")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm2)
                    .HasColumnName("strCustm2")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalInvoices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.Value1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value1BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.MsReceiptNote)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_Ms_ReceiptNote_MS_BoxBank");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsReceiptNote)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_ReceiptNote_Ms_SalesInvoice");

                entity.HasOne(d => d.RetPur)
                    .WithMany(p => p.MsReceiptNote)
                    .HasForeignKey(d => d.RetPurId)
                    .HasConstraintName("FK_Ms_ReceiptNote_MS_ReturnPurchase");
            });

            modelBuilder.Entity<MsReceiptNoteCurrencies>(entity =>
            {
                entity.HasKey(e => e.RecCurId);

                entity.ToTable("Ms_ReceiptNoteCurrencies");

                entity.Property(e => e.Count).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Total).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Rect)
                    .WithMany(p => p.MsReceiptNoteCurrencies)
                    .HasForeignKey(d => d.RectId)
                    .HasConstraintName("FK_Ms_ReceiptNoteCurrencies_Ms_ReceiptNote");
            });

            modelBuilder.Entity<MsReturnPurchase>(entity =>
            {
                entity.HasKey(e => e.RetPurchId);

                entity.ToTable("MS_ReturnPurchase");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankTransfer).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxReference).HasMaxLength(200);

                entity.Property(e => e.EtaxRemarks).HasMaxLength(100);

                entity.Property(e => e.EtaxSentTime).HasColumnType("smalldatetime");

                entity.Property(e => e.InvoiceType).HasComment("0 Cash ; 1 Due ;");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RetDescA).HasMaxLength(100);

                entity.Property(e => e.RetDescE).HasMaxLength(100);

                entity.Property(e => e.RetTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0  Invoice ; 1 customer");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsReturnPurchaseCurrencies>(entity =>
            {
                entity.HasKey(e => e.RetPurchCurId);

                entity.ToTable("MS_ReturnPurchaseCurrencies");

                entity.Property(e => e.Count).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Total).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.RetPurch)
                    .WithMany(p => p.MsReturnPurchaseCurrencies)
                    .HasForeignKey(d => d.RetPurchId)
                    .HasConstraintName("FK_MS_ReturnPurchaseCurrencies_MS_ReturnPurchase");
            });

            modelBuilder.Entity<MsReturnPurchaseExpenses>(entity =>
            {
                entity.HasKey(e => e.RetPurchExpenseId);

                entity.ToTable("Ms_ReturnPurchaseExpenses");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ValueAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueCurrency).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.RetPurch)
                    .WithMany(p => p.MsReturnPurchaseExpenses)
                    .HasForeignKey(d => d.RetPurchId)
                    .HasConstraintName("FK_Ms_ReturnPurchaseExpenses_MS_ReturnPurchase");
            });

            modelBuilder.Entity<MsReturnPurchaseItem>(entity =>
            {
                entity.HasKey(e => e.RetPurchItemCardId);

                entity.ToTable("MS_ReturnPurchaseItem");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyRecievedBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityIn).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityReceived).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsReturnPurchaseItem)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_ReturnPurchaseItem_MS_ItemCard");

                entity.HasOne(d => d.RetPurch)
                    .WithMany(p => p.MsReturnPurchaseItem)
                    .HasForeignKey(d => d.RetPurchId)
                    .HasConstraintName("FK_MS_ReturnPurchaseItem_MS_ReturnPurchase");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsReturnPurchaseItem)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_MS_ReturnPurchaseItem_Ms_ItemUnit");
            });

            modelBuilder.Entity<MsReturnPurchaseMultiAccounts>(entity =>
            {
                entity.HasKey(e => e.RetPurMultiAccountId);

                entity.ToTable("MS_ReturnPurchaseMultiAccounts");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.RetPurch)
                    .WithMany(p => p.MsReturnPurchaseMultiAccounts)
                    .HasForeignKey(d => d.RetPurchId)
                    .HasConstraintName("FK_MS_ReturnPurchaseMultiAccounts_MS_ReturnPurchase");
            });

            modelBuilder.Entity<MsReturnSales>(entity =>
            {
                entity.HasKey(e => e.RetSaleId);

                entity.ToTable("MS_ReturnSales");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankTransfer).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commision)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxReference).HasMaxLength(200);

                entity.Property(e => e.EtaxRemarks).HasMaxLength(100);

                entity.Property(e => e.EtaxSentTime).HasColumnType("smalldatetime");

                entity.Property(e => e.InvoiceType).HasComment("0 Cash ; 1 Due ; Customer Account");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RetDescA).HasMaxLength(100);

                entity.Property(e => e.RetDescE).HasMaxLength(100);

                entity.Property(e => e.RetTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnType).HasComment("0  Invoice ; 1  Customer");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsReturnSalesCurrencies>(entity =>
            {
                entity.HasKey(e => e.RetSaleCurId);

                entity.ToTable("MS_ReturnSalesCurrencies");

                entity.Property(e => e.Count).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Total).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.RetSale)
                    .WithMany(p => p.MsReturnSalesCurrencies)
                    .HasForeignKey(d => d.RetSaleId)
                    .HasConstraintName("FK_MS_ReturnSalesCurrencies_MS_ReturnSales");
            });

            modelBuilder.Entity<MsReturnSalesExpenses>(entity =>
            {
                entity.HasKey(e => e.RetSaleExpenseId);

                entity.ToTable("Ms_ReturnSalesExpenses");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.ValueAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueCurrency).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.RetSale)
                    .WithMany(p => p.MsReturnSalesExpenses)
                    .HasForeignKey(d => d.RetSaleId)
                    .HasConstraintName("FK_Ms_ReturnSalesExpenses_MS_ReturnSales");
            });

            modelBuilder.Entity<MsReturnSalesItemCard>(entity =>
            {
                entity.HasKey(e => e.RetItemCardId);

                entity.ToTable("MS_ReturnSalesItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.JobProductId).HasColumnName("jobProductId");

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OfferPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityIn).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsReturnSalesItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_ReturnSalesItemCard_MS_ItemCard");

                entity.HasOne(d => d.RetSale)
                    .WithMany(p => p.MsReturnSalesItemCard)
                    .HasForeignKey(d => d.RetSaleId)
                    .HasConstraintName("FK_MS_ReturnSalesItemCard_MS_ReturnSales");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsReturnSalesItemCard)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_MS_ReturnSalesItemCard_Ms_ItemUnit");
            });

            modelBuilder.Entity<MsReturnSalesMultiAccounts>(entity =>
            {
                entity.HasKey(e => e.RetSaleMultiAccountId);

                entity.ToTable("MS_ReturnSalesMultiAccounts");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.RetSale)
                    .WithMany(p => p.MsReturnSalesMultiAccounts)
                    .HasForeignKey(d => d.RetSaleId)
                    .HasConstraintName("FK_MS_ReturnSalesMultiAccounts_MS_ReturnSales");
            });

            modelBuilder.Entity<MsSalesInvJobOrderJoin>(entity =>
            {
                entity.HasKey(e => e.SalesInvJobOrderId);

                entity.ToTable("Ms_SalesInvJobOrderJoin");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvJobOrderJoin)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvJobOrderJoin_Ms_SalesInvoice");

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.MsSalesInvJobOrderJoin)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Ms_SalesInvJobOrderJoin_Prod_JobOrder");
            });

            modelBuilder.Entity<MsSalesInvVehiclJobOrderJoin>(entity =>
            {
                entity.HasKey(e => e.SalesVehiclJobOrderId);

                entity.ToTable("Ms_SalesInvVehiclJobOrderJoin");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvVehiclJobOrderJoin)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvVehiclJobOrderJoin_Ms_SalesInvoice");

                entity.HasOne(d => d.Vjorder)
                    .WithMany(p => p.MsSalesInvVehiclJobOrderJoin)
                    .HasForeignKey(d => d.VjorderId)
                    .HasConstraintName("FK_Ms_SalesInvVehiclJobOrderJoin_Sr_VehicleJobOrder");
            });

            modelBuilder.Entity<MsSalesInvoice>(entity =>
            {
                entity.HasKey(e => e.InvId);

                entity.ToTable("Ms_SalesInvoice");

                entity.HasIndex(e => e.StoreId)
                    .HasName("StoreIdIndex");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankTransfer).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxReference).HasMaxLength(200);

                entity.Property(e => e.EtaxRemarks).HasMaxLength(100);

                entity.Property(e => e.EtaxSentTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCommision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodDatafield).HasMaxLength(250);

                entity.Property(e => e.PayMethodPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJobOrders).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyCar).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyNoVehicl).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyPump).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.SalesOffer)
                    .WithMany(p => p.MsSalesInvoice)
                    .HasForeignKey(d => d.SalesOfferId)
                    .HasConstraintName("FK_Ms_SalesInvoice_Ms_SalesOffer");
            });

            modelBuilder.Entity<MsReturnSalesReq>(entity =>
            {
                entity.HasKey(e => e.ReqsalesId);

                entity.ToTable("Ms_ReturnSalesReq");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankTransfer).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EtaxReference).HasMaxLength(200);

                entity.Property(e => e.EtaxRemarks).HasMaxLength(100);

                entity.Property(e => e.EtaxSentTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCommision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodDatafield).HasMaxLength(250);

                entity.Property(e => e.PayMethodDatafield2).HasMaxLength(250);

                entity.Property(e => e.PayMethodDatafield3).HasMaxLength(250);

                entity.Property(e => e.PayMethodPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemsProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJobOrders).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyCar).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyNoVehicl).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQtyPump).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });



            modelBuilder.Entity<MsReturnSalesReqItemCard>(entity =>
            {
                entity.HasKey(e => e.SalesReqItemCardId);

                entity.ToTable("Ms_ReturnSalesReqItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CityIdfrom).HasColumnName("CityIDFrom");

                entity.Property(e => e.CityIdto).HasColumnName("CityIDTo");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.JobProductId).HasColumnName("jobProductId");

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OfferPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");
            });




            modelBuilder.Entity<MsSalesInvoiceCostDeliver>(entity =>
            {
                entity.HasKey(e => e.SaleNoCostDelId);

                entity.ToTable("Ms_SalesInvoiceCostDeliver");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvoiceCostDeliver)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvoiceCostDeliver_Ms_SalesInvoice");
            });

            modelBuilder.Entity<MsSalesInvoiceCurrencies>(entity =>
            {
                entity.HasKey(e => e.InvCurId);

                entity.ToTable("Ms_SalesInvoiceCurrencies");

                entity.Property(e => e.Count).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Total).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvoiceCurrencies)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvoiceCurrencies_Ms_SalesInvoice");
            });

            modelBuilder.Entity<MsSalesInvoiceExpenses>(entity =>
            {
                entity.HasKey(e => e.SalesInvExpenseId);

                entity.ToTable("Ms_SalesInvoiceExpenses");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.ValueAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueCurrency).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvoiceExpenses)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvoiceExpenses_Ms_SalesInvoice");
            });

            modelBuilder.Entity<MsSalesInvoiceItemCard>(entity =>
            {
                entity.HasKey(e => e.InvItemCardId)
                    .HasName("PK_InvoiceItemCard");

                entity.ToTable("Ms_SalesInvoiceItemCard");

                entity.HasIndex(e => e.InvId)
                    .HasName("Inv");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CityIdfrom).HasColumnName("CityIDFrom");

                entity.Property(e => e.CityIdto).HasColumnName("CityIDTo");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommisionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DriverName).HasMaxLength(100);

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.JobProductId).HasColumnName("jobProductId");

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OfferPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.HasOne(d => d.Inv)
                .WithMany(p => p.MsSalesInvoiceItemCard)
                .HasForeignKey(d => d.InvId)
                .HasConstraintName("FK_InvoiceItemCard_Ms_SalesInvoice");


                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsSalesInvoiceItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_InvoiceItemCard_MS_ItemCard");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsSalesInvoiceItemCard)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_Ms_SalesInvoiceItemCard_Ms_ItemUnit");
            });




            modelBuilder.Entity<MsSalesInvoiceItemCardDeleted>(entity =>
            {
                entity.HasKey(e => e.DelInvItemcardId);

                entity.ToTable("MS_SalesInvoiceItemCard_Deleted");

                entity.Property(e => e.AddOrEditMode).HasComment("1 Add, 0 Edit");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedOrChanged).HasComment("1Deleted,0 changed");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LotNumberExpiry).HasMaxLength(20);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProductionDate).HasColumnType("smalldatetime");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ReturnQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsSalesInvoiceMultiAccounts>(entity =>
            {
                entity.HasKey(e => e.SalesMultiAccountId);

                entity.ToTable("Ms_SalesInvoiceMultiAccounts");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvoiceMultiAccounts)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvoiceMultiAccounts_Ms_SalesInvoice");
            });

            modelBuilder.Entity<MsSalesInvoiceQualityDeliveryDocs>(entity =>
            {
                entity.HasKey(e => e.QualitySaleDelId);

                entity.ToTable("Ms_SalesInvoiceQualityDeliveryDocs");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvoiceQualityDeliveryDocs)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvoiceQualityDeliveryDocs_Ms_SalesInvoice");
            });

            modelBuilder.Entity<MsSalesInvoiceQualityMissedItems>(entity =>
            {
                entity.HasKey(e => e.QualitySaleDelMissedId);

                entity.ToTable("Ms_SalesInvoiceQualityMissedItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.EmpId)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.MsSalesInvoiceQualityMissedItems)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Ms_SalesInvoiceQualityMissedItems_Ms_SalesInvoice");
            });

            modelBuilder.Entity<MsSalesItemsOffers>(entity =>
            {
                entity.HasKey(e => e.PromoOfferId)
                    .HasName("PK_Ms_SalesItemsOffers_1");

                entity.ToTable("Ms_SalesItemsOffers");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsSalesItemsOffersDetails>(entity =>
            {
                entity.HasKey(e => e.ItemOfferId)
                    .HasName("PK_Ms_SalesItemsOffers");

                entity.ToTable("Ms_SalesItemsOffersDetails");

                entity.Property(e => e.BaseDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BaseItemUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BaseQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BaseQtyBeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscForTotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OfferedItemUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OfferedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OfferedQtyBeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PromoOffer)
                    .WithMany(p => p.MsSalesItemsOffersDetails)
                    .HasForeignKey(d => d.PromoOfferId)
                    .HasConstraintName("FK_Ms_SalesItemsOffersDetails_Ms_SalesItemsOffers");
            });

            modelBuilder.Entity<MsSalesOffer>(entity =>
            {
                entity.HasKey(e => e.SalesOfferId);

                entity.ToTable("Ms_SalesOffer");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsSalesOfferItemCard>(entity =>
            {
                entity.HasKey(e => e.SalesOffertemCardId)
                    .HasName("PK_Table_1");

                entity.ToTable("Ms_SalesOfferItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecuteQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecuteQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsSalesOfferItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Ms_SalesOfferItemCard_MS_ItemCard");

                entity.HasOne(d => d.SalesOffer)
                    .WithMany(p => p.MsSalesOfferItemCard)
                    .HasForeignKey(d => d.SalesOfferId)
                    .HasConstraintName("FK_Ms_SalesOfferItemCard_Ms_SalesOffer");
            });

            modelBuilder.Entity<MsSalesOfferItemRequest>(entity =>
            {
                entity.HasKey(e => e.SalesOffertemCardReqId);

                entity.ToTable("Ms_SalesOfferItemRequest");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecuteQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecuteQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.SalesOfferReq)
                    .WithMany(p => p.MsSalesOfferItemRequest)
                    .HasForeignKey(d => d.SalesOfferReqId)
                    .HasConstraintName("FK_Ms_SalesOfferItemRequest_Ms_SalesOfferRequest");
            });

            modelBuilder.Entity<MsSalesOfferRequest>(entity =>
            {
                entity.HasKey(e => e.SalesOfferReqId);

                entity.ToTable("Ms_SalesOfferRequest");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate)
                    .HasColumnType("numeric(38, 10)")
                    .HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsSalesOrder>(entity =>
            {
                entity.HasKey(e => e.SalesOrderId);

                entity.ToTable("Ms_SalesOrder");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InvQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvoiceType).HasComment("0  Cash ; 1  Due ");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsSalesOrderItemCard>(entity =>
            {
                entity.HasKey(e => e.SalesOrdertemCardId);

                entity.ToTable("Ms_SalesOrderItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DisAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisAmountAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecuteQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecuteQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MainDiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax1Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax2Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax3Percent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxableValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.MsSalesOrderItemCard)
                    .HasForeignKey(d => d.SalesOrderId)
                    .HasConstraintName("FK_Ms_SalesOrderItemCard_Ms_SalesOrder");
            });

            modelBuilder.Entity<MsSettings>(entity =>
            {
                entity.HasKey(e => e.SettingId);

                entity.ToTable("MS_Settings");

                entity.Property(e => e.AskForAttachMove).HasComment("1 always copy, 2 always move,3 never copy or move,4 ask to move");

                entity.Property(e => e.AttachmentPath).HasMaxLength(2500);

                entity.Property(e => e.ChekAlert).HasColumnName("chekAlert");

                entity.Property(e => e.CustSeparator)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.EtaxActivityCode)
                    .HasColumnName("ETaxActivityCode")
                    .HasMaxLength(50);

                entity.Property(e => e.EtaxBranchId)
                    .HasColumnName("ETaxBranchId")
                    .HasMaxLength(100);

                entity.Property(e => e.EtaxClientId)
                    .HasColumnName("ETaxClientId")
                    .HasMaxLength(200);

                entity.Property(e => e.EtaxClientSecret)
                    .HasColumnName("ETaxClientSecret")
                    .HasMaxLength(200);

                entity.Property(e => e.EtaxCurrency)
                    .HasColumnName("ETaxCurrency")
                    .HasMaxLength(20);

                entity.Property(e => e.EtaxDocVersion).HasMaxLength(20);

                entity.Property(e => e.EtaxInvoiceStatus)
                    .HasColumnName("ETaxInvoiceStatus")
                    .HasMaxLength(20);

                entity.Property(e => e.EtaxIssuerId)
                    .HasColumnName("ETaxIssuerId")
                    .HasMaxLength(50);

                entity.Property(e => e.EtaxIssuerName)
                    .HasColumnName("ETaxIssuerName")
                    .HasMaxLength(200);

                entity.Property(e => e.EtaxPortalUrl)
                    .HasColumnName("ETaxPortalUrl")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxPortalUrlLive)
                    .HasColumnName("ETaxPortalUrlLive")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxPortalUrlTest)
                    .HasColumnName("ETaxPortalUrlTest")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxSubmitUrl)
                    .HasColumnName("ETaxSubmitUrl")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxSubmitUrlLive)
                    .HasColumnName("ETaxSubmitUrlLive")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxSubmitUrlTest)
                    .HasColumnName("ETaxSubmitUrlTest")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxTax).HasMaxLength(20);

                entity.Property(e => e.EtaxTokenPin)
                    .HasColumnName("ETaxTokenPin")
                    .HasMaxLength(50);

                entity.Property(e => e.EtaxTokenUrl)
                    .HasColumnName("ETaxTokenUrl")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxTokenUrlLive)
                    .HasColumnName("ETaxTokenUrlLive")
                    .HasMaxLength(300);

                entity.Property(e => e.EtaxTokenUrlTest)
                    .HasColumnName("ETaxTokenUrlTest")
                    .HasMaxLength(300);

                entity.Property(e => e.ItemCostAffectDoc).HasMaxLength(50);

                entity.Property(e => e.ItemSeparator)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.PurchReturnItemCost).HasMaxLength(50);

                entity.Property(e => e.SalesReturnItemCost).HasMaxLength(50);

                entity.Property(e => e.ScaleAppPath).HasMaxLength(2500);

                entity.Property(e => e.ScaleDataPath).HasMaxLength(2500);

                entity.Property(e => e.SysDateFormat).HasMaxLength(10);

                entity.Property(e => e.VendSeparator)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MsStockReceiptItemCard>(entity =>
            {
                entity.HasKey(e => e.StockRecItemCardId);

                entity.ToTable("MS_StockReceiptItemCard");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsBonus).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsmedicinNotify).HasColumnName("ISMedicinNotify");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.JobGoStockId).HasColumnName("jobGoStockId");

                entity.Property(e => e.JobProductId).HasColumnName("jobProductId");

                entity.Property(e => e.JobScrapId).HasColumnName("jobScrapId");

                entity.Property(e => e.Kirat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyScalDiffrence).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyScalDiffrenceValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QualityDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QualityValueDisc).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityIn).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ServicePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsStockReceiptItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_StockReceiptItemCard_MS_ItemCard");

                entity.HasOne(d => d.StockRec)
                    .WithMany(p => p.MsStockReceiptItemCard)
                    .HasForeignKey(d => d.StockRecId)
                    .HasConstraintName("FK_MS_StockReceiptItemCard_MS_StockRecript");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsStockReceiptItemCard)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_MS_StockReceiptItemCard_Ms_ItemUnit");
            });

            modelBuilder.Entity<MsStockRecript>(entity =>
            {
                entity.HasKey(e => e.StockRecId);

                entity.ToTable("MS_StockRecript");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsClosed).HasComment("True Closed ;  False  Not Closed");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PurchaseInvQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReceiptrQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Status)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 Invoice ; 1 Return ; 2  Vendor ");

                entity.Property(e => e.StockRecDescA).HasMaxLength(100);

                entity.Property(e => e.StockRecDescE).HasMaxLength(100);

                entity.Property(e => e.StrCustm4)
                    .HasColumnName("strCustm4")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsStockRecriptExpenses>(entity =>
            {
                entity.HasKey(e => e.StockRecExpenseId);

                entity.ToTable("MS_StockRecriptExpenses");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.ValueAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueCurrency).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.StockRec)
                    .WithMany(p => p.MsStockRecriptExpenses)
                    .HasForeignKey(d => d.StockRecId)
                    .HasConstraintName("FK_MS_StockRecriptExpenses_MS_StockRecript");
            });

            modelBuilder.Entity<MsStockRecriptMultiAccounts>(entity =>
            {
                entity.HasKey(e => e.StockRecMultiAccountId);

                entity.ToTable("MS_StockRecriptMultiAccounts");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RectSourceBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.StockRec)
                    .WithMany(p => p.MsStockRecriptMultiAccounts)
                    .HasForeignKey(d => d.StockRecId)
                    .HasConstraintName("FK_MS_StockRecriptMultiAccounts_MS_StockRecript");
            });

            modelBuilder.Entity<MsStockTranItemCard>(entity =>
            {
                entity.HasKey(e => e.TrItenCardId);

                entity.ToTable("MS_StockTranItemCard");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.MsStockTranItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_MS_StockTranItemCard_MS_ItemCard");

                entity.HasOne(d => d.Tran)
                    .WithMany(p => p.MsStockTranItemCard)
                    .HasForeignKey(d => d.TranId)
                    .HasConstraintName("FK_MS_StockTranItemCard_MS_StockTransferNote");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MsStockTranItemCard)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_MS_StockTranItemCard_Ms_ItemUnit");
            });

            modelBuilder.Entity<MsStockTranItemCardReq>(entity =>
            {
                entity.HasKey(e => e.TranReqItemCardId);

                entity.ToTable("Ms_StockTranItemCardReq");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenseShareUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpensAfterCurrUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseAfterCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterExpenseUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.TranReq)
                    .WithMany(p => p.MsStockTranItemCardReq)
                    .HasForeignKey(d => d.TranReqId)
                    .HasConstraintName("FK_Ms_StockTranItemCardReq_Ms_StockTransferNoteRequest");
            });

            modelBuilder.Entity<MsStockTransferNote>(entity =>
            {
                entity.HasKey(e => e.TranId);

                entity.ToTable("MS_StockTransferNote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.StockTranDescA).HasMaxLength(100);

                entity.Property(e => e.StockTranDescE).HasMaxLength(100);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsStockTransferNoteRequest>(entity =>
            {
                entity.HasKey(e => e.TranReqId);

                entity.ToTable("Ms_StockTransferNoteRequest");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.StockTranDescA).HasMaxLength(100);

                entity.Property(e => e.StockTranDescE).HasMaxLength(100);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsStores>(entity =>
            {
                entity.HasKey(e => e.StoreId);

                entity.ToTable("MS_Stores");

                entity.Property(e => e.BranchLogo).HasColumnType("image");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CommercialName).HasMaxLength(500);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EtaxCode).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.PrintFooter).HasMaxLength(500);

                entity.Property(e => e.PrintFooterFont).HasMaxLength(50);

                entity.Property(e => e.PrintFooterFontColor).HasMaxLength(50);

                entity.Property(e => e.PrintHeader).HasMaxLength(500);

                entity.Property(e => e.PrintHeaderFont).HasMaxLength(50);

                entity.Property(e => e.PrintHeaderFontColor).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.StoreCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.StoreKeeper).HasMaxLength(50);

                entity.Property(e => e.StorePosition).HasMaxLength(100);

                entity.Property(e => e.StoreType).HasComment("true MainBranch , False Sub Branch");

                entity.Property(e => e.TaxReg).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.HasOne(d => d.Box)
                    .WithMany(p => p.MsStores)
                    .HasForeignKey(d => d.BoxId)
                    .HasConstraintName("FK_MS_Stores_MS_BoxBank");
            });

            modelBuilder.Entity<MsTaxes>(entity =>
            {
                entity.HasKey(e => e.TaxesId);

                entity.ToTable("MS_Taxes");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EtaxCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxCode).HasMaxLength(50);

                entity.Property(e => e.TaxNameA).HasMaxLength(100);

                entity.Property(e => e.TaxNameE).HasMaxLength(100);

                entity.Property(e => e.TaxRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxStyle).HasComment("0 Percent , 1 value , 2 Without");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<MsTerms>(entity =>
            {
                entity.HasKey(e => e.TermId);

                entity.ToTable("Ms_Terms");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ReportPath).HasMaxLength(500);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsTermsCostCenter>(entity =>
            {
                entity.HasKey(e => e.TermCostCenterId);

                entity.ToTable("Ms_TermsCostCenter");

                entity.Property(e => e.ValuAddCostCenter1).HasMaxLength(50);

                entity.Property(e => e.ValuAddCostCenter2).HasMaxLength(50);

                entity.Property(e => e.ValuAddCostCenter3).HasMaxLength(50);

                entity.Property(e => e.ValuAddCostCenter4).HasMaxLength(50);

                entity.Property(e => e.ValuAddCostCenter5).HasMaxLength(50);

                entity.Property(e => e.ValuCostCenterCash).HasMaxLength(50);

                entity.Property(e => e.ValuCostCenterCredit).HasMaxLength(50);

                entity.Property(e => e.ValuCostCenterDebit).HasMaxLength(50);

                entity.Property(e => e.ValuCostCenterDisc).HasMaxLength(50);

                entity.Property(e => e.ValuCostCenterTax).HasMaxLength(50);

                entity.HasOne(d => d.Term)
                    .WithMany(p => p.MsTermsCostCenter)
                    .HasForeignKey(d => d.TermId)
                    .HasConstraintName("FK_Ms_TermsCostCenter_Ms_Terms");
            });

            modelBuilder.Entity<MsTermsDetails>(entity =>
            {
                entity.HasKey(e => e.TermDetailId);

                entity.ToTable("Ms_TermsDetails");

                entity.Property(e => e.ValuAccountCash).HasMaxLength(50);

                entity.Property(e => e.ValuAccountCredit).HasMaxLength(50);

                entity.Property(e => e.ValuAccountDebit).HasMaxLength(50);

                entity.Property(e => e.ValuAccountDisc).HasMaxLength(50);

                entity.Property(e => e.ValuAccountTax).HasMaxLength(50);

                entity.Property(e => e.ValuAddAccount1).HasMaxLength(50);

                entity.Property(e => e.ValuAddAccount2).HasMaxLength(50);

                entity.Property(e => e.ValuAddAccount3).HasMaxLength(50);

                entity.Property(e => e.ValuAddAccount4).HasMaxLength(50);

                entity.Property(e => e.ValuAddAccount5).HasMaxLength(50);

                entity.HasOne(d => d.Term)
                    .WithMany(p => p.MsTermsDetails)
                    .HasForeignKey(d => d.TermId)
                    .HasConstraintName("FK_Ms_TermsDetails_Ms_Terms");
            });

            modelBuilder.Entity<MsUpdateReplication>(entity =>
            {
                entity.HasKey(e => e.UpdatId);

                entity.ToTable("MS_UpdateReplication");

                entity.Property(e => e.UpdatId).HasColumnName("UpdatID");

                entity.Property(e => e.LastUpDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastUpdate2).HasColumnType("datetime");

                entity.Property(e => e.LastUpdate3).HasMaxLength(100);

                entity.Property(e => e.TableDef).HasMaxLength(100);
            });

            modelBuilder.Entity<MsUserAuthentications>(entity =>
            {
                entity.HasKey(e => e.AuthId);

                entity.ToTable("MS_UserAuthentications");

                entity.Property(e => e.AuthCode).HasMaxLength(50);

                entity.Property(e => e.AuthDesc).HasMaxLength(100);

                entity.Property(e => e.AuthName).HasMaxLength(100);

                entity.Property(e => e.AuthenticatedBy).HasComment("the Id of the user who athurized to give this authentication");
            });

            modelBuilder.Entity<MsVendImgs>(entity =>
            {
                entity.HasKey(e => e.VendImgId);

                entity.ToTable("Ms_VendImgs");

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.ImgDesc1).HasMaxLength(250);

                entity.Property(e => e.ImgDesc2).HasMaxLength(250);

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.MsVendImgs)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_Ms_VendImgs_MS_Vendor");
            });

            modelBuilder.Entity<MsVendor>(entity =>
            {
                entity.HasKey(e => e.VendorId);

                entity.ToTable("MS_Vendor");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.Address1).HasMaxLength(100);

                entity.Property(e => e.Address2).HasMaxLength(100);

                entity.Property(e => e.Address3).HasMaxLength(100);

                entity.Property(e => e.Company).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CreditLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DtReg)
                    .HasColumnName("dtReg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DtRegRenew)
                    .HasColumnName("dtRegRenew")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.EtaxCustType)
                    .HasMaxLength(50)
                    .HasComment("Business  tax Reg Required,Person   NationalID not required,Foreigner  Name and ID  required");

                entity.Property(e => e.Evaluation).HasColumnType("numeric(10, 2)");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.HomePage).HasMaxLength(300);

                entity.Property(e => e.LastUpdateTime)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.PrePaidPercent).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxExemptionNo).HasMaxLength(50);

                entity.Property(e => e.TaxRefNo).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VendId)
                    .HasColumnName("VendID")
                    .HasMaxLength(100);

                entity.Property(e => e.VendJob).HasMaxLength(100);

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);

                entity.Property(e => e.VendorDescE).HasMaxLength(100);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.MsVendor)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_MS_Vendor_MS_Currency");

                entity.HasOne(d => d.VendorCat)
                    .WithMany(p => p.MsVendor)
                    .HasForeignKey(d => d.VendorCatId)
                    .HasConstraintName("FK_MS_Vendor_MS_VendorCategory");

                entity.HasOne(d => d.VendorType)
                    .WithMany(p => p.MsVendor)
                    .HasForeignKey(d => d.VendorTypeId)
                    .HasConstraintName("FK_MS_Vendor_Ms_VendorTypes");
            });

            modelBuilder.Entity<MsVendorBranches>(entity =>
            {
                entity.HasKey(e => e.VendBranchId);

                entity.ToTable("Ms_VendorBranches");

                entity.Property(e => e.Address).HasMaxLength(250);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.VendBranchCode).HasMaxLength(50);

                entity.Property(e => e.VendBranchName1).HasMaxLength(100);

                entity.Property(e => e.VendBranchName2).HasMaxLength(100);

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.MsVendorBranches)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_Ms_VendorBranches_MS_Vendor");
            });

            modelBuilder.Entity<MsVendorCategory>(entity =>
            {
                entity.HasKey(e => e.VendorCatId);

                entity.ToTable("MS_VendorCategory");

                entity.Property(e => e.CatCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.CatDescE).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<MsVendorContacts>(entity =>
            {
                entity.HasKey(e => e.VendContactId);

                entity.ToTable("Ms_VendorContacts");

                entity.Property(e => e.Bank1).HasMaxLength(100);

                entity.Property(e => e.Bank2).HasMaxLength(50);

                entity.Property(e => e.Bank3).HasMaxLength(50);

                entity.Property(e => e.BankAccNo1).HasMaxLength(50);

                entity.Property(e => e.BankAccNo2).HasMaxLength(50);

                entity.Property(e => e.BankAccNo3).HasMaxLength(50);

                entity.Property(e => e.ContactAddress1).HasMaxLength(100);

                entity.Property(e => e.ContactAddress2).HasMaxLength(100);

                entity.Property(e => e.ContactAddress3).HasMaxLength(100);

                entity.Property(e => e.ContactCode).HasMaxLength(50);

                entity.Property(e => e.ContactEmail1).HasMaxLength(100);

                entity.Property(e => e.ContactEmail2).HasMaxLength(100);

                entity.Property(e => e.ContactEmail3).HasMaxLength(100);

                entity.Property(e => e.ContactName1).HasMaxLength(100);

                entity.Property(e => e.ContactName2).HasMaxLength(100);

                entity.Property(e => e.ContactPhone1).HasMaxLength(30);

                entity.Property(e => e.ContactPhone2).HasMaxLength(30);

                entity.Property(e => e.ContactPhone3).HasMaxLength(30);

                entity.Property(e => e.ContactPhone4).HasMaxLength(30);

                entity.Property(e => e.ContactPhone5).HasMaxLength(30);

                entity.Property(e => e.Idno)
                    .HasColumnName("IDNo")
                    .HasMaxLength(20);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.Remark1).HasMaxLength(200);

                entity.Property(e => e.Remark2).HasMaxLength(200);

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.MsVendorContacts)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_Ms_VendorContacts_MS_Vendor");
            });

            modelBuilder.Entity<MsVendorTypes>(entity =>
            {
                entity.HasKey(e => e.VendorTypeId);

                entity.ToTable("Ms_VendorTypes");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VendorTypeCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorTypeDescA).HasMaxLength(100);

                entity.Property(e => e.VendorTypeDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<MsVendorUsers>(entity =>
            {
                entity.HasKey(e => e.VendUserId);

                entity.ToTable("Ms_VendorUsers");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MsVendorUsers)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Ms_VendorUsers_G_Users");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.MsVendorUsers)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_Ms_VendorUsers_MS_Vendor");
            });

            modelBuilder.Entity<MsVwAssetExcelExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_Vw_AssetExcelExport");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.AssetCode).HasMaxLength(50);

                entity.Property(e => e.CatCode).HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Tel).HasMaxLength(20);
            });

            modelBuilder.Entity<MsVwBankTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_VW_BankTran");

                entity.Property(e => e.BoxFrom).HasMaxLength(50);

                entity.Property(e => e.BoxTo).HasMaxLength(50);

                entity.Property(e => e.Desca)
                    .HasColumnName("DESCA")
                    .HasMaxLength(100);

                entity.Property(e => e.Desce)
                    .HasColumnName("DESCE")
                    .HasMaxLength(100);

                entity.Property(e => e.Valu)
                    .HasColumnName("valu")
                    .HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsVwCustomerExcelExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_Vw_CustomerExcelExport");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.CatCode).HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.CreditLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(20);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.Tel).HasMaxLength(20);
            });

            modelBuilder.Entity<MsVwItemBatchStores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_VW_ItemBatchStores");

                entity.Property(e => e.StoreCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<MsVwItemBatchesQtyInStores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_VW_ItemBatchesQtyInStores");

                entity.Property(e => e.ItemBatchCode).HasMaxLength(250);

                entity.Property(e => e.ItemBatchName1).HasMaxLength(500);

                entity.Property(e => e.PartCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartDescA).HasMaxLength(100);

                entity.Property(e => e.QtyInNotebook).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPartiation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StoreCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<MsVwItemCardExcelExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_Vw_ItemCardExcelExport");

                entity.Property(e => e.BarCode1).HasMaxLength(60);

                entity.Property(e => e.BarCode10).HasMaxLength(60);

                entity.Property(e => e.BarCode11).HasMaxLength(60);

                entity.Property(e => e.BarCode12).HasMaxLength(60);

                entity.Property(e => e.BarCode13).HasMaxLength(60);

                entity.Property(e => e.BarCode14).HasMaxLength(60);

                entity.Property(e => e.BarCode15).HasMaxLength(60);

                entity.Property(e => e.BarCode2).HasMaxLength(60);

                entity.Property(e => e.BarCode3).HasMaxLength(60);

                entity.Property(e => e.BarCode4).HasMaxLength(60);

                entity.Property(e => e.BarCode5).HasMaxLength(60);

                entity.Property(e => e.BarCode6).HasMaxLength(60);

                entity.Property(e => e.BarCode7).HasMaxLength(60);

                entity.Property(e => e.BarCode8).HasMaxLength(60);

                entity.Property(e => e.BarCode9).HasMaxLength(60);

                entity.Property(e => e.BeforLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ItemCatCode).HasMaxLength(50);

                entity.Property(e => e.ItemCatDescA).HasMaxLength(100);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(200);

                entity.Property(e => e.ItemDescE).HasMaxLength(200);

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastSalePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LotNumberExpiry).HasMaxLength(50);

                entity.Property(e => e.ManualPurchasePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MaxTversion).HasColumnName("MaxTVersion");

                entity.Property(e => e.PartCode).HasMaxLength(50);

                entity.Property(e => e.PartDescA).HasMaxLength(100);

                entity.Property(e => e.Price1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurNotReceived).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchasePrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QtyInBox).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInNotebook).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInWithoutCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutWithoutBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPartiation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.RequestedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReservedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SaleNotDelivered).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.Ttype)
                    .HasColumnName("TType")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tversion).HasColumnName("TVersion");

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnittRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsVwItemStores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_VW_ItemStores");

                entity.Property(e => e.StoreCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<MsVwLetterDocSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_Vw_letterDocSearch");

                entity.Property(e => e.BodySn)
                    .HasColumnName("BodySN")
                    .HasMaxLength(200);

                entity.Property(e => e.BuyerName).HasMaxLength(100);

                entity.Property(e => e.CityName).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeliverTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LetterTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MachineName).HasMaxLength(100);

                entity.Property(e => e.MotorSearialId).HasColumnName("MotorSearialID");

                entity.Property(e => e.MotorSn)
                    .HasColumnName("MotorSN")
                    .HasMaxLength(200);

                entity.Property(e => e.MotorSntrNo).HasColumnName("MotorSNTrNo");

                entity.Property(e => e.Size).HasMaxLength(50);
            });

            modelBuilder.Entity<MsVwLetterSearchresult>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_Vw_letterSearchresult");

                entity.Property(e => e.BodySn)
                    .HasColumnName("BodySN")
                    .HasMaxLength(200);

                entity.Property(e => e.BuyerName).HasMaxLength(100);

                entity.Property(e => e.CityName).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeliverTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LetterTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MachineName).HasMaxLength(100);

                entity.Property(e => e.MotorSearialId).HasColumnName("MotorSearialID");

                entity.Property(e => e.MotorSn)
                    .HasColumnName("MotorSN")
                    .HasMaxLength(200);

                entity.Property(e => e.MotorSntrNo).HasColumnName("MotorSNTrNo");

                entity.Property(e => e.Size).HasMaxLength(50);
            });

            modelBuilder.Entity<MsVwLetterTaxSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_Vw_LetterTaxSearch");

                entity.Property(e => e.BodySn)
                    .HasColumnName("BodySN")
                    .HasMaxLength(200);

                entity.Property(e => e.BuyerId).HasMaxLength(50);

                entity.Property(e => e.BuyerName).HasMaxLength(100);

                entity.Property(e => e.LetterNormalTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LetterTaxTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MotorSn)
                    .HasColumnName("MotorSN")
                    .HasMaxLength(200);

                entity.Property(e => e.TaxValu).HasColumnType("numeric(22, 2)");

                entity.Property(e => e.TempDesca).HasMaxLength(100);
            });

            modelBuilder.Entity<MsVwQtyInStores>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_VW_QtyInStores");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(100);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LotNumberExpiry).HasMaxLength(50);

                entity.Property(e => e.PartCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartDescA).HasMaxLength(100);

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurNotReceived).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInNotebook).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInWithoutCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutWithoutBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPartiation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RequestedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReservedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SaleNotDelivered).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StoreCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<MsVwVendorExcelExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ms_Vw_VendorExcelExport");

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.CatCode).HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.CreditLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(20);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);

                entity.Property(e => e.VendorDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<MsWeightCard>(entity =>
            {
                entity.HasKey(e => e.ScaleCardId);

                entity.ToTable("Ms_WeightCard");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ClosingDoc).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(500);

                entity.Property(e => e.Remarks2).HasMaxLength(500);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Weight1Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight1Time).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight2Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight2Time).HasColumnType("smalldatetime");

                entity.Property(e => e.WeightQty1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightQty2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightQtyDiff).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightQtyDiscount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WheightDiscPercent).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<MsWeightcardItems>(entity =>
            {
                entity.HasKey(e => e.WeightItemId);

                entity.ToTable("Ms_WeightcardItems");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2)
                    .HasColumnName("QtyIUnit2")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(500);

                entity.Property(e => e.Remarks2).HasMaxLength(500);

                entity.Property(e => e.ScaleQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ScaleQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ScaleCard)
                    .WithMany(p => p.MsWeightcardItems)
                    .HasForeignKey(d => d.ScaleCardId)
                    .HasConstraintName("FK_Ms_WeightcardItems_Ms_WeightCard");
            });

            modelBuilder.Entity<MsgaCity>(entity =>
            {
                entity.HasKey(e => e.CityId)
                    .HasName("PK_MS_City");

                entity.ToTable("MSGA_City");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CityCode).HasMaxLength(50);

                entity.Property(e => e.CityName).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.SysCityId).HasColumnName("SysCityID");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PayNoteSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PayNoteSearch");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.BankNoticeTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BoxCode).HasMaxLength(50);

                entity.Property(e => e.Cc).HasColumnName("cc");

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(200);

                entity.Property(e => e.CustomerDescE).HasMaxLength(200);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.Desca)
                    .HasColumnName("DESCA")
                    .HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Value1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value1BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<PrintBoxType>(entity =>
            {
                entity.HasKey(e => e.BoxTypeId);

                entity.ToTable("Print_BoxType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintBreakType>(entity =>
            {
                entity.HasKey(e => e.BreakTypeId);

                entity.ToTable("Print_BreakType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintClosing>(entity =>
            {
                entity.HasKey(e => e.ClosingId);

                entity.ToTable("Print_Closing");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintConnectionType>(entity =>
            {
                entity.HasKey(e => e.ConnectTypeId);

                entity.ToTable("Print_ConnectionType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintCoverType>(entity =>
            {
                entity.HasKey(e => e.CoverTypeId);

                entity.ToTable("Print_CoverType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintCutterTypeId>(entity =>
            {
                entity.HasKey(e => e.CutterTypeId);

                entity.ToTable("Print_CutterTypeId");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintDistribution>(entity =>
            {
                entity.HasKey(e => e.DistributId);

                entity.ToTable("Print_Distribution");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintEditType>(entity =>
            {
                entity.HasKey(e => e.EditTypeId);

                entity.ToTable("Print_EditType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintFaceType>(entity =>
            {
                entity.HasKey(e => e.FaceTypeId);

                entity.ToTable("Print_FaceType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintGofferType>(entity =>
            {
                entity.HasKey(e => e.GofferId);

                entity.ToTable("Print_GofferType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintGradeType>(entity =>
            {
                entity.HasKey(e => e.GradId);

                entity.ToTable("Print_GradeType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintGramType>(entity =>
            {
                entity.HasKey(e => e.GramTypeId);

                entity.ToTable("Print_GramType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.Weight).HasColumnType("numeric(13, 10)");
            });

            modelBuilder.Entity<PrintIndustry>(entity =>
            {
                entity.HasKey(e => e.IndistryId);

                entity.ToTable("Print_Industry");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintJobOrderCreationType>(entity =>
            {
                entity.HasKey(e => e.CreateTypeId);

                entity.ToTable("Print_JobOrderCreationType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintPadingType>(entity =>
            {
                entity.HasKey(e => e.PadingTypeId);

                entity.ToTable("Print_PadingType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintPricing>(entity =>
            {
                entity.HasKey(e => e.PrinPriceId);

                entity.ToTable("Print_Pricing");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CutterHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Forms).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GofferMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.OutOrderHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OutOrderLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OutOrderWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OuterBoxesCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Palets).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaperPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Parts).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PartsBySheet).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PartsCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.ProdWeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Profit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurpuraMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Scrap).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ScrapPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SheetsQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Slofan).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrepare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfitPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSales).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Transportation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Zincs).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<PrintPricingDetails>(entity =>
            {
                entity.HasKey(e => e.PrinPriceIdDetailId);

                entity.ToTable("Print_PricingDetails");

                entity.Property(e => e.Factor).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GramFactor).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Height).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.KnifeLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.KnifeWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LayerPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Length).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Materialgram).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OperationPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.Slofan).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SolfanPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDimension).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Weight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Width).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PrinPrice)
                    .WithMany(p => p.PrintPricingDetails)
                    .HasForeignKey(d => d.PrinPriceId)
                    .HasConstraintName("FK_Print_PricingDetails_Print_Pricing");
            });

            modelBuilder.Entity<PrintQoutation>(entity =>
            {
                entity.HasKey(e => e.PrinQoutId);

                entity.ToTable("Print_Qoutation");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BoxCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CutterMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.GofferMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.OuterBoxesCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PartsCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PurpuraMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TotalLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintQoutationDetails>(entity =>
            {
                entity.HasKey(e => e.PrinQoutDetailId);

                entity.ToTable("Print_QoutationDetails");

                entity.Property(e => e.BoxCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GofferMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.OutOrderHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OutOrderLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OutOrderWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OuterBoxesCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PartsCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurpuraMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PrinQout)
                    .WithMany(p => p.PrintQoutationDetails)
                    .HasForeignKey(d => d.PrinQoutId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Print_QoutationDetails_Print_Qoutation");
            });

            modelBuilder.Entity<PrintQoutationDetailsItems>(entity =>
            {
                entity.HasKey(e => e.PrintQoutItemId);

                entity.ToTable("Print_QoutationDetailsItems");

                entity.Property(e => e.Height).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Length).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalDimension).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Width).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.PrinQoutDetail)
                    .WithMany(p => p.PrintQoutationDetailsItems)
                    .HasForeignKey(d => d.PrinQoutDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Print_QoutationDetailsItems_Print_QoutationDetails");
            });

            modelBuilder.Entity<PrintSectors>(entity =>
            {
                entity.HasKey(e => e.SectorId);

                entity.ToTable("Print_Sectors");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintSizeType>(entity =>
            {
                entity.HasKey(e => e.SizeTypeId);

                entity.ToTable("Print_SizeType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintStickyType>(entity =>
            {
                entity.HasKey(e => e.StickyTypeId);

                entity.ToTable("Print_StickyType");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<PrintStocking>(entity =>
            {
                entity.HasKey(e => e.StockingId);

                entity.ToTable("Print_Stocking");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdAttributeValue>(entity =>
            {
                entity.HasKey(e => e.AttribValuId);

                entity.ToTable("Prod_AttributeValue");

                entity.Property(e => e.AttributValuName1).HasMaxLength(100);

                entity.Property(e => e.AttributValuName2).HasMaxLength(100);

                entity.Property(e => e.AttributValue).HasMaxLength(200);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.HeightCentimeter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HeightMeter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.HeightMillimeters).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LengthCentimeter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LengthMeter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.LengthMillimeters).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.WidthCentimeter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WidthMeter).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.WidthMillimeters).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.Attribut)
                    .WithMany(p => p.ProdAttributeValue)
                    .HasForeignKey(d => d.AttributId)
                    .HasConstraintName("FK_Prod_AttributeValue_Prod_ItemAttributes");
            });

            modelBuilder.Entity<ProdBasicUnits>(entity =>
            {
                entity.HasKey(e => e.BasUnitId);

                entity.ToTable("Prod_BasicUnits");

                entity.Property(e => e.AutoDesc).HasMaxLength(500);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EtaxUnitCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnitNameE).HasMaxLength(100);

                entity.Property(e => e.UnittRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.ParentUnitNavigation)
                    .WithMany(p => p.InverseParentUnitNavigation)
                    .HasForeignKey(d => d.ParentUnit)
                    .HasConstraintName("FK_Prod_BasicUnits_Prod_BasicUnits");
            });

            modelBuilder.Entity<ProdBillOfMaterial>(entity =>
            {
                entity.HasKey(e => e.BillOfMaterialId);

                entity.ToTable("Prod_BillOfMaterial");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.Bomcode)
                    .HasColumnName("BOMCode")
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.OverflowQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OverflowQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ScrapCostPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ScrapQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ScrapQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdBillOfMaterialItems>(entity =>
            {
                entity.HasKey(e => e.BillItemsId);

                entity.ToTable("Prod_BillOfMaterialItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.MaterialProductPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProductQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProductQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProductionUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.ScrapQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ScrapQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.BillOfMaterial)
                    .WithMany(p => p.ProdBillOfMaterialItems)
                    .HasForeignKey(d => d.BillOfMaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prod_BillOfMaterialItems_Prod_BillOfMaterial");
            });

            modelBuilder.Entity<ProdBillOfMaterialSecondaryItems>(entity =>
            {
                entity.HasKey(e => e.BillSecondaryItemsId);

                entity.ToTable("Prod_BillOfMaterialSecondaryItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.ProductCostPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProductQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProductQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProductionUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.SecondaryProductPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.BillOfMaterial)
                    .WithMany(p => p.ProdBillOfMaterialSecondaryItems)
                    .HasForeignKey(d => d.BillOfMaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prod_BillOfMaterialSecondaryItems_Prod_BillOfMaterial");
            });

            modelBuilder.Entity<ProdEmpEquipDistrib>(entity =>
            {
                entity.HasKey(e => e.EmpEquipDistId);

                entity.ToTable("Prod_EmpEquipDistrib");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.TimeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdEmpEquipDistribDetail>(entity =>
            {
                entity.HasKey(e => e.EmpEquipDistDetailId);

                entity.ToTable("Prod_EmpEquipDistribDetail");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.HasOne(d => d.EmpEquipDist)
                    .WithMany(p => p.ProdEmpEquipDistribDetail)
                    .HasForeignKey(d => d.EmpEquipDistId)
                    .HasConstraintName("FK_Prod_EmpEquipDistribDetail_Prod_EmpEquipDistrib");
            });

            modelBuilder.Entity<ProdEmpJobOrderDistrib>(entity =>
            {
                entity.HasKey(e => e.EmpJobOrderDistId);

                entity.ToTable("Prod_EmpJobOrderDistrib");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.TimeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdEmpJobOrderDistribDetail>(entity =>
            {
                entity.HasKey(e => e.EmpJobOrderDistDetailId);

                entity.ToTable("Prod_EmpJobOrderDistribDetail");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.HasOne(d => d.EmpJobOrderDist)
                    .WithMany(p => p.ProdEmpJobOrderDistribDetail)
                    .HasForeignKey(d => d.EmpJobOrderDistId)
                    .HasConstraintName("FK_Prod_EmpJobOrderDistribDetail_Prod_EmpJobOrderDistrib");
            });

            modelBuilder.Entity<ProdEquipProfile>(entity =>
            {
                entity.HasKey(e => e.EquipProfileId);

                entity.ToTable("Prod_EquipProfile");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.ProdileDesc).HasMaxLength(500);

                entity.Property(e => e.ProfileCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Equip)
                    .WithMany(p => p.ProdEquipProfile)
                    .HasForeignKey(d => d.EquipId)
                    .HasConstraintName("FK_Prod_EquipProfile_Prod_Equipments");
            });

            modelBuilder.Entity<ProdEquipments>(entity =>
            {
                entity.HasKey(e => e.EquipId);

                entity.ToTable("Prod_Equipments");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EquipCode).HasMaxLength(50);

                entity.Property(e => e.EquipName1).HasMaxLength(100);

                entity.Property(e => e.EquipName2).HasMaxLength(100);

                entity.Property(e => e.IsScale).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Jdesc)
                    .HasColumnName("JDesc")
                    .HasMaxLength(500);

                entity.Property(e => e.MaxHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MaxLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MaxWeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MaxWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MinWeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPerUnit).HasColumnType("numeric(25, 4)");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SpeedByHour).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StandByTime).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StandardDailyCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StandardDailyWorkHours).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.StandardHourlyCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.StandardMonthlyCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TechnicalSpecs).HasMaxLength(500);

                entity.Property(e => e.TimeRate).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdItemAttributes>(entity =>
            {
                entity.HasKey(e => e.AttributId);

                entity.ToTable("Prod_ItemAttributes");

                entity.Property(e => e.AttributCode).HasMaxLength(50);

                entity.Property(e => e.AttributName1).HasMaxLength(100);

                entity.Property(e => e.AttributName2).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Dimension).HasComment("0 without,1 length,2 width,3 Height");

                entity.Property(e => e.IncrementalValu).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.MaxValu).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.MinValu).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdItemAttributesBatche>(entity =>
            {
                entity.HasKey(e => e.ItemAtrribBatchId)
                    .HasName("PK_Prod_ItemAttributesBatched");

                entity.ToTable("Prod_ItemAttributesBatche");

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscountPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscountValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HeightCentimeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HeightMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HeightMillimeters).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemBatchCode).HasMaxLength(250);

                entity.Property(e => e.ItemBatchDesc).HasMaxLength(500);

                entity.Property(e => e.ItemBatchName1).HasMaxLength(500);

                entity.Property(e => e.ItemBatchName2).HasMaxLength(500);

                entity.Property(e => e.LengthCentimeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LengthMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LengthMillimeters).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MultiplyValues).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchasePrice).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.QtyInBox).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Wheight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WidthCentimeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WidthMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WidthMillimeters).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<ProdItemAttributesBatchesDetails>(entity =>
            {
                entity.HasKey(e => e.ItemAtrributBatchValuesId);

                entity.ToTable("Prod_ItemAttributesBatchesDetails");

                entity.Property(e => e.AttribValueDesc).HasMaxLength(250);

                entity.HasOne(d => d.ItemAtrribBatch)
                    .WithMany(p => p.ProdItemAttributesBatchesDetails)
                    .HasForeignKey(d => d.ItemAtrribBatchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Prod_ItemAttributesBatchesDetails_Prod_ItemAttributesBatche");
            });

            modelBuilder.Entity<ProdItemAttributsJoin>(entity =>
            {
                entity.HasKey(e => e.ProdItemAtrribId)
                    .HasName("PK_Prod_ItemAttributs");

                entity.ToTable("Prod_ItemAttributsJoin");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Attribut)
                    .WithMany(p => p.ProdItemAttributsJoin)
                    .HasForeignKey(d => d.AttributId)
                    .HasConstraintName("FK_Prod_ItemAttributsJoin_Prod_ItemAttributes");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.ProdItemAttributsJoin)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Prod_ItemAttributsJoin_MS_ItemCard");
            });

            modelBuilder.Entity<ProdItemBatchPartition>(entity =>
            {
                entity.HasKey(e => e.ItemPatchPartitionId);

                entity.ToTable("Prod_ItemBatchPartition");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(100);

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemMax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurNotReceived).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurchaseOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInNotebook)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyInWithoutCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyIunit2Notebook)
                    .HasColumnName("QtyIUnit2Notebook")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyIunit2Partiation)
                    .HasColumnName("QtyIUnit2Partiation")
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.QtyOutWithoutBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPartiation)
                    .HasColumnType("numeric(38, 10)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RequestedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReservedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesNotDelivered).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Ttype)
                    .HasColumnName("TType")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength()
                    .HasComment("i for inserted, u for updated");

                entity.Property(e => e.Tversion)
                    .HasColumnName("TVersion")
                    .HasComment("number of updates on the table");

                entity.Property(e => e.VarianceQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WithoutCost).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemAtrribBatch)
                    .WithMany(p => p.ProdItemBatchPartition)
                    .HasForeignKey(d => d.ItemAtrribBatchId)
                    .HasConstraintName("FK_Prod_ItemBatchPartition_Prod_ItemAttributesBatche");
            });

            modelBuilder.Entity<ProdItemcardExpenses>(entity =>
            {
                entity.HasKey(e => e.ProdExpensId);

                entity.ToTable("Prod_ItemcardExpenses");

                entity.Property(e => e.ExpenseValu).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.ProdItemcardExpenses)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Prod_ItemcardExpenses_MS_ItemCard");
            });

            modelBuilder.Entity<ProdJobOrder>(entity =>
            {
                entity.HasKey(e => e.JobOrderId);

                entity.ToTable("Prod_JobOrder");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomerCharged).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FatteningType).HasComment("1 Fattening, 2 Feeding");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InstallationPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.JorderTypeId).HasColumnName("JOrderTypeId");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.NetExpenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProducedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RefOrder).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TotalEquipCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalEquipCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalGoStock).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalGoStockCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJobsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJobsCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJpbOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalMaterialCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProducedMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProductCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProductsPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPurchInvCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrap).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrapCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTasksCose).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdJobOrderClosing>(entity =>
            {
                entity.HasKey(e => e.JorderClosId);

                entity.ToTable("Prod_JobOrderClosing");

                entity.Property(e => e.JorderClosId).HasColumnName("JOrderClosId");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdJobOrderEmpCostDoc>(entity =>
            {
                entity.HasKey(e => e.JorderEmpDocId);

                entity.ToTable("Prod_JobOrderEmpCostDoc");

                entity.Property(e => e.JorderEmpDocId).HasColumnName("JOrderEmpDocId");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.ShiftId)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdJobOrderEmpCostDocDetail>(entity =>
            {
                entity.HasKey(e => e.JorderEmpDocDetailId);

                entity.ToTable("Prod_JobOrderEmpCostDocDetail");

                entity.Property(e => e.JorderEmpDocDetailId).HasColumnName("JOrderEmpDocDetailId");

                entity.Property(e => e.CostHour).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutTime).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.JorderEmpDocId).HasColumnName("JOrderEmpDocId");

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.JorderEmpDoc)
                    .WithMany(p => p.ProdJobOrderEmpCostDocDetail)
                    .HasForeignKey(d => d.JorderEmpDocId)
                    .HasConstraintName("FK_Prod_JobOrderEmpCostDocDetail_Prod_JobOrderEmpCostDoc");
            });

            modelBuilder.Entity<ProdJobOrderEquipCostDoc>(entity =>
            {
                entity.HasKey(e => e.JorderEquipDocId);

                entity.ToTable("Prod_JobOrderEquipCostDoc");

                entity.Property(e => e.JorderEquipDocId).HasColumnName("JOrderEquipDocId");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdJobOrderEquipCostDocDetail>(entity =>
            {
                entity.HasKey(e => e.JorderEquipDocDetailId);

                entity.ToTable("Prod_JobOrderEquipCostDocDetail");

                entity.Property(e => e.JorderEquipDocDetailId).HasColumnName("JOrderEquipDocDetailId");

                entity.Property(e => e.CostHour).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutTime).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.JorderEquipDocId).HasColumnName("JOrderEquipDocId");

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.JorderEquipDoc)
                    .WithMany(p => p.ProdJobOrderEquipCostDocDetail)
                    .HasForeignKey(d => d.JorderEquipDocId)
                    .HasConstraintName("FK_Prod_JobOrderEquipCostDocDetail_Prod_JobOrderEquipCostDoc");
            });

            modelBuilder.Entity<ProdJobOrderEquipment>(entity =>
            {
                entity.HasKey(e => e.JobEquipId);

                entity.ToTable("Prod_JobOrderEquipment");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JorderEquipDocDetailId).HasColumnName("JOrderEquipDocDetailId");

                entity.Property(e => e.JorderEquipDocId).HasColumnName("JOrderEquipDocId");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.StandardHourlyCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderEquipment)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderEquipment_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderExpenses>(entity =>
            {
                entity.HasKey(e => e.JobExpenseId);

                entity.ToTable("Prod_JobOrderExpenses");

                entity.Property(e => e.BitOnClient).HasColumnName("bitOnClient");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExpensValue).HasColumnType("decimal(25, 3)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderExpenses)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderExpenses_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderGoStock>(entity =>
            {
                entity.HasKey(e => e.JobGoStockId);

                entity.ToTable("Prod_JobOrderGoStock");

                entity.Property(e => e.JobGoStockId).HasColumnName("jobGoStockId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderGoStock)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderGoStock_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderJobs>(entity =>
            {
                entity.HasKey(e => e.JobJobId);

                entity.ToTable("Prod_JobOrderJobs");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JorderEmpDocDetailId).HasColumnName("JOrderEmpDocDetailId");

                entity.Property(e => e.JorderEmpDocId).HasColumnName("JOrderEmpDocId");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderJobs)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderJobs_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderMaterials>(entity =>
            {
                entity.HasKey(e => e.JobMaterialId);

                entity.ToTable("Prod_JobOrderMaterials");

                entity.Property(e => e.JobMaterialId).HasColumnName("jobMaterialId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RequestedMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderMaterials)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderMaterials_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderProducts>(entity =>
            {
                entity.HasKey(e => e.JobProductId);

                entity.ToTable("Prod_JobOrderProducts");

                entity.Property(e => e.JobProductId).HasColumnName("jobProductId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpensesCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpensesCostInPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCostInPrcent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.JobsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.JobsCostInPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MachineCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MachineCostInPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyAfter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBefore).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ScrapCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ScrapCostInPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.ItemAtrribBatch)
                    .WithMany(p => p.ProdJobOrderProducts)
                    .HasForeignKey(d => d.ItemAtrribBatchId)
                    .HasConstraintName("FK_Prod_JobOrderProducts_Prod_ItemAttributesBatche");

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.ProdJobOrderProducts)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Prod_JobOrderProducts_MS_ItemCard");

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderProducts)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderProducts_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderPurchaseInvoices>(entity =>
            {
                entity.HasKey(e => e.JobPurchasInvId);

                entity.ToTable("Prod_JobOrderPurchaseInvoices");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderPurchaseInvoices)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderPurchaseInvoices_Prod_JobOrder");

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.ProdJobOrderPurchaseInvoices)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_Prod_JobOrderPurchaseInvoices_MS_PurchasInvoice");
            });

            modelBuilder.Entity<ProdJobOrderScrap>(entity =>
            {
                entity.HasKey(e => e.JobScrapId);

                entity.ToTable("Prod_JobOrderScrap");

                entity.Property(e => e.JobScrapId).HasColumnName("jobScrapId");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderScrap)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderScrap_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderServices>(entity =>
            {
                entity.HasKey(e => e.JobServiceId);

                entity.ToTable("Prod_JobOrderServices");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JorderEmpDocDetailId).HasColumnName("JOrderEmpDocDetailId");

                entity.Property(e => e.JorderEmpDocId).HasColumnName("JOrderEmpDocId");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.ServiceValue).HasColumnType("decimal(25, 3)");

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderServices)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderServices_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderTasks>(entity =>
            {
                entity.HasKey(e => e.JobTaskId);

                entity.ToTable("Prod_JobOrderTasks");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderTasks)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderTasks_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJobOrderType>(entity =>
            {
                entity.HasKey(e => e.JorderTypeId);

                entity.ToTable("Prod_JobOrderType");

                entity.Property(e => e.JorderTypeId).HasColumnName("JOrderTypeId");

                entity.Property(e => e.AnimalOrFood).HasComment("1 food,2 animal");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IndirectCostPrcent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IndirectJobsCostPrcent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IndirectMachinesCostPrcent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IndirectMaterialCostPrcent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.JobOrderMadeFor).HasComment("0 store, 1 customer");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdJobOrderWorkFlow>(entity =>
            {
                entity.HasKey(e => e.JobOrderDepartId);

                entity.ToTable("Prod_JobOrderWorkFlow");

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.JobOrder)
                    .WithMany(p => p.ProdJobOrderWorkFlow)
                    .HasForeignKey(d => d.JobOrderId)
                    .HasConstraintName("FK_Prod_JobOrderWorkFlow_Prod_JobOrder");
            });

            modelBuilder.Entity<ProdJoinTaskEquipments>(entity =>
            {
                entity.HasKey(e => e.TaskEquipJoinId);

                entity.ToTable("Prod_JoinTaskEquipments");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.ProdJoinTaskEquipments)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_Prod_JoinTaskEquipments_Prod_Tasks");
            });

            modelBuilder.Entity<ProdJoinTaskJob>(entity =>
            {
                entity.HasKey(e => e.TaskJobJoinId);

                entity.ToTable("Prod_JoinTaskJob");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.ProdJoinTaskJob)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_Prod_JoinTaskJob_Prod_Tasks");
            });

            modelBuilder.Entity<ProdProductionLine>(entity =>
            {
                entity.HasKey(e => e.ProLineId);

                entity.ToTable("Prod_ProductionLine");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ProdLinDesc).HasMaxLength(500);

                entity.Property(e => e.ProdLinName1).HasMaxLength(100);

                entity.Property(e => e.ProdLinName2).HasMaxLength(100);

                entity.Property(e => e.StandardQty).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdProductionLineDetails>(entity =>
            {
                entity.HasKey(e => e.ProdLineDetailId);

                entity.ToTable("Prod_ProductionLineDetails");

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.HasOne(d => d.ProLine)
                    .WithMany(p => p.ProdProductionLineDetails)
                    .HasForeignKey(d => d.ProLineId)
                    .HasConstraintName("FK_Prod_ProductionLineDetails_Prod_ProductionLine");
            });

            modelBuilder.Entity<ProdProductionOrder>(entity =>
            {
                entity.HasKey(e => e.ProductionOrderId);

                entity.ToTable("Prod_ProductionOrder");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdProductionOrderDetail>(entity =>
            {
                entity.HasKey(e => e.ProdOrderDetailId);

                entity.ToTable("Prod_ProductionOrderDetail");

                entity.HasOne(d => d.ProductionOrder)
                    .WithMany(p => p.ProdProductionOrderDetail)
                    .HasForeignKey(d => d.ProductionOrderId)
                    .HasConstraintName("FK_Prod_ProductionOrderDetail_Prod_ProductionOrder");
            });

            modelBuilder.Entity<ProdRecipe>(entity =>
            {
                entity.HasKey(e => e.RecipeId);

                entity.ToTable("Prod_Recipe");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RecipeCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdRecipeDetail>(entity =>
            {
                entity.HasKey(e => e.RecipeDetaiId);

                entity.ToTable("Prod_RecipeDetail");

                entity.HasOne(d => d.Recipe)
                    .WithMany(p => p.ProdRecipeDetail)
                    .HasForeignKey(d => d.RecipeId)
                    .HasConstraintName("FK_Prod_RecipeDetail_Prod_Recipe");
            });

            modelBuilder.Entity<ProdSettings>(entity =>
            {
                entity.HasKey(e => e.ProdSettingId);

                entity.ToTable("Prod_Settings");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DailyWorkHours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EmpDataSource).HasComment("1 production,2 Hr");

                entity.Property(e => e.MonthlyStandardWorkDays).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdTasks>(entity =>
            {
                entity.HasKey(e => e.TaskId);

                entity.ToTable("Prod_Tasks");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.TaskCode).HasMaxLength(50);

                entity.Property(e => e.TaskDesc).HasMaxLength(500);

                entity.Property(e => e.TaskName1).HasMaxLength(100);

                entity.Property(e => e.TaskName2).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdWorkOrder>(entity =>
            {
                entity.HasKey(e => e.WorkOrderId);

                entity.ToTable("Prod_WorkOrder");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomerCharged).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocBarCode).HasMaxLength(200);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetExpenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalEquipCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalEquipCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalGoStockCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJpbOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalMaterialCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProductCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrap).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrapCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdWorkOrderEquipment>(entity =>
            {
                entity.HasKey(e => e.WorkOrderEquipId);

                entity.ToTable("Prod_WorkOrderEquipment");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JorderEquipDocDetailId).HasColumnName("JOrderEquipDocDetailId");

                entity.Property(e => e.JorderEquipDocId).HasColumnName("JOrderEquipDocId");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.StandardHourlyCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ProdWorkOrderEquipment)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Prod_WorkOrderEquipment_Prod_WorkOrder");
            });

            modelBuilder.Entity<ProdWorkOrderExpenses>(entity =>
            {
                entity.HasKey(e => e.WorkOrderExpenseId);

                entity.ToTable("Prod_WorkOrderExpenses");

                entity.Property(e => e.BitOnClient).HasColumnName("bitOnClient");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExpensValue).HasColumnType("decimal(25, 3)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ProdWorkOrderExpenses)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Prod_WorkOrderExpenses_Prod_WorkOrder");
            });

            modelBuilder.Entity<ProdWorkOrderItemRecQualityDocs>(entity =>
            {
                entity.HasKey(e => e.WorkOrderRecQualityId);

                entity.ToTable("Prod_WorkOrderItemRecQualityDocs");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ProdWorkOrderItemRecQualityDocs)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Prod_WorkOrderItemRecQualityDocs_Prod_WorkOrder");
            });

            modelBuilder.Entity<ProdWorkOrderMaterials>(entity =>
            {
                entity.HasKey(e => e.WorkOrderMaterialId);

                entity.ToTable("Prod_WorkOrderMaterials");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RequestedMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ProdWorkOrderMaterials)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Prod_WorkOrderMaterials_Prod_WorkOrder");
            });

            modelBuilder.Entity<ProdWorkOrderProdItems>(entity =>
            {
                entity.HasKey(e => e.WorkOrderProdItemId);

                entity.ToTable("Prod_WorkOrderProdItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DoublCheckQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DoublCheckQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DoubleCleanQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MissedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MissedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalCleanQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceDoubleClean).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceNormal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RejectedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RejectedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RequestedMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDoubleClean).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalNormal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ProdWorkOrderProdItems)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Prod_WorkOrderProdItems_Prod_WorkOrder");
            });

            modelBuilder.Entity<ProdWorkOrderScrap>(entity =>
            {
                entity.HasKey(e => e.WorkOrderScrapId);

                entity.ToTable("Prod_WorkOrderScrap");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProdWorkOrderServices>(entity =>
            {
                entity.HasKey(e => e.WorkOrderServiceId);

                entity.ToTable("Prod_WorkOrderServices");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.JorderEmpDocDetailId).HasColumnName("JOrderEmpDocDetailId");

                entity.Property(e => e.JorderEmpDocId).HasColumnName("JOrderEmpDocId");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.ServiceValue).HasColumnType("decimal(25, 3)");

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.ProdWorkOrderServices)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Prod_WorkOrderServices_Prod_WorkOrder");
            });

            modelBuilder.Entity<ProjAccounts>(entity =>
            {
                entity.HasKey(e => e.ProjectAccId);

                entity.ToTable("Proj_Accounts");

                entity.Property(e => e.Value).HasColumnType("numeric(25, 2)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjAccounts)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_Accounts_Proj_Projects");
            });

            modelBuilder.Entity<ProjEstimateItems>(entity =>
            {
                entity.HasKey(e => e.ProjectEstimateItemId);

                entity.ToTable("Proj_EstimateItems");

                entity.Property(e => e.AttributeCode).HasMaxLength(100);

                entity.Property(e => e.AttributeName).HasMaxLength(250);

                entity.Property(e => e.EstimateCost).HasColumnType("numeric(25, 2)");

                entity.Property(e => e.SuggestPrice).HasColumnType("numeric(25, 2)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjEstimateItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_EstimateItems_Proj_Projects");
            });

            modelBuilder.Entity<ProjExpenses>(entity =>
            {
                entity.HasKey(e => e.ProjectExpensId);

                entity.ToTable("Proj_Expenses");

                entity.Property(e => e.EstimatePercent).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.EstimateValue).HasColumnType("numeric(25, 2)");

                entity.Property(e => e.RealPercent).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.RealValue).HasColumnType("numeric(25, 2)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjExpenses)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_Expenses_Proj_Projects");
            });

            modelBuilder.Entity<ProjFund>(entity =>
            {
                entity.HasKey(e => e.ProjectFundId);

                entity.ToTable("Proj_Fund");

                entity.Property(e => e.Contact).HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.FundName1).HasMaxLength(100);

                entity.Property(e => e.FundName2).HasMaxLength(100);

                entity.Property(e => e.FundPercent).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.FundValue).HasColumnType("numeric(25, 2)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjFund)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_Fund_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjDocuments>(entity =>
            {
                entity.HasKey(e => e.ProjDocumentId);

                entity.ToTable("Proj_ProjDocuments");

                entity.HasIndex(e => e.Fsid)
                    .HasName("UQ__Proj_Pro__9C4B07173ED718FB")
                    .IsUnique();

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fdata).HasColumnName("FData");

                entity.Property(e => e.Fsid)
                    .HasColumnName("FSId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.IssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IssuePlace).HasMaxLength(100);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PaperNo).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.RenewalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SearchTags).HasMaxLength(1000);

                entity.HasOne(d => d.OwnShipBond)
                    .WithMany(p => p.ProjProjDocuments)
                    .HasForeignKey(d => d.OwnShipBondId)
                    .HasConstraintName("FK_Proj_ProjDocuments_Cod_OwnershipBonds");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjDocuments)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjDocuments_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjExploitJoin>(entity =>
            {
                entity.HasKey(e => e.ProjExploitJoinId);

                entity.ToTable("Proj_ProjExploitJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.BuildExploit)
                    .WithMany(p => p.ProjProjExploitJoin)
                    .HasForeignKey(d => d.BuildExploitId)
                    .HasConstraintName("FK_Proj_ProjExploitJoin_Cod_BuildingExploitation");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjExploitJoin)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjExploitJoin_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjInsurance>(entity =>
            {
                entity.HasKey(e => e.ProjInsuranceId);

                entity.ToTable("Proj_ProjInsurance");

                entity.Property(e => e.InsuranceValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.BuildInsurStat)
                    .WithMany(p => p.ProjProjInsurance)
                    .HasForeignKey(d => d.BuildInsurStatId)
                    .HasConstraintName("FK_Proj_ProjInsurance_Cod_BuildingInsuranceStatus");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjInsurance)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjInsurance_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjInsuranceUnit>(entity =>
            {
                entity.HasKey(e => e.ProjInsuranceUnitId);

                entity.ToTable("Proj_ProjInsuranceUnit");

                entity.Property(e => e.InsuranceValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.InsurCase)
                    .WithMany(p => p.ProjProjInsuranceUnit)
                    .HasForeignKey(d => d.InsurCaseId)
                    .HasConstraintName("FK_Proj_ProjInsuranceUnit_Cod_InsuranceCases");

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjInsuranceUnit)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjInsuranceUnit_Proj_ProjUnits");

                entity.HasOne(d => d.UnitInsurstat)
                    .WithMany(p => p.ProjProjInsuranceUnit)
                    .HasForeignKey(d => d.UnitInsurstatId)
                    .HasConstraintName("FK_Proj_ProjInsuranceUnit_Cod_UnitInsuranceStatus");
            });

            modelBuilder.Entity<ProjProjItemEmpTaskJoin>(entity =>
            {
                entity.HasKey(e => e.ProjItemEmpTaskId);

                entity.ToTable("Proj_ProjItemEmpTaskJoin");

                entity.Property(e => e.ActualItemExpenseValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ActualItemPercentExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpectItemPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpectItemValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FinishPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(500);

                entity.Property(e => e.Remarks2).HasMaxLength(500);

                entity.HasOne(d => d.ProjItemEmp)
                    .WithMany(p => p.ProjProjItemEmpTaskJoin)
                    .HasForeignKey(d => d.ProjItemEmpId)
                    .HasConstraintName("FK_Proj_ProjItemEmpTaskJoin_Proj_ProjectItemEmpJoin");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.ProjProjItemEmpTaskJoin)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_Proj_ProjItemEmpTaskJoin_Prod_Tasks");
            });

            modelBuilder.Entity<ProjProjOccupTypeJoin>(entity =>
            {
                entity.HasKey(e => e.ProjOccupTypeJoinId);

                entity.ToTable("Proj_ProjOccupTypeJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.BuildOccupType)
                    .WithMany(p => p.ProjProjOccupTypeJoin)
                    .HasForeignKey(d => d.BuildOccupTypeId)
                    .HasConstraintName("FK_Proj_ProjOccupTypeJoin_Cod_BuildOccupTypes");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjOccupTypeJoin)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjOccupTypeJoin_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjOwnerJoin>(entity =>
            {
                entity.HasKey(e => e.ProjOwnerJoinId);

                entity.ToTable("Proj_ProjOwnerJoin");

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.SharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShareValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjOwnerJoin)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjOwnerJoin_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjParkingJoin>(entity =>
            {
                entity.HasKey(e => e.ProjParkJoinId);

                entity.ToTable("Proj_ProjParkingJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.Parking)
                    .WithMany(p => p.ProjProjParkingJoin)
                    .HasForeignKey(d => d.ParkingId)
                    .HasConstraintName("FK_Proj_ProjParkingJoin_Cod_Parkings");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjParkingJoin)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjParkingJoin_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjPermitActivityJoin>(entity =>
            {
                entity.HasKey(e => e.ProjPermitActivityJoinId);

                entity.ToTable("Proj_ProjPermitActivityJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.BuildPermitActivity)
                    .WithMany(p => p.ProjProjPermitActivityJoin)
                    .HasForeignKey(d => d.BuildPermitActivityId)
                    .HasConstraintName("FK_Proj_ProjPermitActivityJoin_Cod_BuildPermitActiv");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjPermitActivityJoin)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjPermitActivityJoin_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjPerspectiveJoin>(entity =>
            {
                entity.HasKey(e => e.ProjPerspectiveJoinId);

                entity.ToTable("Proj_ProjPerspectiveJoin");

                entity.HasIndex(e => e.Fsid)
                    .HasName("UQ__Proj_Pro__9C4B07178AD73A3B")
                    .IsUnique();

                entity.Property(e => e.Fdata).HasColumnName("FData");

                entity.Property(e => e.Fsid)
                    .HasColumnName("FSId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.BuildPerspective)
                    .WithMany(p => p.ProjProjPerspectiveJoin)
                    .HasForeignKey(d => d.BuildPerspectiveId)
                    .HasConstraintName("FK_Proj_ProjPerspectiveJoin_Cod_BuildPerspective");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjPerspectiveJoin)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjPerspectiveJoin_Proj_Projects2");
            });

            modelBuilder.Entity<ProjProjPicture>(entity =>
            {
                entity.HasKey(e => e.ProjPictureId);

                entity.ToTable("Proj_ProjPicture");

                entity.HasIndex(e => e.Fsid)
                    .HasName("UQ__Proj_Pro__9C4B071785FAAD21")
                    .IsUnique();

                entity.Property(e => e.AttachPath).IsUnicode(false);

                entity.Property(e => e.Fdata).HasColumnName("FData");

                entity.Property(e => e.Fsid)
                    .HasColumnName("FSId")
                    .HasDefaultValueSql("(newid())")
                    .HasComment("");

                entity.Property(e => e.Name1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjPicture)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjPicture_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjUnitDocument>(entity =>
            {
                entity.HasKey(e => e.ProjUnitDocumentId);

                entity.ToTable("Proj_ProjUnitDocument");

                entity.HasIndex(e => e.Fsid)
                    .HasName("UQ__Proj_Pro__9C4B07170092463A")
                    .IsUnique();

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fdata).HasColumnName("FData");

                entity.Property(e => e.Fsid)
                    .HasColumnName("FSId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.IssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IssuePlace).HasMaxLength(100);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PaperNo).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.RenewalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SearchTags).HasMaxLength(1000);

                entity.HasOne(d => d.OwnShipBond)
                    .WithMany(p => p.ProjProjUnitDocument)
                    .HasForeignKey(d => d.OwnShipBondId)
                    .HasConstraintName("FK_Proj_ProjUnitDocument_Cod_OwnershipBonds");

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitDocument)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitDocument_Proj_ProjUnits");
            });

            modelBuilder.Entity<ProjProjUnitExploitJoin>(entity =>
            {
                entity.HasKey(e => e.ProjUnitExploitJoinId);

                entity.ToTable("Proj_ProjUnitExploitJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitExploitJoin)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitExploitJoin_Proj_ProjUnits");

                entity.HasOne(d => d.UnitExploit)
                    .WithMany(p => p.ProjProjUnitExploitJoin)
                    .HasForeignKey(d => d.UnitExploitId)
                    .HasConstraintName("FK_Proj_ProjUnitExploitJoin_Cod_UnitExploitation");
            });

            modelBuilder.Entity<ProjProjUnitInstallTemp>(entity =>
            {
                entity.HasKey(e => e.ProjUnitInstallTempId);

                entity.ToTable("Proj_ProjUnitInstallTemp");

                entity.HasOne(d => d.InstallTemp)
                    .WithMany(p => p.ProjProjUnitInstallTemp)
                    .HasForeignKey(d => d.InstallTempId)
                    .HasConstraintName("FK_Proj_ProjUnitInstallTemp_Cod_InstallmentTemps");

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitInstallTemp)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitInstallTemp_Proj_ProjUnits");
            });

            modelBuilder.Entity<ProjProjUnitOccupTypeJoin>(entity =>
            {
                entity.HasKey(e => e.ProjUnitOccupTypeJoinId);

                entity.ToTable("Proj_ProjUnitOccupTypeJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitOccupTypeJoin)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitOccupTypeJoin_Proj_ProjUnits");

                entity.HasOne(d => d.UnitOccuType)
                    .WithMany(p => p.ProjProjUnitOccupTypeJoin)
                    .HasForeignKey(d => d.UnitOccuTypeId)
                    .HasConstraintName("FK_Proj_ProjUnitOccupTypeJoin_Cod_UnitOccupancyTypes");
            });

            modelBuilder.Entity<ProjProjUnitOwnerJoin>(entity =>
            {
                entity.HasKey(e => e.ProjUnitOwnerJoinId);

                entity.ToTable("Proj_ProjUnitOwnerJoin");

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.SharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShareValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitOwnerJoin)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitOwnerJoin_Proj_ProjUnits");
            });

            modelBuilder.Entity<ProjProjUnitPermitActivityJoin>(entity =>
            {
                entity.HasKey(e => e.ProjUnitPermitActivityJoinId);

                entity.ToTable("Proj_ProjUnitPermitActivityJoin");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitPermitActivityJoin)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitPermitActivityJoin_Proj_ProjUnits");

                entity.HasOne(d => d.UnitPermitActiv)
                    .WithMany(p => p.ProjProjUnitPermitActivityJoin)
                    .HasForeignKey(d => d.UnitPermitActivId)
                    .HasConstraintName("FK_Proj_ProjUnitPermitActivityJoin_Cod_UnitPermittedActivity");
            });

            modelBuilder.Entity<ProjProjUnitPerspectiveJoin>(entity =>
            {
                entity.HasKey(e => e.ProjUnitPerspectiveJoinId);

                entity.ToTable("Proj_ProjUnitPerspectiveJoin");

                entity.HasIndex(e => e.Fsid)
                    .HasName("UQ__Proj_Pro__9C4B07177DDE556F")
                    .IsUnique();

                entity.Property(e => e.Fdata).HasColumnName("FData");

                entity.Property(e => e.Fsid)
                    .HasColumnName("FSId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitPerspectiveJoin)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitPerspectiveJoin_Proj_ProjUnits");

                entity.HasOne(d => d.UnitPerspective)
                    .WithMany(p => p.ProjProjUnitPerspectiveJoin)
                    .HasForeignKey(d => d.UnitPerspectiveId)
                    .HasConstraintName("FK_Proj_ProjUnitPerspectiveJoin_Cod_UnitPerspective");
            });

            modelBuilder.Entity<ProjProjUnitPicture>(entity =>
            {
                entity.HasKey(e => e.ProjUnitPictureId);

                entity.ToTable("Proj_ProjUnitPicture");

                entity.HasIndex(e => e.Fsid)
                    .HasName("UQ__Proj_Pro__9C4B07174432347E")
                    .IsUnique();

                entity.Property(e => e.Fdata).HasColumnName("FData");

                entity.Property(e => e.Fsid)
                    .HasColumnName("FSId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitPicture)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitPicture_Proj_ProjUnits");
            });

            modelBuilder.Entity<ProjProjUnitService>(entity =>
            {
                entity.HasKey(e => e.ProjUnitServiceId);

                entity.ToTable("Proj_ProjUnitService");

                entity.Property(e => e.MeterCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ServiceValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServiceValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitService)
                    .HasForeignKey(d => d.ProjUnitId)
                    .HasConstraintName("FK_Proj_ProjUnitService_Proj_ProjUnits");

                entity.HasOne(d => d.Reserv)
                    .WithMany(p => p.ProjProjUnitService)
                    .HasForeignKey(d => d.ReservId)
                    .HasConstraintName("FK_Proj_ProjUnitService_Proj_UnitReservation");

                entity.HasOne(d => d.UnitServ)
                    .WithMany(p => p.ProjProjUnitService)
                    .HasForeignKey(d => d.UnitServId)
                    .HasConstraintName("FK_Proj_ProjUnitService_Cod_UnitServices");
            });

            modelBuilder.Entity<ProjProjUnitSubUnits>(entity =>
            {
                entity.HasKey(e => e.SubUnitId);

                entity.ToTable("Proj_ProjUnitSubUnits");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.MeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MetersCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.ProjUnit)
                    .WithMany(p => p.ProjProjUnitSubUnits)
                    .HasForeignKey(d => d.ProjUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proj_ProjUnitSubUnits_Proj_ProjUnits");

                entity.HasOne(d => d.SubUnittype)
                    .WithMany(p => p.ProjProjUnitSubUnits)
                    .HasForeignKey(d => d.SubUnittypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proj_ProjUnitSubUnits_Code_SubUnitTypes");
            });

            modelBuilder.Entity<ProjProjUnits>(entity =>
            {
                entity.HasKey(e => e.ProjUnitId)
                    .HasName("PK_Proj_ProjUnits_1");

                entity.ToTable("Proj_ProjUnits");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.BaseMentArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BasementMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BuildingArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BuildingMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.CommissionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ContractDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContractDocNo).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EstimatedUnitArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.GardenArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GardenMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.ParkArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ParkMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RentDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RentDocNo).HasMaxLength(50);

                entity.Property(e => e.ReserveDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ReserveDocNo).HasMaxLength(50);

                entity.Property(e => e.RoofArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RoofMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitExpectedStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjUnits)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjUnits_Proj_Projects");
            });

            modelBuilder.Entity<ProjProjectItemEmpJoin>(entity =>
            {
                entity.HasKey(e => e.ProjItemEmpId);

                entity.ToTable("Proj_ProjectItemEmpJoin");

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.ProjProjectItemEmpJoin)
                    .HasForeignKey(d => d.EmpId)
                    .HasConstraintName("FK_Proj_ProjectItemEmpJoin_Hr_Employees");

                entity.HasOne(d => d.ProjItemsJoin)
                    .WithMany(p => p.ProjProjectItemEmpJoin)
                    .HasForeignKey(d => d.ProjItemsJoinId)
                    .HasConstraintName("FK_Proj_ProjectItemEmpJoin_Proj_ProjectItemsJoin");
            });

            modelBuilder.Entity<ProjProjectItems>(entity =>
            {
                entity.HasKey(e => e.ProjectItemsId);

                entity.ToTable("Proj_ProjectItems");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjProjectItemsJoin>(entity =>
            {
                entity.HasKey(e => e.ProjItemsJoinId);

                entity.ToTable("Proj_ProjectItemsJoin");

                entity.Property(e => e.ActualItemExpenseValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ActualItemPercentExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpectItemPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpectItemValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FinishPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(500);

                entity.Property(e => e.Remarks2).HasMaxLength(500);

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjProjectItemsJoin)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_ProjectItemsJoin_Proj_Projects");

                entity.HasOne(d => d.ProjectItems)
                    .WithMany(p => p.ProjProjectItemsJoin)
                    .HasForeignKey(d => d.ProjectItemsId)
                    .HasConstraintName("FK_Proj_ProjectItemsJoin_Proj_ProjectItems");
            });

            modelBuilder.Entity<ProjProjectItemsVendors>(entity =>
            {
                entity.HasKey(e => e.ProjectItemsVendorId);

                entity.ToTable("Proj_ProjectItemsVendors");

                entity.HasOne(d => d.ProjectItems)
                    .WithMany(p => p.ProjProjectItemsVendors)
                    .HasForeignKey(d => d.ProjectItemsId)
                    .HasConstraintName("FK_Proj_ProjectItemsVendors_Proj_ProjectItems");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.ProjProjectItemsVendors)
                    .HasForeignKey(d => d.VendorId)
                    .HasConstraintName("FK_Proj_ProjectItemsVendors_MS_Vendor");
            });

            modelBuilder.Entity<ProjProjects>(entity =>
            {
                entity.HasKey(e => e.ProjectId);

                entity.ToTable("Proj_Projects");

                entity.Property(e => e.ActualExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ActualExpensePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BaseMentArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BasementMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BuildingArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BuildingMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommissionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CompanyShare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CompanySharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ContractDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Description1).HasMaxLength(250);

                entity.Property(e => e.Description2).HasMaxLength(250);

                entity.Property(e => e.EastBoundary).HasMaxLength(300);

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpectedExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GardenArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GardenMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LandMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LandNo).HasMaxLength(200);

                entity.Property(e => e.Landarea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NorthBoundary).HasMaxLength(300);

                entity.Property(e => e.PaidCapital).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidCapitalPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ParkArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ParkMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectExpectedStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProjectName1).HasMaxLength(100);

                entity.Property(e => e.ProjectName2).HasMaxLength(100);

                entity.Property(e => e.ProjectStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ProjectValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemainExpense).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemainExpensePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.RoofArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RoofMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SouthBoundary).HasMaxLength(300);

                entity.Property(e => e.StreetNo).HasMaxLength(200);

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.WestBoundary).HasMaxLength(300);
            });

            modelBuilder.Entity<ProjReInstallment>(entity =>
            {
                entity.HasKey(e => e.ReInstallId);

                entity.ToTable("Proj_ReInstallment");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DepositVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscountVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.NewEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NewInstallVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NewStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalNotPaidInstallVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjRealItems>(entity =>
            {
                entity.HasKey(e => e.ProjectRealItemId);

                entity.ToTable("Proj_RealItems");

                entity.Property(e => e.AttributeCode).HasMaxLength(100);

                entity.Property(e => e.AttributeName).HasMaxLength(250);

                entity.Property(e => e.RealCost).HasColumnType("numeric(25, 2)");

                entity.Property(e => e.SuggestPrice).HasColumnType("numeric(25, 2)");

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjRealItems)
                    .HasForeignKey(d => d.ProjectId)
                    .HasConstraintName("FK_Proj_RealItems_Proj_Projects");
            });

            modelBuilder.Entity<ProjReservInstallments>(entity =>
            {
                entity.HasKey(e => e.ReservInstallId);

                entity.ToTable("Proj_ReservInstallments");

                entity.Property(e => e.DelayFine).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletReason).HasMaxLength(100);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.InstallValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidBankDeposit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidCash).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidCheques).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.HasOne(d => d.Reserv)
                    .WithMany(p => p.ProjReservInstallments)
                    .HasForeignKey(d => d.ReservId)
                    .HasConstraintName("FK_Proj_ReservInstallments_Proj_UnitReservation1");
            });

            modelBuilder.Entity<ProjReserveUnitDocuments>(entity =>
            {
                entity.HasKey(e => e.ReservDocId);

                entity.ToTable("Proj_ReserveUnitDocuments");

                entity.HasIndex(e => e.Fsid)
                    .HasName("UQ__Proj_Res__9C4B0717908FFF11")
                    .IsUnique();

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fdata).HasColumnName("FData");

                entity.Property(e => e.Fsid)
                    .HasColumnName("FSId")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.IssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IssuePlace).HasMaxLength(100);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PaperNo).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.RenewalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SearchTags).HasMaxLength(1000);

                entity.HasOne(d => d.Reserv)
                    .WithMany(p => p.ProjReserveUnitDocuments)
                    .HasForeignKey(d => d.ReservId)
                    .HasConstraintName("FK_Proj_ReserveUnitDocuments_Proj_UnitReservation");
            });

            modelBuilder.Entity<ProjReserveUnitOwners>(entity =>
            {
                entity.HasKey(e => e.ReservOwnerId);

                entity.ToTable("Proj_ReserveUnitOwners");

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.ConcessionDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ConcessionDocNo).HasMaxLength(50);

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.SharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShareValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Reserv)
                    .WithMany(p => p.ProjReserveUnitOwners)
                    .HasForeignKey(d => d.ReservId)
                    .HasConstraintName("FK_Proj_ReserveUnitOwners_Proj_UnitReservation");
            });

            modelBuilder.Entity<ProjReserveUnitSellers>(entity =>
            {
                entity.HasKey(e => e.ReservSellerId);

                entity.ToTable("Proj_ReserveUnitSellers");

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.SharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShareValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Reserv)
                    .WithMany(p => p.ProjReserveUnitSellers)
                    .HasForeignKey(d => d.ReservId)
                    .HasConstraintName("FK_Proj_ReserveUnitSellers_Proj_UnitReservation");
            });

            modelBuilder.Entity<ProjTenderContract>(entity =>
            {
                entity.HasKey(e => e.TenderContractId)
                    .HasName("PK_Proj_TenderSituation");

                entity.ToTable("Proj_TenderContract");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DownPayment).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DownPaymentPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinalDeliverDate1).HasColumnType("smalldatetime");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderContractAdds>(entity =>
            {
                entity.HasKey(e => e.TenderContractAddId);

                entity.ToTable("Proj_TenderContractAdds");

                entity.Property(e => e.AddPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.PercentNum).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.TenderContract)
                    .WithMany(p => p.ProjTenderContractAdds)
                    .HasForeignKey(d => d.TenderContractId)
                    .HasConstraintName("FK_Proj_TenderContractAdds_Proj_TenderContract");
            });

            modelBuilder.Entity<ProjTenderContractDetail>(entity =>
            {
                entity.HasKey(e => e.TenderContractDetailId);

                entity.ToTable("Proj_TenderContractDetail");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.ItemStatusDesc).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.TenderContract)
                    .WithMany(p => p.ProjTenderContractDetail)
                    .HasForeignKey(d => d.TenderContractId)
                    .HasConstraintName("FK_Proj_TenderContractDetail_Proj_TenderContract");
            });

            modelBuilder.Entity<ProjTenderContractDiscounts>(entity =>
            {
                entity.HasKey(e => e.TenderContractDiscId);

                entity.ToTable("Proj_TenderContractDiscounts");

                entity.Property(e => e.CurrentPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.TenderContract)
                    .WithMany(p => p.ProjTenderContractDiscounts)
                    .HasForeignKey(d => d.TenderContractId)
                    .HasConstraintName("FK_Proj_TenderContractDiscounts_Proj_TenderContract");
            });

            modelBuilder.Entity<ProjTenderContractorContract>(entity =>
            {
                entity.HasKey(e => e.ContractorContractId);

                entity.ToTable("Proj_TenderContractorContract");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.ConsultAgreeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomerAgreeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DownPayment).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DownPaymentPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinalDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderContractorContractAdds>(entity =>
            {
                entity.HasKey(e => e.ContractorContractAddId);

                entity.ToTable("Proj_TenderContractorContractAdds");

                entity.Property(e => e.AddPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrentPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ContractorContract)
                    .WithMany(p => p.ProjTenderContractorContractAdds)
                    .HasForeignKey(d => d.ContractorContractId)
                    .HasConstraintName("FK_Proj_TenderContractorContractAdds_Proj_TenderContractorContract");
            });

            modelBuilder.Entity<ProjTenderContractorContractDetails>(entity =>
            {
                entity.HasKey(e => e.ContractorContractDetailId);

                entity.ToTable("Proj_TenderContractorContractDetails");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.ItemStatusDesc).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ContractorContract)
                    .WithMany(p => p.ProjTenderContractorContractDetails)
                    .HasForeignKey(d => d.ContractorContractId)
                    .HasConstraintName("FK_Proj_TenderContractorContractDetails_Proj_TenderContractorContract");
            });

            modelBuilder.Entity<ProjTenderContractorContractDiscounts>(entity =>
            {
                entity.HasKey(e => e.ContractorContractDiscId);

                entity.ToTable("Proj_TenderContractorContractDiscounts");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.PercentNum).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.ContractorContract)
                    .WithMany(p => p.ProjTenderContractorContractDiscounts)
                    .HasForeignKey(d => d.ContractorContractId)
                    .HasConstraintName("FK_Proj_TenderContractorContractDiscounts_Proj_TenderContractorContract");
            });

            modelBuilder.Entity<ProjTenderContractorExitract>(entity =>
            {
                entity.HasKey(e => e.ContractorExitractId);

                entity.ToTable("Proj_TenderContractorExitract");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.ConsultAgreeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContractorHelpAccType).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomerAgreeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinalDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.OwnerHelpAccType).HasMaxLength(50);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderContractorExitractAdds>(entity =>
            {
                entity.HasKey(e => e.ContractorExitractAddId);

                entity.ToTable("Proj_TenderContractorExitractAdds");

                entity.Property(e => e.AddPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.PreviousValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ContractorExitract)
                    .WithMany(p => p.ProjTenderContractorExitractAdds)
                    .HasForeignKey(d => d.ContractorExitractId)
                    .HasConstraintName("FK_Proj_TenderContractorExitractAdds_Proj_TenderContractorExitract");
            });

            modelBuilder.Entity<ProjTenderContractorExitractDetail>(entity =>
            {
                entity.HasKey(e => e.ContractorExitractDetailId);

                entity.ToTable("Proj_TenderContractorExitractDetail");

                entity.Property(e => e.ContractQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrentQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DistQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrevReturn).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PreviousRais).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RaisBeforPrevReturn).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RaisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RaisValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemainQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TenderCat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderItemPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderTotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPriceDist).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSubDist).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ContractorExitract)
                    .WithMany(p => p.ProjTenderContractorExitractDetail)
                    .HasForeignKey(d => d.ContractorExitractId)
                    .HasConstraintName("FK_Proj_TenderContractorExitractDetail_Proj_TenderContractorExitract");
            });

            modelBuilder.Entity<ProjTenderContractorExitractDiscounts>(entity =>
            {
                entity.HasKey(e => e.ContractorExitractDiscId);

                entity.ToTable("Proj_TenderContractorExitractDiscounts");

                entity.Property(e => e.AccomulativePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccomulativeValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.PreviousValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.ContractorExitract)
                    .WithMany(p => p.ProjTenderContractorExitractDiscounts)
                    .HasForeignKey(d => d.ContractorExitractId)
                    .HasConstraintName("FK_Proj_TenderContractorExitractDiscounts_Proj_TenderContractorExitract");
            });

            modelBuilder.Entity<ProjTenderExecutionExitract>(entity =>
            {
                entity.HasKey(e => e.ExecutExitractId);

                entity.ToTable("Proj_TenderExecutionExitract");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinalDeliverDate1).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderExecutionExitractDetail>(entity =>
            {
                entity.HasKey(e => e.ExecutExitractDetailId);

                entity.ToTable("Proj_TenderExecutionExitractDetail");

                entity.Property(e => e.CurrentQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DistQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TenderCat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderItemPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderTotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPriceDist).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSubDist).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSubItem).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkPercent).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ExecutExitract)
                    .WithMany(p => p.ProjTenderExecutionExitractDetail)
                    .HasForeignKey(d => d.ExecutExitractId)
                    .HasConstraintName("FK_Proj_TenderExecutionExitractDetail_Proj_TenderExecutionExitract");
            });

            modelBuilder.Entity<ProjTenderItems>(entity =>
            {
                entity.HasKey(e => e.TenderItemId);

                entity.ToTable("Proj_TenderItems");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(500);

                entity.Property(e => e.RemarksE).HasMaxLength(500);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderItemsCategory>(entity =>
            {
                entity.HasKey(e => e.TenderItemCateId);

                entity.ToTable("Proj_TenderItemsCategory");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(500);

                entity.Property(e => e.RemarksE).HasMaxLength(500);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderOffer>(entity =>
            {
                entity.HasKey(e => e.TenderOfferId);

                entity.ToTable("Proj_TenderOffer");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderOfferDetail>(entity =>
            {
                entity.HasKey(e => e.TenderOfferDetailId);

                entity.ToTable("Proj_TenderOfferDetail");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.ItemStatusDesc).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.TenderOffer)
                    .WithMany(p => p.ProjTenderOfferDetail)
                    .HasForeignKey(d => d.TenderOfferId)
                    .HasConstraintName("FK_Proj_TenderOfferDetail_Proj_TenderOffer");
            });

            modelBuilder.Entity<ProjTenderOwnerExitract>(entity =>
            {
                entity.HasKey(e => e.OwnerExitractId);

                entity.ToTable("Proj_TenderOwnerExitract");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.ConsultAgreeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomerAgreeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinalDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderOwnerExitractAdds>(entity =>
            {
                entity.HasKey(e => e.OwnerExitractAddId);

                entity.ToTable("Proj_TenderOwnerExitractAdds");

                entity.Property(e => e.AddPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.PreviousValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.OwnerExitract)
                    .WithMany(p => p.ProjTenderOwnerExitractAdds)
                    .HasForeignKey(d => d.OwnerExitractId)
                    .HasConstraintName("FK_Proj_TenderOwnerExitractAdds_Proj_TenderOwnerExitract");
            });

            modelBuilder.Entity<ProjTenderOwnerExitractDetail>(entity =>
            {
                entity.HasKey(e => e.OwnerExitractDetailId);

                entity.ToTable("Proj_TenderOwnerExitractDetail");

                entity.Property(e => e.ContractQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrentQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DistQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PrevQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrevReturn).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PreviousRais).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RaisBeforPrevReturn).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RaisPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RaisValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TenderCat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderItemPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderTotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPriceDist).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSubDist).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WorkValue).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.OwnerExitract)
                    .WithMany(p => p.ProjTenderOwnerExitractDetail)
                    .HasForeignKey(d => d.OwnerExitractId)
                    .HasConstraintName("FK_Proj_TenderOwnerExitractDetail_Proj_TenderOwnerExitract");
            });

            modelBuilder.Entity<ProjTenderOwnerExitractDiscounts>(entity =>
            {
                entity.HasKey(e => e.OwnerExitractDiscId);

                entity.ToTable("Proj_TenderOwnerExitractDiscounts");

                entity.Property(e => e.AccomulativePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccomulativeValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.PreviousValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.OwnerExitract)
                    .WithMany(p => p.ProjTenderOwnerExitractDiscounts)
                    .HasForeignKey(d => d.OwnerExitractId)
                    .HasConstraintName("FK_Proj_TenderOwnerExitractDiscounts_Proj_TenderOwnerExitract");
            });

            modelBuilder.Entity<ProjTenderPlan>(entity =>
            {
                entity.HasKey(e => e.TenderPlanId);

                entity.ToTable("Proj_TenderPlan");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinalDeliverDate1).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderPlanDetails>(entity =>
            {
                entity.HasKey(e => e.TenderPlanDetailId);

                entity.ToTable("Proj_TenderPlanDetails");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.TenderPlan)
                    .WithMany(p => p.ProjTenderPlanDetails)
                    .HasForeignKey(d => d.TenderPlanId)
                    .HasConstraintName("FK_Proj_TenderPlanDetails_Proj_TenderPlan");
            });

            modelBuilder.Entity<ProjTenderPlanDistribution>(entity =>
            {
                entity.HasKey(e => e.TenderPlanDistId);

                entity.ToTable("Proj_TenderPlanDistribution");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinalDeliverDate1).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderPlanDistributionDetails>(entity =>
            {
                entity.HasKey(e => e.TenderPlanJoinId);

                entity.ToTable("Proj_TenderPlanDistributionDetails");

                entity.Property(e => e.EstimateDeliverDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.TenderPlanDist)
                    .WithMany(p => p.ProjTenderPlanDistributionDetails)
                    .HasForeignKey(d => d.TenderPlanDistId)
                    .HasConstraintName("FK_Proj_TenderPlanDistributionDetails_Proj_TenderPlanDistribution");
            });

            modelBuilder.Entity<ProjTenderQoutation>(entity =>
            {
                entity.HasKey(e => e.TenderQoutationId);

                entity.ToTable("Proj_TenderQoutation");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTenderQoutationDetails>(entity =>
            {
                entity.HasKey(e => e.TenderQoutDetailId);

                entity.ToTable("Proj_TenderQoutationDetails");

                entity.Property(e => e.AnalyzCat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AnalyzQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AnalyzTotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AnalyzTotalQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AnalyzTotalUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.ItemStatusDesc).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.Property(e => e.TenderCat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TenderTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfit).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.TenderQoutation)
                    .WithMany(p => p.ProjTenderQoutationDetails)
                    .HasForeignKey(d => d.TenderQoutationId)
                    .HasConstraintName("FK_Proj_TenderQoutationDetails_Proj_TenderQoutation");
            });

            modelBuilder.Entity<ProjTenders>(entity =>
            {
                entity.HasKey(e => e.TenderId);

                entity.ToTable("Proj_Tenders");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.ConsultantType).HasComment("1 Account,2 Customer,3 Vendor, 4 Employee, 5 BusinessPartner");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.OwnerType).HasComment("1 Account,2 Customer,3 Vendor, 4 Employee, 5 BusinessPartner");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PmType).HasComment("1 Account,2 Customer,3 Vendor, 4 Employee, 5 BusinessPartner");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjTendersDetails>(entity =>
            {
                entity.HasKey(e => e.TenderDetailId);

                entity.ToTable("Proj_TendersDetails");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.ItemStatusDesc).HasMaxLength(100);

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.Remarks4).HasMaxLength(200);

                entity.HasOne(d => d.Tender)
                    .WithMany(p => p.ProjTendersDetails)
                    .HasForeignKey(d => d.TenderId)
                    .HasConstraintName("FK_Proj_TendersDetails_Proj_Tenders");
            });

            modelBuilder.Entity<ProjTendersReviewReasons>(entity =>
            {
                entity.HasKey(e => e.ReviewReasonId);

                entity.ToTable("Proj_TendersReviewReasons");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(500);

                entity.Property(e => e.RemarksE).HasMaxLength(500);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjUnitConcession>(entity =>
            {
                entity.HasKey(e => e.UnitConcessionId);

                entity.ToTable("Proj_UnitConcession");

                entity.Property(e => e.ActualSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commission).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ConcessionFee).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaidInstallments).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidBeforeConcession).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjUnitHistoryLog>(entity =>
            {
                entity.HasKey(e => e.ProjUnitHistoryId);

                entity.ToTable("Proj_UnitHistoryLog");

                entity.Property(e => e.LogActionDesc).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.TableEntityIdName).HasMaxLength(50);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ProjUnitReplacement>(entity =>
            {
                entity.HasKey(e => e.UnitReplacId);

                entity.ToTable("Proj_UnitReplacement");

                entity.Property(e => e.ActualSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DepositVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.NewInstallVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OldActualSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalNotPaidInstallVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjUnitReservation>(entity =>
            {
                entity.HasKey(e => e.ReservId);

                entity.ToTable("Proj_UnitReservation");

                entity.Property(e => e.ActualSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CommissionPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CommissionValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ContractDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CustomerBalace).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FeesPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FeesValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FinishMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FinishValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LeavePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LeaveValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaidInstallments).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RoundType)
                    .HasDefaultValueSql("((0))")
                    .HasComment("0 without,1=10,2=100,3=1000,4=10000");

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalInstallments).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalUnitArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitMeterPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<ProjUnitReservationGuarantors>(entity =>
            {
                entity.HasKey(e => e.GuarantorId);

                entity.ToTable("Proj_UnitReservationGuarantors");

                entity.Property(e => e.Bank1).HasMaxLength(100);

                entity.Property(e => e.Bank2).HasMaxLength(50);

                entity.Property(e => e.Bank3).HasMaxLength(50);

                entity.Property(e => e.BankAccNo1).HasMaxLength(50);

                entity.Property(e => e.BankAccNo2).HasMaxLength(50);

                entity.Property(e => e.BankAccNo3).HasMaxLength(50);

                entity.Property(e => e.ContactAddress1).HasMaxLength(100);

                entity.Property(e => e.ContactAddress2).HasMaxLength(100);

                entity.Property(e => e.ContactAddress3).HasMaxLength(100);

                entity.Property(e => e.ContactCode).HasMaxLength(50);

                entity.Property(e => e.ContactEmail1).HasMaxLength(100);

                entity.Property(e => e.ContactEmail2).HasMaxLength(100);

                entity.Property(e => e.ContactEmail3).HasMaxLength(100);

                entity.Property(e => e.ContactName1).HasMaxLength(100);

                entity.Property(e => e.ContactName2).HasMaxLength(100);

                entity.Property(e => e.ContactPhone1).HasMaxLength(30);

                entity.Property(e => e.ContactPhone2).HasMaxLength(30);

                entity.Property(e => e.ContactPhone3).HasMaxLength(30);

                entity.Property(e => e.ContactPhone4).HasMaxLength(30);

                entity.Property(e => e.ContactPhone5).HasMaxLength(30);

                entity.Property(e => e.Idno)
                    .HasColumnName("IDNo")
                    .HasMaxLength(20);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.Remark1).HasMaxLength(200);

                entity.Property(e => e.Remark2).HasMaxLength(200);

                entity.HasOne(d => d.Reserv)
                    .WithMany(p => p.ProjUnitReservationGuarantors)
                    .HasForeignKey(d => d.ReservId)
                    .HasConstraintName("FK_Proj_UnitReservationGuarantors_Proj_UnitReservation");
            });

            modelBuilder.Entity<PurInvVendSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurInvVendSearch");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurOrderDocTrNo).HasMaxLength(151);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode).HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<PurOrderVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurOrderVendor");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<PurRequestVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurRequestVendor");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<QualityCategories>(entity =>
            {
                entity.HasKey(e => e.QualityCatId)
                    .HasName("PK_Prod_QualityCategory");

                entity.ToTable("Quality_Categories");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DamagDegree).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<QualityItemDeliverDetails>(entity =>
            {
                entity.HasKey(e => e.ItemDeliverDetailId);

                entity.ToTable("Quality_ItemDeliverDetails");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.DoublCheckQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DoublCheckQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DoubleCleanQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.MissedMachinQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MissedMachinQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MissedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MissedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalCleanQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceDoubleClean).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceNormal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RejectedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RejectedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.ReturnQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReturnQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDoubleClean).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalNormal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemDeliver)
                    .WithMany(p => p.QualityItemDeliverDetails)
                    .HasForeignKey(d => d.ItemDeliverId)
                    .HasConstraintName("FK_Quality_ItemDeliverDetails_Quality_ItemDelivery");
            });

            modelBuilder.Entity<QualityItemDelivery>(entity =>
            {
                entity.HasKey(e => e.ItemDeliverId);

                entity.ToTable("Quality_ItemDelivery");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocBarCode).HasMaxLength(200);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<QualityItemDeliveryPackages>(entity =>
            {
                entity.HasKey(e => e.ItemDeliceryPackId);

                entity.ToTable("Quality_ItemDeliveryPackages");

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.HasOne(d => d.ItemDeliver)
                    .WithMany(p => p.QualityItemDeliveryPackages)
                    .HasForeignKey(d => d.ItemDeliverId)
                    .HasConstraintName("FK_Quality_ItemDeliveryPackages_Quality_ItemDelivery");
            });

            modelBuilder.Entity<QualityItemRecCheck>(entity =>
            {
                entity.HasKey(e => e.ItemRecQualityId)
                    .HasName("PK_prod_ItemRecQualityCheck");

                entity.ToTable("Quality_ItemRecCheck");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocBarCode).HasMaxLength(200);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<QualityItemRecCheckDetail>(entity =>
            {
                entity.HasKey(e => e.ItemRecQualityDetailId);

                entity.ToTable("Quality_ItemRecCheckDetail");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.DoublCheckQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DoublCheckQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.MissedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MissedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NormalQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceDoubleClean).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceNormal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RejectedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RejectedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.TotalDoubleClean).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalNormal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ItemRecQuality)
                    .WithMany(p => p.QualityItemRecCheckDetail)
                    .HasForeignKey(d => d.ItemRecQualityId)
                    .HasConstraintName("FK_Quality_ItemRecCheckDetail_Quality_ItemRecCheck");
            });

            modelBuilder.Entity<QualityItemRecPackages>(entity =>
            {
                entity.HasKey(e => e.ItemRecPackId);

                entity.ToTable("Quality_ItemRecPackages");

                entity.Property(e => e.Code).HasMaxLength(200);

                entity.HasOne(d => d.ItemRecQuality)
                    .WithMany(p => p.QualityItemRecPackages)
                    .HasForeignKey(d => d.ItemRecQualityId)
                    .HasConstraintName("FK_Quality_ItemRecPackages_Quality_ItemRecCheck");

                entity.HasOne(d => d.WorkOrder)
                    .WithMany(p => p.QualityItemRecPackages)
                    .HasForeignKey(d => d.WorkOrderId)
                    .HasConstraintName("FK_Quality_ItemRecPackages_Prod_WorkOrder");
            });

            modelBuilder.Entity<QualityItemReceivTypes>(entity =>
            {
                entity.HasKey(e => e.ItemRecTypeId)
                    .HasName("PK_Prod_ItemReceivTypes");

                entity.ToTable("Quality_ItemReceivTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<QualityItemRecieve>(entity =>
            {
                entity.HasKey(e => e.ProdItemRecId)
                    .HasName("PK_Prod_ItemRecieve");

                entity.ToTable("Quality_ItemRecieve");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<QualityItemRecieveDetails>(entity =>
            {
                entity.HasKey(e => e.ProdItemRecDetailId)
                    .HasName("PK_Prod_ItemRecieveDetails");

                entity.ToTable("Quality_ItemRecieveDetails");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.ExecutedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExecutedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCardDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCardDescE).HasMaxLength(100);

                entity.Property(e => e.MissedQtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MissedQuantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.ProdItemRec)
                    .WithMany(p => p.QualityItemRecieveDetails)
                    .HasForeignKey(d => d.ProdItemRecId)
                    .HasConstraintName("FK_Prod_ItemRecieveDetails_Prod_ItemRecieve");
            });

            modelBuilder.Entity<ReciNotSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReciNotSearch");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.BankAccNumber).HasMaxLength(50);

                entity.Property(e => e.BankNoticeTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.BoxCode).HasMaxLength(50);

                entity.Property(e => e.Cc).HasColumnName("cc");

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.ClientAccNo).HasMaxLength(100);

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(200);

                entity.Property(e => e.CustomerDescE).HasMaxLength(200);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.Desca)
                    .HasColumnName("DESCA")
                    .HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.KeeperTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Value1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value10BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value1BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value2BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value3BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value4BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value5BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value6BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value7BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value8BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Value9BeforeRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<RepairJobOrder>(entity =>
            {
                entity.HasKey(e => e.RepairId);

                entity.ToTable("Repair_JobOrder");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.IsClosed).HasComment("True Closed ;  False  Not Closed");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.Supervisor).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeToLeav).HasColumnType("smalldatetime");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VehicleId).HasComment("ItemCardId");
            });

            modelBuilder.Entity<RepairJobOrderComments>(entity =>
            {
                entity.HasKey(e => e.RepairCommentsId);

                entity.ToTable("Repair_JobOrderComments");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.HasOne(d => d.Repair)
                    .WithMany(p => p.RepairJobOrderComments)
                    .HasForeignKey(d => d.RepairId)
                    .HasConstraintName("FK_Repair_JobOrderComments_Repair_JobOrder");
            });

            modelBuilder.Entity<RepairJobOrderEmps>(entity =>
            {
                entity.HasKey(e => e.RepairEmpId);

                entity.ToTable("Repair_JobOrderEmps");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OtherCost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.ServiceValue).HasColumnType("decimal(25, 3)");

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Repair)
                    .WithMany(p => p.RepairJobOrderEmps)
                    .HasForeignKey(d => d.RepairId)
                    .HasConstraintName("FK_Repair_JobOrderEmps_Repair_JobOrder");
            });

            modelBuilder.Entity<RepairJobOrderItems>(entity =>
            {
                entity.HasKey(e => e.RepairItemsId);

                entity.ToTable("Repair_JobOrderItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RequestedMeter).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Repair)
                    .WithMany(p => p.RepairJobOrderItems)
                    .HasForeignKey(d => d.RepairId)
                    .HasConstraintName("FK_Repair_JobOrderItems_Repair_JobOrder");
            });

            modelBuilder.Entity<RepairJobOrderScrapItems>(entity =>
            {
                entity.HasKey(e => e.RepairScrapItemId);

                entity.ToTable("Repair_JobOrderScrapItems");

                entity.Property(e => e.BarCode).HasMaxLength(60);

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BatchNumberFifoOrLifo).HasMaxLength(20);

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverageUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FifocostUnit)
                    .HasColumnName("FIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostUnit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LifocostUnit)
                    .HasColumnName("LIFOCostUnit")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceAfterRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PriceEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitRateEstimat).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Repair)
                    .WithMany(p => p.RepairJobOrderScrapItems)
                    .HasForeignKey(d => d.RepairId)
                    .HasConstraintName("FK_Repair_JobOrderScrapItems_Repair_JobOrder");
            });

            modelBuilder.Entity<RepairJobOrederExpenses>(entity =>
            {
                entity.HasKey(e => e.RepairExpensesId);

                entity.ToTable("Repair_JobOrederExpenses");

                entity.Property(e => e.BitOnClient).HasColumnName("bitOnClient");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ExpensValue).HasColumnType("decimal(25, 3)");

                entity.Property(e => e.Hours).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Minutes).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Months).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TimeBeforFormat).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TimeUnit).HasComment("1 Minutes, 2 Hours,3 Days, 4 Months");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Repair)
                    .WithMany(p => p.RepairJobOrederExpenses)
                    .HasForeignKey(d => d.RepairId)
                    .HasConstraintName("FK_Repair_JobOrederExpenses_Repair_JobOrder");
            });

            modelBuilder.Entity<RetPurVendSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("retPurVendSearch");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DocTrNoPurchasInv).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode).HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<RetSaleSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("retSaleSearch");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesInvDocTrNo).HasMaxLength(151);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ReturnSalesReqSearch>(entity =>
            {
                entity.HasNoKey();

            });

          modelBuilder.Entity<SalesInvCustSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesInvCustSearch");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustBranchName1).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Desc1).HasMaxLength(250);

                entity.Property(e => e.Desc2).HasMaxLength(250);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodDatafield).HasMaxLength(250);

                entity.Property(e => e.PayMethodPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PayMethodValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.SalesOfferDocTrNo).HasMaxLength(151);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SalesOfferCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOfferCust");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SalesOrderCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderCust");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchAdjustMent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchAdjustMent");

                entity.Property(e => e.AdjustSourceName).HasMaxLength(100);

                entity.Property(e => e.AdjustSourceType)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.AdjustType)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SearchAssetSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchAssetSettings");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchAssetTermination>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchAssetTermination");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.AssetCode).HasMaxLength(50);

                entity.Property(e => e.CatCode).HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.DeprValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.LastDeprDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchAttendanceDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchAttendanceDoc");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PeriodName1).HasMaxLength(100);

                entity.Property(e => e.PeriodName2).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.SubPeriodCode).HasMaxLength(50);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalVacsDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalVacsHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchBankNotice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchBankNotice");

                entity.Property(e => e.BankExpenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Cc)
                    .IsRequired()
                    .HasColumnName("cc")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cc2)
                    .IsRequired()
                    .HasColumnName("cc2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.CollectDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KeeperDocTrNo).HasMaxLength(151);

                entity.Property(e => e.KeeperNo).HasMaxLength(100);

                entity.Property(e => e.PaderDire)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RecDocTrNo).HasMaxLength(151);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.ReturnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalCheques).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TranTypeDesc)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TransferredAte).HasColumnType("smalldatetime");

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SearchBoxTransferNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchBoxTransferNote");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.StrCustm1)
                    .HasColumnName("strCustm1")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm2)
                    .HasColumnName("strCustm2")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchDeliveRetVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchDeliveRetVend");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<SearchDepreciationDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchDepreciationDoc");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EndingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinancialIntervalCode).HasMaxLength(20);

                entity.Property(e => e.FinancialYearNameA).HasMaxLength(100);

                entity.Property(e => e.FinancialYearNameE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.MonthNameA).HasMaxLength(50);

                entity.Property(e => e.MonthNameE).HasMaxLength(50);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.StartingFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalDeprVal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchEmpActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchEmpActivity");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PeriodName1).HasMaxLength(100);

                entity.Property(e => e.PeriodName2).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.SubPeriodCode).HasMaxLength(50);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalVacsDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalVacsHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkDays).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchEmpDocuments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchEmpDocuments");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchEmpLoanRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchEmpLoanRequest");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpLoanBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.InstallmentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.LastInstallmentValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LoanValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchEmpMovePromotion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchEmpMovePromotion");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NewTitle).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchEmpVacation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchEmpVacation");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchItemStockAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchItemStockAdjustment");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PartCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PartDescA).HasMaxLength(100);

                entity.Property(e => e.PartDescE).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.StockTotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StoreCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchJobOrderEmpCostDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchJobOrderEmpCostDoc");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.JobOrderDocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchJobOrderEquipCostDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchJobOrderEquipCostDoc");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.JobOrderDocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchJurnalEntry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchJurnalEntry");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.JurnalDesc).HasMaxLength(200);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchKeepers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchKeepers");

                entity.Property(e => e.BankDesc).HasMaxLength(100);

                entity.Property(e => e.Cc)
                    .IsRequired()
                    .HasColumnName("cc")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Cc2)
                    .IsRequired()
                    .HasColumnName("cc2")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.ClientAccNo).HasMaxLength(100);

                entity.Property(e => e.CollectDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.KeeperNo).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RecTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RecTrNo).HasMaxLength(151);

                entity.Property(e => e.ReturnDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchLeavPermissionRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchLeavPermissionRequest");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.HoursCount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchLeavePermision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchLeavePermision");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FromTime).HasColumnType("smalldatetime");

                entity.Property(e => e.HoursCount).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.ToTime).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchPassPorts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchPassPorts");

                entity.Property(e => e.AcceptAgeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptAgeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CityCode).HasMaxLength(50);

                entity.Property(e => e.CityName).HasMaxLength(100);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CompCode).HasMaxLength(50);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmbassyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FirmName).HasMaxLength(100);

                entity.Property(e => e.FirmOwnerName).HasMaxLength(100);

                entity.Property(e => e.FullName).HasMaxLength(200);

                entity.Property(e => e.FullNameen).HasMaxLength(200);

                entity.Property(e => e.IdexpiryDate)
                    .HasColumnName("IDExpiryDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdissueDate)
                    .HasColumnName("IDIssueDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idmage1)
                    .HasColumnName("IDmage1")
                    .HasMaxLength(300);

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(50);

                entity.Property(e => e.Name2).HasMaxLength(50);

                entity.Property(e => e.Name2en).HasMaxLength(50);

                entity.Property(e => e.Name3).HasMaxLength(50);

                entity.Property(e => e.Name3en).HasMaxLength(50);

                entity.Property(e => e.Name4).HasMaxLength(50);

                entity.Property(e => e.Name4en).HasMaxLength(50);

                entity.Property(e => e.Name5).HasMaxLength(50);

                entity.Property(e => e.Name6).HasMaxLength(50);

                entity.Property(e => e.Name6en).HasMaxLength(50);

                entity.Property(e => e.Name7).HasMaxLength(50);

                entity.Property(e => e.Name7en).HasMaxLength(50);

                entity.Property(e => e.Nameen).HasMaxLength(50);

                entity.Property(e => e.PassOwnerId).HasMaxLength(50);

                entity.Property(e => e.PassPortExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.PassPortImage).HasMaxLength(300);

                entity.Property(e => e.PassportExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassportIssuePlace).HasMaxLength(100);

                entity.Property(e => e.PassportNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone1).HasMaxLength(20);

                entity.Property(e => e.Phone2).HasMaxLength(20);

                entity.Property(e => e.Phone3).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SeasonCode).HasMaxLength(50);

                entity.Property(e => e.SeasonName1).HasMaxLength(100);

                entity.Property(e => e.SeasonName2).HasMaxLength(100);

                entity.Property(e => e.TaxRefNo).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");
            });

            modelBuilder.Entity<SearchPettycash>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchPettycash");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalFilteredPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchPrintPricing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchPrintPricing");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CutterHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CutterWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.Forms).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.GofferMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InOrderWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemBatchCode).HasMaxLength(250);

                entity.Property(e => e.ItemBatchName1).HasMaxLength(500);

                entity.Property(e => e.ItemBatchName2).HasMaxLength(500);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(200);

                entity.Property(e => e.ItemDescE).HasMaxLength(200);

                entity.Property(e => e.ItemPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.OutOrderHeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OutOrderLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OutOrderWidth).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OuterBoxesCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Palets).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PartsBySheet).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PartsCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PurpuraMetricLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalLength).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrepare).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProfit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSales).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Transportation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Zincs).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SearchPrintQoutation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchPrintQoutation");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.OuterBoxesCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PartsCount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchProductionOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchProductionOrder");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnitNameE).HasMaxLength(100);

                entity.Property(e => e.UnittRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SearchReqOfQoutation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchReqOfQoutation");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.AnalyticalCode).HasMaxLength(50);

                entity.Property(e => e.AnalyticalCodeName1).HasMaxLength(100);

                entity.Property(e => e.AnalyticalCodeName2).HasMaxLength(100);

                entity.Property(e => e.Commodity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.Equipment).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PortOfDischarge).HasMaxLength(200);

                entity.Property(e => e.PortOfLoading).HasMaxLength(200);

                entity.Property(e => e.Recommendation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.Shipper).HasMaxLength(150);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TargetRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TruckingFrom).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TruckingTo).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Volume).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SearchRewardAndPenalty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchRewardAndPenalty");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.ExecutDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Jcode).HasColumnName("JCode");

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.SalaryCode).HasMaxLength(50);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchSalaryIssueDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchSalaryIssueDoc");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.NetValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.SubPeriodCode).HasMaxLength(50);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchSalesOfferRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchSalesOfferRequest");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchServiceRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchServiceRequest");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.AnalyticalCode).HasMaxLength(50);

                entity.Property(e => e.AnalyticalCodeName1).HasMaxLength(100);

                entity.Property(e => e.AnalyticalCodeName2).HasMaxLength(100);

                entity.Property(e => e.BrandName).HasMaxLength(100);

                entity.Property(e => e.CapcityDescA).HasMaxLength(100);

                entity.Property(e => e.CityName).HasMaxLength(100);

                entity.Property(e => e.CloseReason).HasMaxLength(200);

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.MaintenanceTypeName).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.ModelNo).HasMaxLength(50);

                entity.Property(e => e.ProductsTypeName).HasMaxLength(100);

                entity.Property(e => e.QoutationPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RegionNameA).HasMaxLength(100);

                entity.Property(e => e.ReqResourceName).HasMaxLength(100);

                entity.Property(e => e.SerialNo1).HasMaxLength(100);

                entity.Property(e => e.SerialNo2).HasMaxLength(100);

                entity.Property(e => e.Size).HasMaxLength(50);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VistitDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WarrantyEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Wname1)
                    .HasColumnName("WName1")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SearchShippingDeclaration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchShippingDeclaration");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AnalyticalCode).HasMaxLength(50);

                entity.Property(e => e.AnalyticalCodeName1).HasMaxLength(100);

                entity.Property(e => e.AnalyticalCodeName2).HasMaxLength(100);

                entity.Property(e => e.BillOfLading).HasMaxLength(200);

                entity.Property(e => e.Consignee).HasMaxLength(150);

                entity.Property(e => e.ContainersDry)
                    .HasColumnName("ContainersDRY")
                    .HasMaxLength(200);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.FreightPayableAt).HasMaxLength(200);

                entity.Property(e => e.GrossWeightTons).HasMaxLength(200);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetWeightTons).HasMaxLength(200);

                entity.Property(e => e.PortOfDischarge).HasMaxLength(200);

                entity.Property(e => e.PortOfLoading).HasMaxLength(200);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.ReqOfQoutationDocTrNo).HasMaxLength(151);

                entity.Property(e => e.ReqOfQoutationTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Shipper).HasMaxLength(150);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VesselName).HasMaxLength(150);
            });

            modelBuilder.Entity<SearchStockTransferNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchStockTransferNote");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PartitionFrom).HasMaxLength(100);

                entity.Property(e => e.PartitionTo).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchStockTransferNoteRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchStockTransferNoteRequest");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PartitionFrom).HasMaxLength(100);

                entity.Property(e => e.PartitionTo).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchTermination>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchTermination");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.ServiceEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchTrips>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchTrips");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.Agent).HasMaxLength(100);

                entity.Property(e => e.ApprovedBy).HasMaxLength(100);

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ArrivalTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ArrivedBy).HasMaxLength(100);

                entity.Property(e => e.CityCode).HasMaxLength(50);

                entity.Property(e => e.CityName).HasMaxLength(100);

                entity.Property(e => e.DeparturDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DeparturTime).HasColumnType("smalldatetime");

                entity.Property(e => e.DepartureBy).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Names).HasMaxLength(100);

                entity.Property(e => e.OperatorName).HasMaxLength(100);

                entity.Property(e => e.Others).HasMaxLength(255);

                entity.Property(e => e.Program).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TourGuideName).HasMaxLength(100);

                entity.Property(e => e.TourLeaderName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchVacationDoc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchVacationDoc");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchVacationEdit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchVacationEdit");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchVacationRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchVacationRequest");

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.FromDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.ToDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SearchVehicleJobOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchVehicleJobOrder");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.BodyNo).HasMaxLength(100);

                entity.Property(e => e.ContainerNo).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DriverCode).HasMaxLength(50);

                entity.Property(e => e.DriverLicense).HasMaxLength(30);

                entity.Property(e => e.DriverName1).HasMaxLength(100);

                entity.Property(e => e.DriverName2).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.EmpName2).HasMaxLength(100);

                entity.Property(e => e.GarageCode).HasMaxLength(100);

                entity.Property(e => e.GarageName1).HasMaxLength(100);

                entity.Property(e => e.GarageName2).HasMaxLength(100);

                entity.Property(e => e.LicenseDescription).HasMaxLength(30);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.RegNo).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.Supervisor).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TimeToLeav).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VehicleCode).HasMaxLength(100);

                entity.Property(e => e.VehicleJobOrderName1).HasMaxLength(200);

                entity.Property(e => e.VehicleJobOrderName2).HasMaxLength(200);

                entity.Property(e => e.VehicleName1).HasMaxLength(100);

                entity.Property(e => e.VehicleName2).HasMaxLength(100);

                entity.Property(e => e.VheicleJobOrderTypeName1).HasMaxLength(100);

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.Property(e => e.VorderTypeCode)
                    .HasColumnName("VOrderTypeCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SearchVehicleMovement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchVehicleMovement");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AnCode).HasMaxLength(50);

                entity.Property(e => e.AnName).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetTime).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode).HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);

                entity.Property(e => e.VendorDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<SearchVehicleRenalContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchVehicleRenalContract");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.BodyNo).HasMaxLength(100);

                entity.Property(e => e.ClosingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustId)
                    .HasColumnName("CustID")
                    .HasMaxLength(100);

                entity.Property(e => e.CustomerCarLicenseExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCarLicenseIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCarLicenseIssuePlace).HasMaxLength(50);

                entity.Property(e => e.CustomerCarLicenseNo).HasMaxLength(50);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDateOfBirth).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerPassPortIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerPassPortIssuePlace).HasMaxLength(50);

                entity.Property(e => e.CustomerPassPortNo).HasMaxLength(50);

                entity.Property(e => e.DayPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeliveryCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DriverCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DriverName1).HasMaxLength(100);

                entity.Property(e => e.DriverName2).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.ExpectedStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FirstDriverCode).HasMaxLength(50);

                entity.Property(e => e.FirstDriverDateOfBirth).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstDriverDriverLicense).HasMaxLength(30);

                entity.Property(e => e.FirstDriverId)
                    .HasColumnName("FirstDriverID")
                    .HasMaxLength(30);

                entity.Property(e => e.FirstDriverLicenseDescription).HasMaxLength(30);

                entity.Property(e => e.FirstDriverLicenseIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstDriverLicenseLegalPlaceas).HasMaxLength(255);

                entity.Property(e => e.FirstDriverLicenseRenewalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FuelCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FuelIn).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuelOut).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GetOutDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HotelCode).HasMaxLength(50);

                entity.Property(e => e.HotelName1).HasMaxLength(100);

                entity.Property(e => e.HotelName2).HasMaxLength(100);

                entity.Property(e => e.HotelRoom).HasMaxLength(50);

                entity.Property(e => e.InsuranceValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MaintenanceCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.MotorNo).HasMaxLength(100);

                entity.Property(e => e.Nationality).HasMaxLength(50);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OwnerAddress).HasMaxLength(100);

                entity.Property(e => e.OwnerName).HasMaxLength(100);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PassPort).HasMaxLength(100);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Profit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RealStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RegNo).HasMaxLength(100);

                entity.Property(e => e.SecondDriverCode).HasMaxLength(50);

                entity.Property(e => e.SecondDriverName1).HasMaxLength(100);

                entity.Property(e => e.SecondDriverName2).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.ThirdDriverCode).HasMaxLength(50);

                entity.Property(e => e.ThirdDriverName1).HasMaxLength(100);

                entity.Property(e => e.ThirdDriverName2).HasMaxLength(100);

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCostBeforeCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPaidReciept).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPayment).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPurchInv).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSalesInv).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Vat)
                    .HasColumnName("VAT")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VehicleCode).HasMaxLength(100);

                entity.Property(e => e.VehicleName1).HasMaxLength(100);

                entity.Property(e => e.VehicleName2).HasMaxLength(100);

                entity.Property(e => e.VisaAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VisaCode).HasMaxLength(10);

                entity.Property(e => e.VisaExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VisaNo).HasMaxLength(50);
            });

            modelBuilder.Entity<SearchWeightCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SearchWeightCard");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks1).HasMaxLength(500);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight1Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight2Date).HasColumnType("smalldatetime");

                entity.Property(e => e.WeightQty1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightQty2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightQtyDiff).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SrAccomodation>(entity =>
            {
                entity.HasKey(e => e.AccomodationId);

                entity.ToTable("Sr_Accomodation");

                entity.Property(e => e.AccomodationType).HasComment("1 RO,2 BB,3 HB,4 FB");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.SrAccomodation)
                    .HasForeignKey(d => d.HotelId)
                    .HasConstraintName("FK_Sr_Accomodation_Sr_Hotels");

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.SrAccomodation)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_Sr_Accomodation_Sr_Trips");
            });

            modelBuilder.Entity<SrBrands>(entity =>
            {
                entity.HasKey(e => e.BrandId);

                entity.ToTable("Sr_Brands");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrComplaints>(entity =>
            {
                entity.HasKey(e => e.ComId);

                entity.ToTable("Sr_Complaints");

                entity.Property(e => e.ComId).HasColumnName("ComID");

                entity.Property(e => e.Add1).HasMaxLength(50);

                entity.Property(e => e.ComCode).HasMaxLength(50);

                entity.Property(e => e.ComDesc).HasMaxLength(1000);

                entity.Property(e => e.ComName1).HasMaxLength(100);

                entity.Property(e => e.ComName2).HasMaxLength(100);

                entity.Property(e => e.ComSolution).HasMaxLength(1000);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrContainerTypes>(entity =>
            {
                entity.HasKey(e => e.ContainerTypeId);

                entity.ToTable("Sr_ContainerTypes");

                entity.Property(e => e.ContainerCode).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Height).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Length).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(254);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.UseDesc).HasMaxLength(1000);

                entity.Property(e => e.Weight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Width).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SrDrivers>(entity =>
            {
                entity.HasKey(e => e.DriverId);

                entity.ToTable("Sr_Drivers");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DateOfBirth).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DriverCode).HasMaxLength(50);

                entity.Property(e => e.DriverLicense).HasMaxLength(30);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(30);

                entity.Property(e => e.LicenseDescription).HasMaxLength(30);

                entity.Property(e => e.LicenseIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LicenseLegalPlace).HasMaxLength(255);

                entity.Property(e => e.LicenseRenewalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PassPort).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrEmpServicTypes>(entity =>
            {
                entity.HasKey(e => e.SrId);

                entity.ToTable("Sr_EmpServicTypes");

                entity.Property(e => e.SrId).HasColumnName("SR_ID");

                entity.Property(e => e.SrTypId).HasColumnName("SrTypID");

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.SrEmpServicTypes)
                    .HasForeignKey(d => d.EmpId)
                    .HasConstraintName("FK_Sr_EmpServicTypes_Hr_Employees");

                entity.HasOne(d => d.SrTyp)
                    .WithMany(p => p.SrEmpServicTypes)
                    .HasForeignKey(d => d.SrTypId)
                    .HasConstraintName("FK_Sr_EmpServicTypes_Sr_ServiceTypes");
            });

            modelBuilder.Entity<SrExtension>(entity =>
            {
                entity.HasKey(e => e.ExtensionId);

                entity.ToTable("Sr_Extension");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.Number).HasComment("single, double, Trible");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.SrExtension)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Sr_Extension_MSGA_City");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.SrExtension)
                    .HasForeignKey(d => d.HotelId)
                    .HasConstraintName("FK_Sr_Extension_Sr_Hotels");

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.SrExtension)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_Sr_Extension_Sr_Trips");
            });

            modelBuilder.Entity<SrFlateRate>(entity =>
            {
                entity.HasKey(e => e.FlatRateId);

                entity.ToTable("Sr_FlateRate");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.HourCostRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HourPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrFlight>(entity =>
            {
                entity.HasKey(e => e.FlightId);

                entity.ToTable("Sr_Flight");

                entity.Property(e => e.Arrival).HasColumnType("smalldatetime");

                entity.Property(e => e.CityIdfrom).HasColumnName("CityIDFrom");

                entity.Property(e => e.CityIdto).HasColumnName("CityIDTo");

                entity.Property(e => e.Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Departure).HasColumnType("smalldatetime");

                entity.Property(e => e.FlightCompany).HasMaxLength(100);

                entity.Property(e => e.PlaceFrom).HasMaxLength(100);

                entity.Property(e => e.PlaceTo).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.SrFlight)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_Sr_Flight_Sr_Trips");
            });

            modelBuilder.Entity<SrGarage>(entity =>
            {
                entity.HasKey(e => e.GarageId);

                entity.ToTable("Sr_Garage");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.GarageCode).HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrHarbors>(entity =>
            {
                entity.HasKey(e => e.HarborId);

                entity.ToTable("Sr_Harbors");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.HarborCode).HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(254);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrHotels>(entity =>
            {
                entity.HasKey(e => e.HotelId)
                    .HasName("PK_Sr_Hoterls");

                entity.ToTable("Sr_Hotels");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.Bbcost)
                    .HasColumnName("BBCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DoubleRoomCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Fbcost)
                    .HasColumnName("FBCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Hbcost)
                    .HasColumnName("HBCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HotelCode).HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.QuadRoomCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.RoomSingleCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RoomsWithWc).HasColumnName("RoomsWithWC");

                entity.Property(e => e.SpecialRoomCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SuitRoomCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SupportBb).HasColumnName("SupportBB");

                entity.Property(e => e.SupportFb).HasColumnName("SupportFB");

                entity.Property(e => e.SupportHb).HasColumnName("SupportHB");

                entity.Property(e => e.SupportRo).HasColumnName("SupportRO");

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.TribleRoomCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.SrHotels)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Sr_Hotels_MSGA_City");
            });

            modelBuilder.Entity<SrJobAdditionalCost>(entity =>
            {
                entity.HasKey(e => e.AddCostId);

                entity.ToTable("Sr_JobAdditionalCost");

                entity.Property(e => e.AdCostValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AddCostDesc).HasMaxLength(255);

                entity.HasOne(d => d.Jorder)
                    .WithMany(p => p.SrJobAdditionalCost)
                    .HasForeignKey(d => d.JorderId)
                    .HasConstraintName("FK_Sr_JobAdditionalCost_Sr_JobOrder");
            });

            modelBuilder.Entity<SrJobComments>(entity =>
            {
                entity.HasKey(e => e.JobComentId);

                entity.ToTable("Sr_JobComments");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.HasOne(d => d.Jorder)
                    .WithMany(p => p.SrJobComments)
                    .HasForeignKey(d => d.JorderId)
                    .HasConstraintName("FK_Sr_JobComments_Sr_JobOrder");
            });

            modelBuilder.Entity<SrJobExtrnalExpens>(entity =>
            {
                entity.HasKey(e => e.JobExpensId);

                entity.ToTable("Sr_JobExtrnalExpens");

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.Expdescription)
                    .HasColumnName("EXPDescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Expvalue)
                    .HasColumnName("EXPValue")
                    .HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalHours).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.Jorder)
                    .WithMany(p => p.SrJobExtrnalExpens)
                    .HasForeignKey(d => d.JorderId)
                    .HasConstraintName("FK_Sr_JobExtrnalExpens_Sr_JobOrder");
            });

            modelBuilder.Entity<SrJobFiles>(entity =>
            {
                entity.HasKey(e => e.FileId);

                entity.ToTable("Sr_JobFiles");

                entity.Property(e => e.Binary)
                    .HasColumnName("binary")
                    .HasMaxLength(4000)
                    .IsFixedLength();

                entity.Property(e => e.FileDesc).HasMaxLength(250);

                entity.Property(e => e.FileName).HasMaxLength(100);

                entity.Property(e => e.Image).HasColumnType("image");

                entity.HasOne(d => d.Jorder)
                    .WithMany(p => p.SrJobFiles)
                    .HasForeignKey(d => d.JorderId)
                    .HasConstraintName("FK_Sr_JobFiles_Sr_JobOrder");
            });

            modelBuilder.Entity<SrJobOrder>(entity =>
            {
                entity.HasKey(e => e.JorderId);

                entity.ToTable("Sr_JobOrder");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ExitDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Expense).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.NetValue).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OtherCosts).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SparePrts).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SrTypId).HasColumnName("SrTypID");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Wages).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.Reciption)
                    .WithMany(p => p.SrJobOrder)
                    .HasForeignKey(d => d.ReciptionId)
                    .HasConstraintName("FK_Sr_JobOrder_Sr_Reciption");

                entity.HasOne(d => d.SrTyp)
                    .WithMany(p => p.SrJobOrder)
                    .HasForeignKey(d => d.SrTypId)
                    .HasConstraintName("FK_Sr_JobOrder_Sr_ServiceTypes");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.SrJobOrder)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Sr_JobOrder_Sr_Vehicles");
            });

            modelBuilder.Entity<SrJobSparts>(entity =>
            {
                entity.HasKey(e => e.JobSpareId);

                entity.ToTable("Sr_JobSparts");

                entity.Property(e => e.ItemCode).HasMaxLength(100);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Qty).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Spdescription)
                    .HasColumnName("SPDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Spvalue)
                    .HasColumnName("SPValue")
                    .HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.Jorder)
                    .WithMany(p => p.SrJobSparts)
                    .HasForeignKey(d => d.JorderId)
                    .HasConstraintName("FK_Sr_JobSparts_Sr_JobOrder");
            });

            modelBuilder.Entity<SrJobSwages>(entity =>
            {
                entity.HasKey(e => e.JobStechId);

                entity.ToTable("Sr_JobSWages");

                entity.Property(e => e.JobStechId).HasColumnName("JobSTechId");

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.EmpName1).HasMaxLength(100);

                entity.Property(e => e.HourlyCostRate).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalHours).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Wdescription)
                    .HasColumnName("WDescription")
                    .HasMaxLength(255);

                entity.Property(e => e.Wvalue)
                    .HasColumnName("WValue")
                    .HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.Jorder)
                    .WithMany(p => p.SrJobSwages)
                    .HasForeignKey(d => d.JorderId)
                    .HasConstraintName("FK_Sr_JobSWages_Sr_JobOrder");
            });

            modelBuilder.Entity<SrMalfunctions>(entity =>
            {
                entity.HasKey(e => e.MalFunctionId);

                entity.ToTable("Sr_Malfunctions");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrProductsTypes>(entity =>
            {
                entity.HasKey(e => e.ProductTypeId);

                entity.ToTable("Sr_ProductsTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrPrograms>(entity =>
            {
                entity.HasKey(e => e.ProgramId);

                entity.ToTable("Sr_Programs");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.Days).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Mtscruze)
                    .HasColumnName("MTSCruze")
                    .HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Number).HasComment("single, double, Trible");

                entity.Property(e => e.ProgramCode).HasMaxLength(50);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrReceptionImages>(entity =>
            {
                entity.HasKey(e => e.RecImgId);

                entity.ToTable("Sr_ReceptionImages");

                entity.Property(e => e.Image).HasColumnType("image");

                entity.Property(e => e.ImgDesc).HasMaxLength(250);

                entity.HasOne(d => d.Reciption)
                    .WithMany(p => p.SrReceptionImages)
                    .HasForeignKey(d => d.ReciptionId)
                    .HasConstraintName("FK_Sr_ReceptionImages_Sr_Reciption");
            });

            modelBuilder.Entity<SrReciption>(entity =>
            {
                entity.HasKey(e => e.ReciptionId);

                entity.ToTable("Sr_Reciption");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.MileAge).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Vid).HasColumnName("VID");
            });

            modelBuilder.Entity<SrReciptionDetail>(entity =>
            {
                entity.HasKey(e => e.RecipDetlId);

                entity.ToTable("Sr_ReciptionDetail");

                entity.Property(e => e.ComId).HasColumnName("ComID");

                entity.Property(e => e.CustRequest).HasMaxLength(250);

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.HasOne(d => d.Com)
                    .WithMany(p => p.SrReciptionDetail)
                    .HasForeignKey(d => d.ComId)
                    .HasConstraintName("FK_Sr_ReciptionDetail_Sr_Complaints");

                entity.HasOne(d => d.Reciption)
                    .WithMany(p => p.SrReciptionDetail)
                    .HasForeignKey(d => d.ReciptionId)
                    .HasConstraintName("FK_Sr_ReciptionDetail_Sr_Reciption");
            });

            modelBuilder.Entity<SrReqOfQoutation>(entity =>
            {
                entity.HasKey(e => e.RoqId);

                entity.ToTable("Sr_ReqOfQoutation");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commodity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Equipment).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PortOfDischarge).HasMaxLength(200);

                entity.Property(e => e.PortOfLoading).HasMaxLength(200);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Recommendation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.Shipper).HasMaxLength(150);

                entity.Property(e => e.TargetRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TruckingFrom).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TruckingTo).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Volume).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<SrServiceDistribution>(entity =>
            {
                entity.HasKey(e => e.SerDistId);

                entity.ToTable("Sr_ServiceDistribution");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VisitDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SrServiceDistributionDetails>(entity =>
            {
                entity.HasKey(e => e.SerDistDetailId);

                entity.ToTable("Sr_ServiceDistributionDetails");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.EstimateEndTime).HasColumnType("smalldatetime");

                entity.Property(e => e.EstimateStartTime).HasColumnType("smalldatetime");

                entity.Property(e => e.RealEndTime).HasColumnType("smalldatetime");

                entity.Property(e => e.RealStartTime).HasColumnType("smalldatetime");

                entity.HasOne(d => d.SerDist)
                    .WithMany(p => p.SrServiceDistributionDetails)
                    .HasForeignKey(d => d.SerDistId)
                    .HasConstraintName("FK_Sr_ServiceDistributionDetails_Sr_ServiceDistribution");
            });

            modelBuilder.Entity<SrServiceRequest>(entity =>
            {
                entity.HasKey(e => e.SerReqId);

                entity.ToTable("Sr_ServiceRequest");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CloseReason).HasMaxLength(200);

                entity.Property(e => e.Complain).HasMaxLength(2000);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemStatus).HasComment("1 Good,2 Weak, Perfect 3");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.ModelNo).HasMaxLength(50);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.QoutationPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RequestStatus).HasComment("1 opened,2 closed");

                entity.Property(e => e.SerialNo1).HasMaxLength(100);

                entity.Property(e => e.SerialNo2).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VistitDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WarrantyEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Wid).HasColumnName("WId");
            });

            modelBuilder.Entity<SrServiceRequestResources>(entity =>
            {
                entity.HasKey(e => e.ReqResourcId);

                entity.ToTable("Sr_ServiceRequestResources");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrServiceTypes>(entity =>
            {
                entity.HasKey(e => e.SrTypId);

                entity.ToTable("Sr_ServiceTypes");

                entity.Property(e => e.SrTypId).HasColumnName("SrTypID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SrCode).HasMaxLength(50);

                entity.Property(e => e.SrDesc).HasMaxLength(500);

                entity.Property(e => e.SrName1).HasMaxLength(100);

                entity.Property(e => e.SrName2).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrShippingDeclaration>(entity =>
            {
                entity.HasKey(e => e.ShipDeclarId);

                entity.ToTable("Sr_ShippingDeclaration");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BillOfLading).HasMaxLength(200);

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Consignee).HasMaxLength(150);

                entity.Property(e => e.ContainersDry)
                    .HasColumnName("ContainersDRY")
                    .HasMaxLength(200);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.FreightPayableAt).HasMaxLength(200);

                entity.Property(e => e.GrossWeightTons).HasMaxLength(200);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.MarksAndNumbers).HasMaxLength(2000);

                entity.Property(e => e.NetWeightTons).HasMaxLength(200);

                entity.Property(e => e.Notify).HasMaxLength(2000);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PortOfDischarge).HasMaxLength(200);

                entity.Property(e => e.PortOfLoading).HasMaxLength(200);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.Shipper).HasMaxLength(150);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VesselName).HasMaxLength(150);
            });

            modelBuilder.Entity<SrTaskEmp>(entity =>
            {
                entity.HasKey(e => e.TskTech);

                entity.ToTable("Sr_TaskEmp");

                entity.Property(e => e.EmpRole).HasMaxLength(250);

                entity.HasOne(d => d.Emp)
                    .WithMany(p => p.SrTaskEmp)
                    .HasForeignKey(d => d.EmpId)
                    .HasConstraintName("FK_Sr_TaskEmp_Hr_Employees");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.SrTaskEmp)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_Sr_TaskEmp_Sr_Tasks");
            });

            modelBuilder.Entity<SrTaskItem>(entity =>
            {
                entity.HasKey(e => e.TskItemId);

                entity.ToTable("Sr_TaskItem");

                entity.Property(e => e.HowUse).HasMaxLength(500);

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.SrTaskItem)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Sr_TaskItem_MS_ItemCard");

                entity.HasOne(d => d.Task)
                    .WithMany(p => p.SrTaskItem)
                    .HasForeignKey(d => d.TaskId)
                    .HasConstraintName("FK_Sr_TaskItem_Sr_Tasks");
            });

            modelBuilder.Entity<SrTasks>(entity =>
            {
                entity.HasKey(e => e.TaskId);

                entity.ToTable("Sr_Tasks");

                entity.Property(e => e.ComId).HasColumnName("ComID");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Duration).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaskCode).HasMaxLength(50);

                entity.Property(e => e.TaskDescription).HasMaxLength(500);

                entity.Property(e => e.TaskName1).HasMaxLength(100);

                entity.Property(e => e.TaskName2).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.HasOne(d => d.Com)
                    .WithMany(p => p.SrTasks)
                    .HasForeignKey(d => d.ComId)
                    .HasConstraintName("FK_Sr_Tasks_Sr_Complaints");
            });

            modelBuilder.Entity<SrTrafficLinePriceList>(entity =>
            {
                entity.HasKey(e => e.TrafficLineVeiclId);

                entity.ToTable("Sr_TrafficLinePriceList");

                entity.Property(e => e.Cost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.HasOne(d => d.ContainerType)
                    .WithMany(p => p.SrTrafficLinePriceList)
                    .HasForeignKey(d => d.ContainerTypeId)
                    .HasConstraintName("FK_Sr_TrafficLinePriceList_Sr_ContainerTypes");

                entity.HasOne(d => d.TrafficLine)
                    .WithMany(p => p.SrTrafficLinePriceList)
                    .HasForeignKey(d => d.TrafficLineId)
                    .HasConstraintName("FK_Sr_TrafficLinePriceList_Sr_TrafficLines");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.SrTrafficLinePriceList)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Sr_TrafficLinePriceList_Sr_Vehicles");
            });

            modelBuilder.Entity<SrTrafficLines>(entity =>
            {
                entity.HasKey(e => e.TrafficLineId);

                entity.ToTable("Sr_TrafficLines");

                entity.Property(e => e.CityIdfrom).HasColumnName("CityIDFrom");

                entity.Property(e => e.CityIdto).HasColumnName("CityIDTo");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EstimatCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Km)
                    .HasColumnName("KM")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.TrafficCode).HasMaxLength(50);

                entity.Property(e => e.TrafficFrom).HasMaxLength(100);

                entity.Property(e => e.TrafficTo).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrTransportation>(entity =>
            {
                entity.HasKey(e => e.TransPortId);

                entity.ToTable("Sr_Transportation");

                entity.Property(e => e.Arrival).HasColumnType("smalldatetime");

                entity.Property(e => e.CityIdfrom).HasColumnName("CityIDFrom");

                entity.Property(e => e.CityIdto).HasColumnName("CityIDTo");

                entity.Property(e => e.Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Departure).HasColumnType("smalldatetime");

                entity.Property(e => e.PlaceFrom).HasMaxLength(100);

                entity.Property(e => e.PlaceTo).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.SrTransportation)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_Sr_Transportation_Sr_Trips");
            });

            modelBuilder.Entity<SrTripAccomDetail>(entity =>
            {
                entity.HasKey(e => e.TripAccomDetailId);

                entity.ToTable("Sr_TripAccomDetail");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PassPortNo).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.RoomNo).HasMaxLength(50);

                entity.HasOne(d => d.Accomodation)
                    .WithMany(p => p.SrTripAccomDetail)
                    .HasForeignKey(d => d.AccomodationId)
                    .HasConstraintName("FK_Sr_TripAccomDetail_Sr_Accomodation");
            });

            modelBuilder.Entity<SrTripProgramJoin>(entity =>
            {
                entity.HasKey(e => e.TripProgramJoinId);

                entity.ToTable("Sr_TripProgramJoin");

                entity.Property(e => e.Days).HasMaxLength(50);

                entity.Property(e => e.Mtscruze)
                    .HasColumnName("MTSCruze")
                    .HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Number).HasComment("single, double, Trible");

                entity.HasOne(d => d.Program)
                    .WithMany(p => p.SrTripProgramJoin)
                    .HasForeignKey(d => d.ProgramId)
                    .HasConstraintName("FK_Sr_TripProgramJoin_Sr_Programs");

                entity.HasOne(d => d.Trip)
                    .WithMany(p => p.SrTripProgramJoin)
                    .HasForeignKey(d => d.TripId)
                    .HasConstraintName("FK_Sr_TripProgramJoin_Sr_Trips");
            });

            modelBuilder.Entity<SrTrips>(entity =>
            {
                entity.HasKey(e => e.TripId)
                    .HasName("PK_St_Trips");

                entity.ToTable("Sr_Trips");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.Agent).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.ApprovedBy).HasMaxLength(100);

                entity.Property(e => e.ArrivalDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ArrivalTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ArrivedBy).HasMaxLength(100);

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeparturDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DeparturTime).HasColumnType("smalldatetime");

                entity.Property(e => e.DepartureBy).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Names).HasMaxLength(100);

                entity.Property(e => e.OperatorName).HasMaxLength(100);

                entity.Property(e => e.Others).HasMaxLength(255);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Program).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TourGuideName).HasMaxLength(100);

                entity.Property(e => e.TourLeaderName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrVehicleItemCard>(entity =>
            {
                entity.HasKey(e => e.VehclItemPart);

                entity.ToTable("Sr_VehicleItemCard");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.HasOne(d => d.ItemCard)
                    .WithMany(p => p.SrVehicleItemCard)
                    .HasForeignKey(d => d.ItemCardId)
                    .HasConstraintName("FK_Sr_VehicleItemCard_MS_ItemCard");
            });

            modelBuilder.Entity<SrVehicleJobOrder>(entity =>
            {
                entity.HasKey(e => e.VjorderId);

                entity.ToTable("Sr_VehicleJobOrder");

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContainerNo).HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.IsClosed).HasComment("True Closed ;  False  Not Closed");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ItemNewName).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.Supervisor).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TimeToLeav).HasColumnType("smalldatetime");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VehicleId).HasComment("ItemCardId");

                entity.Property(e => e.VorderTypeId).HasColumnName("VOrderTypeId");

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.SrVehicleJobOrder)
                    .HasForeignKey(d => d.VehicleId)
                    .HasConstraintName("FK_Sr_VehicleJobOrder_Sr_Vehicles");

                entity.HasOne(d => d.VorderType)
                    .WithMany(p => p.SrVehicleJobOrder)
                    .HasForeignKey(d => d.VorderTypeId)
                    .HasConstraintName("FK_Sr_VehicleJobOrder_Sr_VheicleJobOrderType");
            });

            modelBuilder.Entity<SrVehicleJobOrderDetail>(entity =>
            {
                entity.HasKey(e => e.VjorderDetailId);

                entity.ToTable("Sr_VehicleJobOrderDetail");

                entity.Property(e => e.VjorderDetailId).HasColumnName("VJOrderDetailId");

                entity.Property(e => e.CompanyName).HasMaxLength(100);

                entity.Property(e => e.ContainerWeight).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Cost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DamadeDesc).HasMaxLength(200);

                entity.Property(e => e.Km)
                    .HasColumnName("KM")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PlaceToEnd).HasMaxLength(50);

                entity.Property(e => e.PlaceToStart).HasMaxLength(50);

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.Representative)
                    .HasColumnName("representative")
                    .HasMaxLength(100);

                entity.Property(e => e.TimeEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.TimeStart).HasColumnType("smalldatetime");

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");

                entity.Property(e => e.WaitTime).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.SrVehicleJobOrderDetail)
                    .HasForeignKey(d => d.DriverId)
                    .HasConstraintName("FK_Sr_VehicleJobOrderDetail_Sr_Drivers");

                entity.HasOne(d => d.Vjorder)
                    .WithMany(p => p.SrVehicleJobOrderDetail)
                    .HasForeignKey(d => d.VjorderId)
                    .HasConstraintName("FK_Sr_VehicleJobOrderDetail_Sr_VehicleJobOrder");
            });

            modelBuilder.Entity<SrVehicleMovement>(entity =>
            {
                entity.HasKey(e => e.VehiclMovId);

                entity.ToTable("Sr_VehicleMovement");

                entity.Property(e => e.AccountId).HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AccountTableName)
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AdvancExpenseBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AdvancExpenseWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BankTransfer).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DbtableId)
                    .HasColumnName("DBTableId")
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DbtableName)
                    .HasColumnName("DBTableName")
                    .HasMaxLength(100)
                    .HasComment("to attach any document in database to receiptnote");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvDueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetTime).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPriceVisa).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxValue1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TaxValue3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesTaxes1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesTaxes2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesTaxes3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemTax3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrVehicleMovementDetails>(entity =>
            {
                entity.HasKey(e => e.VehiclMovDetailId);

                entity.ToTable("Sr_VehicleMovementDetails");

                entity.Property(e => e.DayCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DriverName).HasMaxLength(200);

                entity.Property(e => e.NetTime).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TimeEnd).HasColumnType("smalldatetime");

                entity.Property(e => e.TimeStart).HasColumnType("smalldatetime");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VehicleId).HasComment("ItemCardId");

                entity.HasOne(d => d.VehiclMov)
                    .WithMany(p => p.SrVehicleMovementDetails)
                    .HasForeignKey(d => d.VehiclMovId)
                    .HasConstraintName("FK_Sr_VehicleMovementDetails_Sr_VehicleMovement");
            });

            modelBuilder.Entity<SrVehicleRenalContract>(entity =>
            {
                entity.HasKey(e => e.VrentContractId);

                entity.ToTable("Sr_VehicleRenalContract");

                entity.Property(e => e.VrentContractId).HasColumnName("VRentContractId");

                entity.Property(e => e.AddField1).HasMaxLength(255);

                entity.Property(e => e.AddField2).HasMaxLength(255);

                entity.Property(e => e.AddField3).HasMaxLength(255);

                entity.Property(e => e.AddField4).HasMaxLength(255);

                entity.Property(e => e.AddField5).HasMaxLength(255);

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ClosingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DayPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DeliveryCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Deposit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscAmount4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DriverCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.ExpectedStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpenValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpenValueWithCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FuelCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FuelIn).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FuelOut).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.GetOutDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HotelRoom).HasMaxLength(50);

                entity.Property(e => e.InsuranceValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InsuranceValue2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.InvTotal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.MaintenanceCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetDue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetPriceBeforCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NotPaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.PriceAfterTax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Profit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RealStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Repaid).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.Tel5).HasMaxLength(20);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalCostBeforeCurr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPaidReciept).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPayment).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPurchInv).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalSalesInv).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Vat)
                    .HasColumnName("VAT")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VehicleId).HasComment("ItemCardId");

                entity.Property(e => e.VisaAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VisaCode).HasMaxLength(10);

                entity.Property(e => e.VisaExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VisaNo).HasMaxLength(50);
            });

            modelBuilder.Entity<SrVehicleRentPayJoin>(entity =>
            {
                entity.HasKey(e => e.RentPayJoinId);

                entity.ToTable("Sr_VehicleRentPayJoin");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VrentContractId).HasColumnName("VRentContractId");

                entity.HasOne(d => d.Pay)
                    .WithMany(p => p.SrVehicleRentPayJoin)
                    .HasForeignKey(d => d.PayId)
                    .HasConstraintName("FK_Sr_VehicleRentPayJoin_MS_PaymentNote");

                entity.HasOne(d => d.VrentContract)
                    .WithMany(p => p.SrVehicleRentPayJoin)
                    .HasForeignKey(d => d.VrentContractId)
                    .HasConstraintName("FK_Sr_VehicleRentPayJoin_Sr_VehicleRenalContract");
            });

            modelBuilder.Entity<SrVehicleRentPurchJoin>(entity =>
            {
                entity.HasKey(e => e.RentPurchJoinId);

                entity.ToTable("Sr_VehicleRentPurchJoin");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VrentContractId).HasColumnName("VRentContractId");

                entity.HasOne(d => d.PurInv)
                    .WithMany(p => p.SrVehicleRentPurchJoin)
                    .HasForeignKey(d => d.PurInvId)
                    .HasConstraintName("FK_Sr_VehicleRentPurchJoin_MS_PurchasInvoice");

                entity.HasOne(d => d.VrentContract)
                    .WithMany(p => p.SrVehicleRentPurchJoin)
                    .HasForeignKey(d => d.VrentContractId)
                    .HasConstraintName("FK_Sr_VehicleRentPurchJoin_Sr_VehicleRenalContract");
            });

            modelBuilder.Entity<SrVehicleRentRecJoin>(entity =>
            {
                entity.HasKey(e => e.RentRecJoinId);

                entity.ToTable("Sr_VehicleRentRecJoin");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VrentContractId).HasColumnName("VRentContractId");

                entity.HasOne(d => d.Rect)
                    .WithMany(p => p.SrVehicleRentRecJoin)
                    .HasForeignKey(d => d.RectId)
                    .HasConstraintName("FK_Sr_VehicleRentRecJoin_Ms_ReceiptNote");

                entity.HasOne(d => d.VrentContract)
                    .WithMany(p => p.SrVehicleRentRecJoin)
                    .HasForeignKey(d => d.VrentContractId)
                    .HasConstraintName("FK_Sr_VehicleRentRecJoin_Sr_VehicleRenalContract");
            });

            modelBuilder.Entity<SrVehicleRentSalesInvJoin>(entity =>
            {
                entity.HasKey(e => e.RentSaleJoinId);

                entity.ToTable("Sr_VehicleRentSalesInvJoin");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VrentContractId).HasColumnName("VRentContractId");

                entity.HasOne(d => d.Inv)
                    .WithMany(p => p.SrVehicleRentSalesInvJoin)
                    .HasForeignKey(d => d.InvId)
                    .HasConstraintName("FK_Sr_VehicleRentSalesInvJoin_Ms_SalesInvoice");

                entity.HasOne(d => d.VrentContract)
                    .WithMany(p => p.SrVehicleRentSalesInvJoin)
                    .HasForeignKey(d => d.VrentContractId)
                    .HasConstraintName("FK_Sr_VehicleRentSalesInvJoin_Sr_VehicleRenalContract");
            });

            modelBuilder.Entity<SrVehicleShapes>(entity =>
            {
                entity.HasKey(e => e.VehicleShapeId);

                entity.ToTable("Sr_VehicleShapes");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.ShapeCode).HasMaxLength(50);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrVehicleTypes>(entity =>
            {
                entity.HasKey(e => e.VehicleTypId);

                entity.ToTable("Sr_VehicleTypes");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.TypeCode).HasMaxLength(50);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SrVehicles>(entity =>
            {
                entity.HasKey(e => e.VehicleId)
                    .HasName("PK_Sr_Vehicles_1");

                entity.ToTable("Sr_Vehicles");

                entity.Property(e => e.VehicleId).HasComment("ItemCardId");

                entity.Property(e => e.BodyNo).HasMaxLength(100);

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DayCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.MotorNo).HasMaxLength(100);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.OwnerAddress).HasMaxLength(100);

                entity.Property(e => e.OwnerName).HasMaxLength(100);

                entity.Property(e => e.PurchaseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RegNo).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VehicleCode).HasMaxLength(100);

                entity.Property(e => e.VtypeConcrete)
                    .HasColumnName("VTypeConcrete")
                    .HasComment("1 car,2 pump");

                entity.Property(e => e.Wid).HasColumnName("WId");

                entity.HasOne(d => d.Garage)
                    .WithMany(p => p.SrVehicles)
                    .HasForeignKey(d => d.GarageId)
                    .HasConstraintName("FK_Sr_Vehicles_Sr_Garage");

                entity.HasOne(d => d.VehicleShape)
                    .WithMany(p => p.SrVehicles)
                    .HasForeignKey(d => d.VehicleShapeId)
                    .HasConstraintName("FK_Sr_Vehicles_Sr_VehicleShapes");

                entity.HasOne(d => d.VehicleTyp)
                    .WithMany(p => p.SrVehicles)
                    .HasForeignKey(d => d.VehicleTypId)
                    .HasConstraintName("FK_Sr_Vehicles_Sr_VehicleTypes");

                entity.HasOne(d => d.W)
                    .WithMany(p => p.SrVehicles)
                    .HasForeignKey(d => d.Wid)
                    .HasConstraintName("FK_Sr_Vehicles_Sr_Warranty");
            });

            modelBuilder.Entity<SrVheicleJobOrderType>(entity =>
            {
                entity.HasKey(e => e.VorderTypeId);

                entity.ToTable("Sr_VheicleJobOrderType");

                entity.Property(e => e.VorderTypeId).HasColumnName("VOrderTypeId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.GetAccountIdFromAn).HasColumnName("GetAccountIdFromAN");

                entity.Property(e => e.GetCostCenterIdFromAn).HasColumnName("GetCostCenterIdFromAN");

                entity.Property(e => e.IsAncodeMandatory).HasColumnName("IsANCOdeMandatory");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Remark).HasMaxLength(255);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VorderTypeCode)
                    .HasColumnName("VOrderTypeCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SrWarranty>(entity =>
            {
                entity.HasKey(e => e.Wid);

                entity.ToTable("Sr_Warranty");

                entity.Property(e => e.Wid).HasColumnName("WId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Wcode)
                    .HasColumnName("WCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Wconditions)
                    .HasColumnName("WConditions")
                    .HasMaxLength(1000);

                entity.Property(e => e.Wdistance).HasColumnName("WDistance");

                entity.Property(e => e.Wmethod)
                    .HasColumnName("WMethod")
                    .HasComment("0 periodic,1 distance, 2 both");

                entity.Property(e => e.Wname1)
                    .HasColumnName("WName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Wname2)
                    .HasColumnName("WName2")
                    .HasMaxLength(100);

                entity.Property(e => e.WperiodMonths).HasColumnName("WPeriodMonths");

                entity.Property(e => e.Wuse).HasColumnName("WUse");
            });

            modelBuilder.Entity<StockArchives>(entity =>
            {
                entity.HasKey(e => e.StockArchId);

                entity.ToTable("Stock_Archives");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockBrokers>(entity =>
            {
                entity.ToTable("Stock_Brokers");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockCapitalUpdate>(entity =>
            {
                entity.HasKey(e => e.StockCapitalUpdatId);

                entity.ToTable("Stock_CapitalUpdate");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CurrentCapital).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.SalePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.StockCapitalUpdate)
                    .HasForeignKey(d => d.StockId)
                    .HasConstraintName("FK_Stock_CapitalUpdate_Stock_Stocks");
            });

            modelBuilder.Entity<StockCashTransfer>(entity =>
            {
                entity.ToTable("Stock_CashTransfer");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CurrencyRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrTime).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockCashWithdrawalReasons>(entity =>
            {
                entity.HasKey(e => e.StockCashWithdrId);

                entity.ToTable("Stock_CashWithdrawalReasons");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockCategories>(entity =>
            {
                entity.HasKey(e => e.StockCatId);

                entity.ToTable("Stock_Categories");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockDealers>(entity =>
            {
                entity.ToTable("Stock_Dealers");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.BrokerPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Fax)
                    .HasColumnName("FAX")
                    .HasMaxLength(20);

                entity.Property(e => e.MarketFixedPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.MarketOtherPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Phone1).HasMaxLength(20);

                entity.Property(e => e.Phone2).HasMaxLength(20);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockMarkets>(entity =>
            {
                entity.HasKey(e => e.StockMarketId);

                entity.ToTable("Stock_Markets");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockOpenningBalance>(entity =>
            {
                entity.HasKey(e => e.StockOpenId);

                entity.ToTable("Stock_OpenningBalance");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockOpenningBalanceDetails>(entity =>
            {
                entity.HasKey(e => e.StockOpenDetailId);

                entity.ToTable("Stock_OpenningBalanceDetails");

                entity.Property(e => e.StockOpenDetailId).ValueGeneratedNever();

                entity.Property(e => e.CurrencyRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPriceLocal).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.StockOpen)
                    .WithMany(p => p.StockOpenningBalanceDetails)
                    .HasForeignKey(d => d.StockOpenId)
                    .HasConstraintName("FK_Stock_OpenningBalanceDetails_Stock_OpenningBalance");
            });

            modelBuilder.Entity<StockPortfolio>(entity =>
            {
                entity.ToTable("Stock_Portfolio");

                entity.Property(e => e.CashBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.InvestBoxBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.StockBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockPortfolioAccounts>(entity =>
            {
                entity.HasKey(e => e.StockPortAccountsId);

                entity.ToTable("Stock_PortfolioAccounts");

                entity.Property(e => e.CurrentBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalance).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.StockPortfolioAccounts)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("FK_Stock_PortfolioAccounts_Cal_AccountChart");

                entity.HasOne(d => d.StockPortfolio)
                    .WithMany(p => p.StockPortfolioAccounts)
                    .HasForeignKey(d => d.StockPortfolioId)
                    .HasConstraintName("FK_Stock_PortfolioAccounts_Stock_Portfolio");
            });

            modelBuilder.Entity<StockPortfolioStockArchives>(entity =>
            {
                entity.HasKey(e => e.StockArchivesId);

                entity.ToTable("Stock_PortfolioStockArchives");

                entity.HasOne(d => d.StockArch)
                    .WithMany(p => p.StockPortfolioStockArchives)
                    .HasForeignKey(d => d.StockArchId)
                    .HasConstraintName("FK_Stock_PortfolioStockArchives_Stock_Archives");

                entity.HasOne(d => d.StockPortJoin)
                    .WithMany(p => p.StockPortfolioStockArchives)
                    .HasForeignKey(d => d.StockPortJoinId)
                    .HasConstraintName("FK_Stock_PortfolioStockArchives_Stock_PortfolioStocks");
            });

            modelBuilder.Entity<StockPortfolioStocks>(entity =>
            {
                entity.HasKey(e => e.StockPortJoinId);

                entity.ToTable("Stock_PortfolioStocks");

                entity.Property(e => e.CostAverage).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.Stock)
                    .WithMany(p => p.StockPortfolioStocks)
                    .HasForeignKey(d => d.StockId)
                    .HasConstraintName("FK_Stock_PortfolioStocks_Stock_Stocks");

                entity.HasOne(d => d.StockPortfolio)
                    .WithMany(p => p.StockPortfolioStocks)
                    .HasForeignKey(d => d.StockPortfolioId)
                    .HasConstraintName("FK_Stock_PortfolioStocks_Stock_Portfolio");
            });

            modelBuilder.Entity<StockRecCustSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("stockRecCustSearch");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.ReceiptrQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StrCustm4)
                    .HasColumnName("strCustm4")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<StockRecSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockRecSearch");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.ReceiptrQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RetSaleDocTrNo).HasMaxLength(151);

                entity.Property(e => e.SourcTyp)
                    .IsRequired()
                    .HasMaxLength(49)
                    .IsUnicode(false);

                entity.Property(e => e.StrCustm4)
                    .HasColumnName("strCustm4")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<StockRecVendSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StockRecVendSearch");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.ReceiptrQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StrCustm4)
                    .HasColumnName("strCustm4")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<StockSalesPurchase>(entity =>
            {
                entity.HasKey(e => e.StockSalPurchId);

                entity.ToTable("Stock_SalesPurchase");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockSalesPurchaseDetails>(entity =>
            {
                entity.HasKey(e => e.StockSalPurchDetailId);

                entity.ToTable("Stock_SalesPurchaseDetails");

                entity.Property(e => e.DealTime).HasColumnType("smalldatetime");

                entity.Property(e => e.FixedCommision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.NetValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OtherCommision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.StockSalPurch)
                    .WithMany(p => p.StockSalesPurchaseDetails)
                    .HasForeignKey(d => d.StockSalPurchId)
                    .HasConstraintName("FK_Stock_SalesPurchaseDetails_Stock_SalesPurchase");
            });

            modelBuilder.Entity<StockSectors>(entity =>
            {
                entity.ToTable("Stock_Sectors");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockShareholdersNames>(entity =>
            {
                entity.HasKey(e => e.StockholderNamesId);

                entity.ToTable("Stock_ShareholdersNames");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockStocks>(entity =>
            {
                entity.HasKey(e => e.StockId);

                entity.ToTable("Stock_Stocks");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocType).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.EstablishDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FinancialEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IslamicCompatibility).HasMaxLength(100);

                entity.Property(e => e.LastMemberDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MarketListDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.NextMemberDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaidCapital).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Phone1).HasMaxLength(20);

                entity.Property(e => e.Phone2).HasMaxLength(20);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.SharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StockNameValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StockPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Symbol).HasMaxLength(20);

                entity.Property(e => e.SymbolAr).HasMaxLength(20);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.WebSite).HasMaxLength(100);

                entity.Property(e => e.ZakatOnInvest).HasMaxLength(100);

                entity.HasOne(d => d.StockCat)
                    .WithMany(p => p.StockStocks)
                    .HasForeignKey(d => d.StockCatId)
                    .HasConstraintName("FK_Stock_Stocks_Stock_Categories");

                entity.HasOne(d => d.StockMarket)
                    .WithMany(p => p.StockStocks)
                    .HasForeignKey(d => d.StockMarketId)
                    .HasConstraintName("FK_Stock_Stocks_Stock_Markets");

                entity.HasOne(d => d.StockSectors)
                    .WithMany(p => p.StockStocks)
                    .HasForeignKey(d => d.StockSectorsId)
                    .HasConstraintName("FK_Stock_Stocks_Stock_Sectors");
            });

            modelBuilder.Entity<StockTranTypes>(entity =>
            {
                entity.HasKey(e => e.StockTranTypId);

                entity.ToTable("Stock_TranTypes");

                entity.Property(e => e.CashEffect1).HasComment("1 Plus, 2 Minus, 3 Without");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.StockEffect).HasComment("1 Plus, 2 Minus, 3 Without");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockTransfer>(entity =>
            {
                entity.ToTable("Stock_Transfer");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<StockTransferDetail>(entity =>
            {
                entity.ToTable("Stock_TransferDetail");

                entity.Property(e => e.CostAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ProfitLoss).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.StockTransfer)
                    .WithMany(p => p.StockTransferDetail)
                    .HasForeignKey(d => d.StockTransferId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Stock_TransferDetail_Stock_Transfer");
            });

            modelBuilder.Entity<SysAnalyticalCodeProccess>(entity =>
            {
                entity.HasKey(e => e.AnprocessId);

                entity.ToTable("sys_AnalyticalCodeProccess");

                entity.Property(e => e.AnprocessId).HasColumnName("ANProcessId");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.Remarks).HasMaxLength(1000);

                entity.Property(e => e.Remarks1).HasMaxLength(1000);

                entity.Property(e => e.Remarks10).HasMaxLength(1000);

                entity.Property(e => e.Remarks2).HasMaxLength(1000);

                entity.Property(e => e.Remarks3).HasMaxLength(1000);

                entity.Property(e => e.Remarks4).HasMaxLength(1000);

                entity.Property(e => e.Remarks5).HasMaxLength(1000);

                entity.Property(e => e.Remarks6).HasMaxLength(1000);

                entity.Property(e => e.Remarks7).HasMaxLength(1000);

                entity.Property(e => e.Remarks8).HasMaxLength(1000);

                entity.Property(e => e.Remarks9).HasMaxLength(1000);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.HasOne(d => d.A)
                    .WithMany(p => p.SysAnalyticalCodeProccess)
                    .HasForeignKey(d => d.Aid)
                    .HasConstraintName("FK_sys_AnalyticalCodeProccess_Sys_AnalyticalCodes");
            });

            modelBuilder.Entity<SysAnalyticalCodeUpdateTypes>(entity =>
            {
                entity.HasKey(e => e.AnUpdateTypeId);

                entity.ToTable("sys_AnalyticalCodeUpdateTypes");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SysAnalyticalCodeUpdates>(entity =>
            {
                entity.HasKey(e => e.AnupdateId);

                entity.ToTable("sys_AnalyticalCodeUpdates");

                entity.Property(e => e.AnupdateId).HasColumnName("ANUpdateId");

                entity.Property(e => e.AddField1).HasMaxLength(200);

                entity.Property(e => e.AddField10).HasMaxLength(200);

                entity.Property(e => e.AddField2).HasMaxLength(200);

                entity.Property(e => e.AddField3).HasMaxLength(200);

                entity.Property(e => e.AddField4).HasMaxLength(200);

                entity.Property(e => e.AddField5).HasMaxLength(200);

                entity.Property(e => e.AddField6).HasMaxLength(200);

                entity.Property(e => e.AddField7).HasMaxLength(200);

                entity.Property(e => e.AddField8).HasMaxLength(200);

                entity.Property(e => e.AddField9).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Commodity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Equipment).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PortOfDischarge).HasMaxLength(200);

                entity.Property(e => e.PortOfLoading).HasMaxLength(200);

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Recommendation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(2000);

                entity.Property(e => e.Shipper).HasMaxLength(150);

                entity.Property(e => e.TargetRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TruckingFrom).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TruckingTo).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.Volume).HasColumnType("numeric(38, 10)");

                entity.HasOne(d => d.A)
                    .WithMany(p => p.SysAnalyticalCodeUpdates)
                    .HasForeignKey(d => d.Aid)
                    .HasConstraintName("FK_sys_AnalyticalCodeUpdates_Sys_AnalyticalCodes");
            });

            modelBuilder.Entity<SysAnalyticalCodes>(entity =>
            {
                entity.HasKey(e => e.Aid);

                entity.ToTable("Sys_AnalyticalCodes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.AccomulatAid).HasColumnName("AccomulatAId");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField11).HasMaxLength(100);

                entity.Property(e => e.AddField12).HasMaxLength(100);

                entity.Property(e => e.AddField13).HasMaxLength(100);

                entity.Property(e => e.AddField14).HasMaxLength(100);

                entity.Property(e => e.AddField15).HasMaxLength(100);

                entity.Property(e => e.AddField16).HasMaxLength(100);

                entity.Property(e => e.AddField17).HasMaxLength(100);

                entity.Property(e => e.AddField18).HasMaxLength(100);

                entity.Property(e => e.AddField19).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField20).HasMaxLength(100);

                entity.Property(e => e.AddField21).HasMaxLength(100);

                entity.Property(e => e.AddField22).HasMaxLength(100);

                entity.Property(e => e.AddField23).HasMaxLength(100);

                entity.Property(e => e.AddField24).HasMaxLength(100);

                entity.Property(e => e.AddField25).HasMaxLength(100);

                entity.Property(e => e.AddField26).HasMaxLength(100);

                entity.Property(e => e.AddField27).HasMaxLength(100);

                entity.Property(e => e.AddField28).HasMaxLength(100);

                entity.Property(e => e.AddField29).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField30).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.AnDate1).HasColumnType("smalldatetime");

                entity.Property(e => e.AnDate2).HasColumnType("smalldatetime");

                entity.Property(e => e.AnDate3).HasColumnType("smalldatetime");

                entity.Property(e => e.BspartnerId).HasColumnName("BSPartnerId");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.NotifyDate1).HasColumnType("smalldatetime");

                entity.Property(e => e.NotifyDate2).HasColumnType("smalldatetime");

                entity.Property(e => e.NotifyDate3).HasColumnType("smalldatetime");

                entity.Property(e => e.ParentAid).HasColumnName("ParentAId");

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SysBasket>(entity =>
            {
                entity.HasKey(e => e.BasketId);

                entity.ToTable("Sys_Basket");

                entity.Property(e => e.ClosedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocName).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(100);

                entity.Property(e => e.Message).HasMaxLength(250);

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.TransferDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.WachDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<SysBooks>(entity =>
            {
                entity.HasKey(e => e.BookId);

                entity.ToTable("Sys_Books");

                entity.Property(e => e.BookNameAr)
                    .HasColumnName("BookNameAR")
                    .HasMaxLength(100);

                entity.Property(e => e.BookNameEn)
                    .HasColumnName("BookNameEN")
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SysCity>(entity =>
            {
                entity.ToTable("Sys_City");

                entity.Property(e => e.SysCityId).HasColumnName("SysCityID");

                entity.Property(e => e.CityName)
                    .HasColumnName("cityName")
                    .HasMaxLength(100);

                entity.Property(e => e.CountryCode).HasMaxLength(50);

                entity.Property(e => e.Latitude)
                    .HasColumnName("latitude")
                    .HasMaxLength(100);

                entity.Property(e => e.Longitude)
                    .HasColumnName("longitude")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SysConfigsms>(entity =>
            {
                entity.ToTable("sys_configsms");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Keeey)
                    .HasColumnName("keeey")
                    .HasMaxLength(500);

                entity.Property(e => e.Namesrvices)
                    .HasColumnName("namesrvices")
                    .HasMaxLength(50);

                entity.Property(e => e.Pasth)
                    .HasColumnName("pasth")
                    .HasMaxLength(500);

                entity.Property(e => e.Sender)
                    .HasColumnName("sender")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SysCounter>(entity =>
            {
                entity.HasKey(e => e.CounterId);

                entity.ToTable("Sys_Counter");

                entity.Property(e => e.TrIdName).HasMaxLength(50);
            });

            modelBuilder.Entity<SysCountries>(entity =>
            {
                entity.HasKey(e => e.CountryCode);

                entity.ToTable("Sys_Countries");

                entity.Property(e => e.CountryCode).HasMaxLength(50);

                entity.Property(e => e.CountryId).ValueGeneratedOnAdd();

                entity.Property(e => e.CountryName).HasMaxLength(100);

                entity.Property(e => e.Latitude)
                    .HasColumnName("latitude")
                    .HasMaxLength(100);

                entity.Property(e => e.Longitude)
                    .HasColumnName("longitude")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<SysFinancialIntervals>(entity =>
            {
                entity.HasKey(e => e.FinancialIntervalsId);

                entity.ToTable("Sys_FinancialIntervals");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EndToHijri).HasMaxLength(20);

                entity.Property(e => e.EndingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.FinancialIntervalCode).HasMaxLength(20);

                entity.Property(e => e.MonthNameA).HasMaxLength(50);

                entity.Property(e => e.MonthNameE).HasMaxLength(50);

                entity.Property(e => e.StartingFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.StartingFromHijri).HasMaxLength(20);

                entity.Property(e => e.StopReason).HasMaxLength(500);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.HasOne(d => d.FinancialYear)
                    .WithMany(p => p.SysFinancialIntervals)
                    .HasForeignKey(d => d.FinancialYearId)
                    .HasConstraintName("FK_Sys_FinancialIntervals_Sys_FinancialYears");
            });

            modelBuilder.Entity<SysFinancialYears>(entity =>
            {
                entity.HasKey(e => e.FinancialYearsId);

                entity.ToTable("Sys_FinancialYears");

                entity.Property(e => e.ClosingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ClosingDateHijri).HasMaxLength(20);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EndTo).HasColumnType("smalldatetime");

                entity.Property(e => e.EndToHijri).HasMaxLength(20);

                entity.Property(e => e.FinancialYearNameA).HasMaxLength(100);

                entity.Property(e => e.FinancialYearNameE).HasMaxLength(100);

                entity.Property(e => e.StartingFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.StartingFromHijri).HasMaxLength(20);

                entity.Property(e => e.StopReason).HasMaxLength(500);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);

                entity.Property(e => e.YearState).HasMaxLength(500);
            });

            modelBuilder.Entity<SysFinancialYearsClosing>(entity =>
            {
                entity.HasKey(e => e.ClosingId);

                entity.ToTable("Sys_FinancialYearsClosing");

                entity.Property(e => e.ClosingDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ClosingDateHejri).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.RemarksA).HasMaxLength(150);

                entity.Property(e => e.RemarksE).HasMaxLength(150);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SysFlexLists>(entity =>
            {
                entity.HasKey(e => e.FlexListId);

                entity.ToTable("sys_FlexLists");

                entity.Property(e => e.Culture).HasMaxLength(50);

                entity.Property(e => e.FieldCode).HasMaxLength(100);

                entity.Property(e => e.FlexCode).HasMaxLength(50);

                entity.Property(e => e.FlexName1).HasMaxLength(100);

                entity.Property(e => e.FlexName2).HasMaxLength(100);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.Value1).HasMaxLength(100);

                entity.Property(e => e.Value2).HasMaxLength(100);

                entity.Property(e => e.Value3).HasMaxLength(100);

                entity.Property(e => e.Value4).HasMaxLength(100);

                entity.Property(e => e.Value5).HasMaxLength(100);
            });

            modelBuilder.Entity<SysLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.FieldDetail).HasMaxLength(1000);

                entity.Property(e => e.FieldName).HasMaxLength(100);

                entity.Property(e => e.FieldNameAr).HasMaxLength(100);

                entity.Property(e => e.LogAction).HasMaxLength(100);

                entity.Property(e => e.LogDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NewValue).HasMaxLength(2000);

                entity.Property(e => e.OldValue).HasMaxLength(2000);

                entity.Property(e => e.ScreenName).HasMaxLength(100);

                entity.Property(e => e.ScreenNameAr).HasMaxLength(100);

                entity.Property(e => e.TablDetailName).HasMaxLength(100);

                entity.Property(e => e.TablName).HasMaxLength(100);
            });

            modelBuilder.Entity<SysNaming>(entity =>
            {
                entity.HasKey(e => e.NamingId);

                entity.ToTable("Sys_Naming");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CtrlName).HasMaxLength(100);

                entity.Property(e => e.CtrlNewText).HasMaxLength(150);

                entity.Property(e => e.CtrlOriginalText).HasMaxLength(150);

                entity.Property(e => e.CtrlParent).HasMaxLength(150);

                entity.Property(e => e.CtrlParentIsTpl).HasColumnName("CtrlParentIsTPL");

                entity.Property(e => e.CtrlParentType).HasMaxLength(100);

                entity.Property(e => e.CtrlTextBefore).HasMaxLength(150);

                entity.Property(e => e.CtrlType).HasMaxLength(100);

                entity.Property(e => e.Culture).HasMaxLength(50);

                entity.Property(e => e.FlexMasterCardTable).HasMaxLength(100);

                entity.Property(e => e.Screen).HasMaxLength(50);

                entity.Property(e => e.SelectedField).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SysNotificationTypes>(entity =>
            {
                entity.HasKey(e => e.NotifyTypeId);

                entity.ToTable("Sys_NotificationTypes");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SysNotifications>(entity =>
            {
                entity.HasKey(e => e.NotiFyId);

                entity.ToTable("Sys_Notifications");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.NextNotify).HasColumnType("smalldatetime");

                entity.Property(e => e.NotifyMessage).HasMaxLength(200);

                entity.Property(e => e.RemarksA).HasMaxLength(255);

                entity.Property(e => e.RemarksE).HasMaxLength(255);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<SysRemotBranchesLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Sys_RemotBranchesLog");

                entity.Property(e => e.LogTimStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.LogTime).HasColumnType("smalldatetime");

                entity.Property(e => e.LogType).HasComment("1 insert,2 update,3 delete");

                entity.Property(e => e.TableCode).HasMaxLength(100);
            });

            modelBuilder.Entity<SysRemotLogDetail>(entity =>
            {
                entity.HasKey(e => e.LogDetailId);

                entity.ToTable("Sys_RemotLogDetail");

                entity.Property(e => e.FieldName).HasMaxLength(100);

                entity.Property(e => e.FieldNewValue).HasMaxLength(200);

                entity.Property(e => e.FieldOldValue).HasMaxLength(200);

                entity.Property(e => e.LogType).HasComment("1 insert,2 update,3 delete,4 print, preview");

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.SysRemotLogDetail)
                    .HasForeignKey(d => d.LogId)
                    .HasConstraintName("FK_Sys_RemotLogDetail_Sys_RemotTranLog");
            });

            modelBuilder.Entity<SysRemotTranLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("Sys_RemotTranLog");

                entity.Property(e => e.LogTimStamp)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.LogTime).HasColumnType("smalldatetime");

                entity.Property(e => e.LogType).HasComment("1 insert,2 update,3 delete");

                entity.Property(e => e.TableCode).HasMaxLength(100);
            });

            modelBuilder.Entity<SysRemoteBranchesLogDetaile>(entity =>
            {
                entity.HasKey(e => e.LogDetailId);

                entity.Property(e => e.FieldName).HasMaxLength(100);

                entity.Property(e => e.FieldNewValue).HasMaxLength(200);

                entity.Property(e => e.FieldOldValue).HasMaxLength(200);

                entity.Property(e => e.LogType).HasComment("1 insert,2 update,3 delete,4 print, preview");

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.SysRemoteBranchesLogDetaile)
                    .HasForeignKey(d => d.LogId)
                    .HasConstraintName("FK_SysRemoteBranchesLogDetaile_Sys_RemotBranchesLog");
            });

            modelBuilder.Entity<TrOpenningBalance>(entity =>
            {
                entity.ToTable("Tr_OpenningBalance");

                entity.Property(e => e.TrOpenningBalanceId).HasColumnName("Tr_OpenningBalanceId");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.Balance).HasColumnType("numeric(38, 1)");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.TotalCreditor).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalDebitor).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(20);
            });

            modelBuilder.Entity<TrOpenningBalanceDetails>(entity =>
            {
                entity.HasKey(e => e.OpeningBalanceDetailsId);

                entity.ToTable("Tr_OpenningBalanceDetails");

                entity.Property(e => e.Creditor).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Debitor).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrOpenningBalanceId).HasColumnName("Tr_OpenningBalanceId");

                entity.HasOne(d => d.TrOpenningBalance)
                    .WithMany(p => p.TrOpenningBalanceDetails)
                    .HasForeignKey(d => d.TrOpenningBalanceId)
                    .HasConstraintName("FK_Tr_OpenningBalanceDetails_Tr_OpenningBalance");
            });

            modelBuilder.Entity<VdeliverSalesInvfilter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VDeliverSalesInvfilter");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeliverQtyOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StrCustm4)
                    .HasColumnName("strCustm4")
                    .HasMaxLength(100);

                entity.Property(e => e.StrCustm5)
                    .HasColumnName("strCustm5")
                    .HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAccountClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AccountClassification");

                entity.Property(e => e.AccountCatDescA).HasMaxLength(100);

                entity.Property(e => e.AccountCatDescE).HasMaxLength(100);

                entity.Property(e => e.ClassLevel)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);
            });

            modelBuilder.Entity<VwAllAccountsTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllAccountsTransactions");

                entity.Property(e => e.AccCurrTrancCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccCurrTrancDepit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccCurrTrancDepitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccTotaCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccTotaCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccTotalDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccTotalDebitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AnalizCode).HasMaxLength(50);

                entity.Property(e => e.AnalizName1).HasMaxLength(100);

                entity.Property(e => e.AnalizName2).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCurrencyAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCurrencyAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceDebitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceDebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BookNameAr)
                    .HasColumnName("BookNameAR")
                    .HasMaxLength(100);

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(151);

                entity.Property(e => e.CustomerDescA).HasMaxLength(200);

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Idname)
                    .IsRequired()
                    .HasColumnName("IDname")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.OpenningBalanceCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceDepit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceDepitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(303);

                entity.Property(e => e.RemarksA)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SourcTyp)
                    .IsRequired()
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCode).HasMaxLength(151);

                entity.Property(e => e.SourceName).HasMaxLength(200);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAllAnalyticalCodTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllAnalyticalCodTransactions");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CostCenterNameA).HasMaxLength(100);

                entity.Property(e => e.CostCenterNameE).HasMaxLength(100);

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencySymbol).HasMaxLength(50);

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.DocRemarks).HasMaxLength(2000);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName1)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName2)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false);

                entity.Property(e => e.DocValue).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.OpenBalancCredCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenBalancCredCrncyCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenBalancDepCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenBalancDepCrncyCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ParentAid).HasColumnName("ParentAId");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAllAnalyticalCodTransactionsDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllAnalyticalCodTransactionsDetails");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField10).HasMaxLength(100);

                entity.Property(e => e.AddField11).HasMaxLength(100);

                entity.Property(e => e.AddField14).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.AddField6).HasMaxLength(100);

                entity.Property(e => e.AddField7).HasMaxLength(100);

                entity.Property(e => e.AddField8).HasMaxLength(100);

                entity.Property(e => e.AddField9).HasMaxLength(100);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CostCenterNameA).HasMaxLength(100);

                entity.Property(e => e.CostCenterNameE).HasMaxLength(100);

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencySymbol).HasMaxLength(50);

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.DocRemarks).HasMaxLength(2000);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName1)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName2)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false);

                entity.Property(e => e.ItemCode).HasMaxLength(100);

                entity.Property(e => e.ItemDescA).HasMaxLength(200);

                entity.Property(e => e.ItemDescE).HasMaxLength(200);

                entity.Property(e => e.OpenBalancCredCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenBalancCredCrncyCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenBalancDepCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenBalancDepCrncyCostCentr).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ParentAid).HasColumnName("ParentAId");

                entity.Property(e => e.Price).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyBeforRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.RemarksA).HasMaxLength(100);

                entity.Property(e => e.RemarksE).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwAllCostCenterTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllCostCenterTransactions");

                entity.Property(e => e.BalanceCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCurrencyAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCurrencyAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceDebitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceDebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BookNameAr)
                    .HasColumnName("BookNameAR")
                    .HasMaxLength(100);

                entity.Property(e => e.CostCenterCurrTrancCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CostCenterCurrTrancDepit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CostCenterCurrTrancDepitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CostCenterNameA).HasMaxLength(100);

                entity.Property(e => e.CostCenterTotaCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CostCenterTotaCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CostCenterTotalDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CostCenterTotalDebitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(151);

                entity.Property(e => e.CustomerDescA).HasMaxLength(200);

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.HelpCostCenterType).HasMaxLength(50);

                entity.Property(e => e.OpenningBalanceCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceDepit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceDepitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAllJobOrderDocuments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_AllJobOrderDocuments");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.Docval)
                    .HasColumnName("docval")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAllJobOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllJobOrders");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.CustomerCharged).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.InstallationPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetExpenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalEquipCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalGoStock).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJobsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJpbOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProductsPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPurchInvCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrap).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTasksCose).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAllLetOfGtransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllLetOfGTransactions");

                entity.Property(e => e.CategoryName1).HasMaxLength(100);

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoverValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencySymbol).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.Expenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LetEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LetterOfGuaranteeCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LetterOfGuaranteeName1).HasMaxLength(200);

                entity.Property(e => e.LetterOfGuaranteeName2).HasMaxLength(200);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StatusName1).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TypeName1).HasMaxLength(100);

                entity.Property(e => e.ValueBeforeRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwAllRepairOrders>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllRepairOrders");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencySymbol).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAllSrJobOrderMotors>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllSrJobOrderMotors");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencySymbol).HasMaxLength(50);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwAllVehicleJobOrdersDocs>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AllVehicleJobOrdersDocs");

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencySymbol).HasMaxLength(50);

                entity.Property(e => e.DocRemarks).HasMaxLength(200);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName1)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeName2)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DocValue).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VjorderId).HasColumnName("VJOrderId");
            });

            modelBuilder.Entity<VwAttendTime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_AttendTime");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Countearly)
                    .HasColumnName("countearly")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Countearlypure)
                    .HasColumnName("countearlypure")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Countleate)
                    .HasColumnName("countleate")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Countovertim)
                    .HasColumnName("countovertim")
                    .HasColumnType("decimal(18, 0)");

                entity.Property(e => e.Dateat)
                    .HasColumnName("dateat")
                    .HasColumnType("date");

                entity.Property(e => e.DevId).HasColumnName("Dev_id");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Mode).HasColumnName("mode");

                entity.Property(e => e.Moderol)
                    .HasColumnName("moderol")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.NewAttend).HasColumnType("datetime");

                entity.Property(e => e.RolId).HasColumnName("rol_id");

                entity.Property(e => e.Timeat).HasColumnName("timeat");
            });

            modelBuilder.Entity<VwCustomerCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_CustomerCategory");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.CatCode).HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.CatDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(20);
            });

            modelBuilder.Entity<VwDailyTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_DailyTransactions");

                entity.Property(e => e.AnalizCode).HasMaxLength(50);

                entity.Property(e => e.AnalizName1).HasMaxLength(100);

                entity.Property(e => e.AnalizName2).HasMaxLength(100);

                entity.Property(e => e.BookNameAr)
                    .HasColumnName("BookNameAR")
                    .HasMaxLength(100);

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(151);

                entity.Property(e => e.CustomerDescA).HasMaxLength(200);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DocType)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DocTypeAr)
                    .IsRequired()
                    .HasColumnName("DocTypeAR")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Idname)
                    .IsRequired()
                    .HasColumnName("IDname")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(303);

                entity.Property(e => e.SourcTyp)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.SourceCode).HasMaxLength(151);

                entity.Property(e => e.SourceName).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwEmpAttendanceTran>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_EmpAttendanceTran");

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DeviceEmpCode).HasMaxLength(50);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.Jcode)
                    .HasColumnName("JCode")
                    .HasMaxLength(50);

                entity.Property(e => e.Jname1)
                    .HasColumnName("JName1")
                    .HasMaxLength(100);

                entity.Property(e => e.Jname2)
                    .HasColumnName("JName2")
                    .HasMaxLength(100);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PayDayDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PeriodCode).HasMaxLength(50);

                entity.Property(e => e.PeriodEndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PeriodName1).HasMaxLength(100);

                entity.Property(e => e.PeriodName2).HasMaxLength(100);

                entity.Property(e => e.PeriodStrtDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.SubPeriodCode).HasMaxLength(50);

                entity.Property(e => e.SubPeriodName1).HasMaxLength(100);

                entity.Property(e => e.SubPeriodName2).HasMaxLength(100);

                entity.Property(e => e.TotalVacsHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalWorkHours).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetAdjustMentsByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAdjustMentsByCust");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwGetAdjustMentsByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAdjustMentsByVend");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Value).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<VwGetAdjustMentsRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAdjustMentsRank");

                entity.Property(e => e.AdjustId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetAllBatches>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAllBatches");

                entity.Property(e => e.BatchHieght).HasColumnType("numeric(23, 7)");

                entity.Property(e => e.BatchLength).HasColumnType("numeric(23, 7)");

                entity.Property(e => e.BatchWidth).HasColumnType("numeric(23, 7)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FirstPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemBatchCode).HasMaxLength(250);

                entity.Property(e => e.ItemBatchName1).HasMaxLength(500);

                entity.Property(e => e.ItemBatchName2).HasMaxLength(500);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.MultiplyValues).HasColumnType("decimal(23, 7)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<VwGetAnalyticalCodeRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAnalyticalCodeRank");

                entity.Property(e => e.Aid)
                    .HasColumnName("AId")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwGetAssetRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAssetRank");

                entity.Property(e => e.AssetCode).HasMaxLength(50);

                entity.Property(e => e.AssetId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetAssetSettingsRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAssetSettingsRank");

                entity.Property(e => e.AssetSetId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetAssetTerminationRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAssetTerminationRank");

                entity.Property(e => e.AssetTerminatId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetAttendanceDocRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetAttendanceDocRank");

                entity.Property(e => e.AttendDocId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetBankNoticeRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetBankNoticeRank");

                entity.Property(e => e.BankNoticId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetBomrank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetBOMRank");

                entity.Property(e => e.BillOfMaterialId).ValueGeneratedOnAdd();

                entity.Property(e => e.Bomcode)
                    .HasColumnName("BOMCode")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VwGetBoxTransferNoteRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetBoxTransferNoteRank");

                entity.Property(e => e.BoxTranId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetCurrencyRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetCurrencyRank");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CurrencyId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetCustomersRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetCustomersRank");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetDeliverSalesInvoiceByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetDeliverSalesInvoiceByCust");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TotalCostAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetDeliverSalesInvoiceByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetDeliverSalesInvoiceByVend");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TotalCostAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetDeliverSalesInvoiceRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetDeliverSalesInvoiceRank");

                entity.Property(e => e.DeliverId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetDepreciationDocRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetDepreciationDocRank");

                entity.Property(e => e.DeprDocId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetEmpActivityRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetEmpActivityRank");

                entity.Property(e => e.EmpActivityId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetEmpLoanRequestRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetEmpLoanRequestRank");

                entity.Property(e => e.EmpLoanReqId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetEmpMovePromotionRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetEmpMovePromotionRank");

                entity.Property(e => e.EmpMoveId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetEmpVacationRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetEmpVacationRank");

                entity.Property(e => e.EmpVacId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetGawabRecordRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetGawabRecordRank");

                entity.Property(e => e.LetterNormId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetHrTerminationRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetHrTerminationRank");

                entity.Property(e => e.TerminateId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetItemAlters>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetItemAlters");

                entity.Property(e => e.AlterToCod).HasMaxLength(50);

                entity.Property(e => e.AlterToDesc).HasMaxLength(100);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.Qty).HasColumnType("decimal(38, 10)");
            });

            modelBuilder.Entity<VwGetItemCardRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetItemCardRank");

                entity.Property(e => e.ItemCardId).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemCode).HasMaxLength(50);
            });

            modelBuilder.Entity<VwGetItemStockAdjustmentRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetItemStockAdjustmentRank");

                entity.Property(e => e.StockAdjustId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetJobOrderByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetJobOrderByCust");

                entity.Property(e => e.CustomerCharged).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalJpbOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetJobOrderRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetJobOrderRank");

                entity.Property(e => e.JobOrderId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetJournalEntryRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetJournalEntryRank");

                entity.Property(e => e.JurnalId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetKeeperBankRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetKeeperBankRank");

                entity.Property(e => e.KeeperId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetLeavPermissionRequestRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetLeavPermissionRequestRank");

                entity.Property(e => e.LeavPermReqId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetLeavePermisionRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetLeavePermisionRank");

                entity.Property(e => e.LeavPermisionId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetNotifications>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetNotifications");

                entity.Property(e => e.ClosedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CurrentUser)
                    .HasColumnName("currentUser")
                    .HasMaxLength(101);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DepartCode).HasMaxLength(50);

                entity.Property(e => e.DepartName1).HasMaxLength(100);

                entity.Property(e => e.DepartName2).HasMaxLength(100);

                entity.Property(e => e.DocName).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(100);

                entity.Property(e => e.Message).HasMaxLength(250);

                entity.Property(e => e.Remarks).HasMaxLength(250);

                entity.Property(e => e.SenderUser).HasMaxLength(101);

                entity.Property(e => e.TransferDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UserCode).HasMaxLength(50);

                entity.Property(e => e.WachDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetPassPortRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPassPortRank");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WfpassPortId)
                    .HasColumnName("WFPassPortId")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetPaymentNoteByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPaymentNoteByCust");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetPaymentNoteByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPaymentNoteByVend");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetPaymentNoteRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPaymentNoteRank");

                entity.Property(e => e.PayId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetPettycashRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPettycashRank");

                entity.Property(e => e.PettycashId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetPettycashSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPettycashSearch");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalFilteredPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetProductionOrdeRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetProductionOrdeRank");

                entity.Property(e => e.ProductionOrderId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetPurchasInvoiceByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPurchasInvoiceByVend");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<VwGetPurchasInvoiceRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPurchasInvoiceRank");

                entity.Property(e => e.PurInvId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetPurchasOrderByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPurchasOrderByVend");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<VwGetPurchasOrderRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPurchasOrderRank");

                entity.Property(e => e.PurOrderId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetPurchasOrderRequestRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetPurchasOrderRequestRank");

                entity.Property(e => e.PurOrderReqId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetReceiptNoteByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetReceiptNoteByCust");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetReceiptNoteByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetReceiptNoteByVend");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetReceiptNoteRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetReceiptNoteRank");

                entity.Property(e => e.RectId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetRecipeRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetRecipeRank");

                entity.Property(e => e.RecipeCode).HasMaxLength(50);

                entity.Property(e => e.RecipeId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetReturnPurchaseByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetReturnPurchaseByVend");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);
            });

            modelBuilder.Entity<VwGetReturnPurchaseRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetReturnPurchaseRank");

                entity.Property(e => e.RetPurchId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetReturnSalesByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetReturnSalesByCust");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetReturnSalesRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetReturnSalesRank");

                entity.Property(e => e.RetSaleId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetRewardAndPenaltyRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetRewardAndPenaltyRank");

                entity.Property(e => e.RewardId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetSalaryIssueDocRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalaryIssueDocRank");

                entity.Property(e => e.SalaryIssuDocId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetSalesInvByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesInvByCust");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetSalesInvoiceRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesInvoiceRank");

                entity.Property(e => e.InvId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetSalesOfferByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesOfferByCust");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetSalesOfferRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesOfferRank");

                entity.Property(e => e.SalesOfferId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetSalesOfferRequestByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesOfferRequestByCust");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetSalesOfferRequestRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesOfferRequestRank");

                entity.Property(e => e.SalesOfferReqId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetSalesOrderByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesOrderByCust");

                entity.Property(e => e.Commision).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.InvDescA).HasMaxLength(100);

                entity.Property(e => e.InvDescE).HasMaxLength(100);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PaidPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalTaxValu).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetSalesOrderRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetSalesOrderRank");

                entity.Property(e => e.SalesOrderId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetStockRecriptByCust>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetStockRecriptByCust");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetStockRecriptByVend>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetStockRecriptByVend");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.IsCust)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.NetPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.PrefixCode).HasMaxLength(50);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwGetStockRecriptRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetStockRecriptRank");

                entity.Property(e => e.StockRecId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetStockTransferNoteRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetStockTransferNoteRank");

                entity.Property(e => e.TranId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetTripsRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetTripsRank");

                entity.Property(e => e.TripId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetVacationDocRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetVacationDocRank");

                entity.Property(e => e.VacationDocId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetVacationEditRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetVacationEditRank");

                entity.Property(e => e.VacationEditDocId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetVacationRequestRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetVacationRequestRank");

                entity.Property(e => e.VacRequestId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetVehicleJobOrderRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetVehicleJobOrderRank");

                entity.Property(e => e.VjorderId)
                    .HasColumnName("VJOrderId")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetVehicleRenalContractRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetVehicleRenalContractRank");

                entity.Property(e => e.VrentContractId)
                    .HasColumnName("VRentContractId")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetVendorsRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetVendorsRank");

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGetWeightCardRank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GetWeightCardRank");

                entity.Property(e => e.ScaleCardId).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VwGlclassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_GLClassification");

                entity.Property(e => e.AccCurrTrancCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccCurrTrancCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccCurrTrancDepit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccCurrTrancDepitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccTotaCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccTotalDebitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.AccountNameE).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceDebitCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceDebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DescA).HasMaxLength(100);

                entity.Property(e => e.DescE).HasMaxLength(100);

                entity.Property(e => e.NetBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceDepit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceDepitCurncy).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwHelpingAccountsSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_HelpingAccountsSearch");

                entity.Property(e => e.AccCurrTrancCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccCurrTrancDepit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.CustVendDesc)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CustVendDesc2)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.OpenningBalanceCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.OpenningBalanceDepit).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwItemCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ItemCard");

                entity.Property(e => e.BeforLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.FirstPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCatCode).HasMaxLength(50);

                entity.Property(e => e.ItemCatDescA).HasMaxLength(100);

                entity.Property(e => e.ItemCatDescE).HasMaxLength(100);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ItemDescE).HasMaxLength(100);

                entity.Property(e => e.ItemLimit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemMax).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemType)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.ItemType2)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.LargePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCostManual).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastPurchDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastSalePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ManualPurchasePrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SecandPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ThirdPrice).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwItemUnitGrand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ItemUnitGrand");

                entity.Property(e => e.BarCode1).HasMaxLength(60);

                entity.Property(e => e.BarCode10).HasMaxLength(60);

                entity.Property(e => e.BarCode11).HasMaxLength(60);

                entity.Property(e => e.BarCode12).HasMaxLength(60);

                entity.Property(e => e.BarCode13).HasMaxLength(60);

                entity.Property(e => e.BarCode14).HasMaxLength(60);

                entity.Property(e => e.BarCode15).HasMaxLength(60);

                entity.Property(e => e.BarCode2).HasMaxLength(60);

                entity.Property(e => e.BarCode3).HasMaxLength(60);

                entity.Property(e => e.BarCode4).HasMaxLength(60);

                entity.Property(e => e.BarCode5).HasMaxLength(60);

                entity.Property(e => e.BarCode6).HasMaxLength(60);

                entity.Property(e => e.BarCode7).HasMaxLength(60);

                entity.Property(e => e.BarCode8).HasMaxLength(60);

                entity.Property(e => e.BarCode9).HasMaxLength(60);

                entity.Property(e => e.BasicUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BeforLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ItemDescE).HasMaxLength(100);

                entity.Property(e => e.ItemUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price10).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price6).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price7).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price8).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price9).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnitNameE).HasMaxLength(100);
            });

            modelBuilder.Entity<VwItemUnitGrandAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ItemUnitGrandAttribute");

                entity.Property(e => e.BarCode1).HasMaxLength(60);

                entity.Property(e => e.BarCode10).HasMaxLength(60);

                entity.Property(e => e.BarCode11).HasMaxLength(60);

                entity.Property(e => e.BarCode12).HasMaxLength(60);

                entity.Property(e => e.BarCode13).HasMaxLength(60);

                entity.Property(e => e.BarCode14).HasMaxLength(60);

                entity.Property(e => e.BarCode15).HasMaxLength(60);

                entity.Property(e => e.BarCode2).HasMaxLength(60);

                entity.Property(e => e.BarCode3).HasMaxLength(60);

                entity.Property(e => e.BarCode4).HasMaxLength(60);

                entity.Property(e => e.BarCode5).HasMaxLength(60);

                entity.Property(e => e.BarCode6).HasMaxLength(60);

                entity.Property(e => e.BarCode7).HasMaxLength(60);

                entity.Property(e => e.BarCode8).HasMaxLength(60);

                entity.Property(e => e.BarCode9).HasMaxLength(60);

                entity.Property(e => e.BasicUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BeforLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemBatchCode).HasMaxLength(250);

                entity.Property(e => e.ItemBatchName1).HasMaxLength(500);

                entity.Property(e => e.ItemBatchName2).HasMaxLength(500);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ItemDescE).HasMaxLength(100);

                entity.Property(e => e.ItemUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Price5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity3).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity4).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Quantity5).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnitNameE).HasMaxLength(100);
            });

            modelBuilder.Entity<VwItemUnitSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ItemUnitSummary");

                entity.Property(e => e.BeforLastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemUnitRate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LastCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);
            });

            modelBuilder.Entity<VwJobOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_JobOrder");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DiscAmount).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DiscPercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.GrandTotal).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.InstallationPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemBatchCode).HasMaxLength(250);

                entity.Property(e => e.ItemBatchName1).HasMaxLength(500);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ItemDescE).HasMaxLength(100);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.ProducedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalEquipCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalGoStock).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJobsCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJpbOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProductsPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPurchInvCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrap).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalTasksCose).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwLotNumberExpiryPartition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_LotNumberExpiryPartition");

                entity.Property(e => e.CoastAverage).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Fifocost)
                    .HasColumnName("FIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ItemBatchCode).HasMaxLength(250);

                entity.Property(e => e.ItemBatchName1).HasMaxLength(500);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ItemDescE).HasMaxLength(100);

                entity.Property(e => e.Lifocost)
                    .HasColumnName("LIFOCost")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.LotNumberExpiry).HasMaxLength(50);

                entity.Property(e => e.MaxTversion).HasColumnName("MaxTVersion");

                entity.Property(e => e.PartCode).HasMaxLength(50);

                entity.Property(e => e.PartDescA).HasMaxLength(100);

                entity.Property(e => e.PartDescE).HasMaxLength(50);

                entity.Property(e => e.ProdDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurNotReceived).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInNotebook).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyInWithoutCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyOutWithoutBalance).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QtyPartiation).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remark).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(100);

                entity.Property(e => e.Remarks4).HasMaxLength(100);

                entity.Property(e => e.Remarks5).HasMaxLength(100);

                entity.Property(e => e.Remarks6).HasMaxLength(100);

                entity.Property(e => e.Remarks7).HasMaxLength(100);

                entity.Property(e => e.RequestedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ReservedQty).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SaleNotDelivered).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.SalesOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.Ttype)
                    .HasColumnName("TType")
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tversion).HasColumnName("TVersion");

                entity.Property(e => e.WithoutCost).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwProdItemAttributes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ProdItemAttributes");

                entity.Property(e => e.AttributCode).HasMaxLength(50);

                entity.Property(e => e.AttributName1).HasMaxLength(100);

                entity.Property(e => e.AttributName2).HasMaxLength(100);

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ItemDescE).HasMaxLength(100);

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnitNameE).HasMaxLength(100);

                entity.Property(e => e.UnittRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwProdItemUnits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ProdItemUnits");

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.ItemDescE).HasMaxLength(100);

                entity.Property(e => e.Symbol).HasMaxLength(10);

                entity.Property(e => e.UnitCode).HasMaxLength(50);

                entity.Property(e => e.UnitNam).HasMaxLength(100);

                entity.Property(e => e.UnitNameE).HasMaxLength(100);

                entity.Property(e => e.UnittRate).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwProdWorkOrderSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Prod_WorkOrderSearch");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCharged).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocBarCode).HasMaxLength(200);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.NetExpenses).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShiftCode).HasMaxLength(50);

                entity.Property(e => e.ShiftsName1).HasMaxLength(100);

                entity.Property(e => e.ShiftsName2).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TotalEquipCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalEquipCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalExpensesCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalGoStockCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalItemCost).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalJpbOrder).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalMaterialCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalProductCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrap).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalScrapCostEstimate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalServices).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwQualityItemDeliverySearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Quality_ItemDeliverySearch");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocBarCode).HasMaxLength(200);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.ItemRecCheckDocBarCode).HasMaxLength(200);

                entity.Property(e => e.ItemRecCheckDocTrNo).HasMaxLength(151);

                entity.Property(e => e.ItemRecCheckEmpCode).HasMaxLength(50);

                entity.Property(e => e.ItemRecCheckEmpName1).HasMaxLength(100);

                entity.Property(e => e.ItemRecCheckEmpName2).HasMaxLength(100);

                entity.Property(e => e.ItemRecCheckTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShiftCode).HasMaxLength(50);

                entity.Property(e => e.ShiftsName1).HasMaxLength(100);

                entity.Property(e => e.ShiftsName2).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwQualityItemRecCheckSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Quality_ItemRecCheckSearch");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocBarCode).HasMaxLength(200);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.ItemRecieveDocTrNo).HasMaxLength(151);

                entity.Property(e => e.ItemRecieveTrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShiftCode).HasMaxLength(50);

                entity.Property(e => e.ShiftsName1).HasMaxLength(100);

                entity.Property(e => e.ShiftsName2).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwQualityItemRecieveSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Vw_Quality_ItemRecieveSearch");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.AddField3).HasMaxLength(100);

                entity.Property(e => e.AddField4).HasMaxLength(100);

                entity.Property(e => e.AddField5).HasMaxLength(100);

                entity.Property(e => e.CurrencyCode).HasMaxLength(50);

                entity.Property(e => e.CurrencyDescA).HasMaxLength(100);

                entity.Property(e => e.CurrencyDescE).HasMaxLength(100);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShiftCode).HasMaxLength(50);

                entity.Property(e => e.ShiftsName1).HasMaxLength(100);

                entity.Property(e => e.ShiftsName2).HasMaxLength(100);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.StoreDescE).HasMaxLength(100);

                entity.Property(e => e.TermCode).HasMaxLength(50);

                entity.Property(e => e.TermName).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwReservedQty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_reservedQTY");

                entity.Property(e => e.ItemCode).HasMaxLength(50);

                entity.Property(e => e.ItemDescA).HasMaxLength(100);

                entity.Property(e => e.Quantity).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.QuantityOut).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Reserved)
                    .HasColumnName("reserved")
                    .HasColumnType("numeric(38, 10)");

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwSearchAllAccounts>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_SearchAllAccounts");

                entity.Property(e => e.AccDesc)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.AccDesc2)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.AccountCode).HasMaxLength(100);

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.BalanceCreditCurncy).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceDebitCurncy).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwSearchInstallments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_SearchInstallments");

                entity.Property(e => e.ActualSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Cc).HasColumnName("cc");

                entity.Property(e => e.ContractDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.PayStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwSearchRealStatUnits>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_SearchRealStatUnits");

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.Cc).HasColumnName("cc");

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContractDocNo).HasMaxLength(50);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.RentDocNo).HasMaxLength(50);

                entity.Property(e => e.ReserveDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShareValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitMeterPrice).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwSearchUnitReservations>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_SearchUnitReservations");

                entity.Property(e => e.AccountDescription).HasMaxLength(100);

                entity.Property(e => e.ActualSalesPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Cc).HasColumnName("cc");

                entity.Property(e => e.Code).HasMaxLength(100);

                entity.Property(e => e.ContractDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ContractDocNo).HasMaxLength(50);

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.ExpectedDeliveryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.ManualTrNo).HasMaxLength(50);

                entity.Property(e => e.Name1).HasMaxLength(200);

                entity.Property(e => e.Name2).HasMaxLength(200);

                entity.Property(e => e.PayStartDate).HasColumnType("smalldatetime");

                entity.Property(e => e.RentDocNo).HasMaxLength(50);

                entity.Property(e => e.ReserveDate).HasColumnType("smalldatetime");

                entity.Property(e => e.SharePercent).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.ShareValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TotalPrice).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UnitArea).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.UnitMeterPrice).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwVendorCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_VendorCategory");

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.CatCode).HasMaxLength(50);

                entity.Property(e => e.CatDescA).HasMaxLength(100);

                entity.Property(e => e.CatDescE).HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.VendorCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorDescA).HasMaxLength(100);

                entity.Property(e => e.VendorDescE).HasMaxLength(100);
            });

            modelBuilder.Entity<VwWeightCard>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_WeightCard");

                entity.Property(e => e.AddField1).HasMaxLength(100);

                entity.Property(e => e.AddField2).HasMaxLength(100);

                entity.Property(e => e.Addemp1)
                    .HasColumnName("addemp1")
                    .HasMaxLength(100);

                entity.Property(e => e.Addemp2)
                    .HasColumnName("addemp2")
                    .HasMaxLength(100);

                entity.Property(e => e.BodyNo).HasMaxLength(100);

                entity.Property(e => e.CityName).HasMaxLength(100);

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.DocTrNo).HasMaxLength(151);

                entity.Property(e => e.DriverCode).HasMaxLength(50);

                entity.Property(e => e.DriverName1).HasMaxLength(100);

                entity.Property(e => e.EmpCode).HasMaxLength(50);

                entity.Property(e => e.Empcode2)
                    .HasColumnName("empcode2")
                    .HasMaxLength(50);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.MotorNo).HasMaxLength(100);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PartCode).HasMaxLength(50);

                entity.Property(e => e.PartDescA).HasMaxLength(100);

                entity.Property(e => e.RegNo).HasMaxLength(100);

                entity.Property(e => e.Remarks1).HasMaxLength(500);

                entity.Property(e => e.Remarks2).HasMaxLength(500);

                entity.Property(e => e.StoreCode).HasMaxLength(50);

                entity.Property(e => e.StoreDescA).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VehiclRemarks).HasMaxLength(255);

                entity.Property(e => e.VehicleCode).HasMaxLength(100);

                entity.Property(e => e.VehicleName1).HasMaxLength(100);

                entity.Property(e => e.Weight1Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight1Time).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight2Date).HasColumnType("smalldatetime");

                entity.Property(e => e.Weight2Time).HasColumnType("smalldatetime");

                entity.Property(e => e.WeightQty1).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightQty2).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.WeightQtyDiff).HasColumnType("numeric(38, 10)");
            });

            modelBuilder.Entity<VwWorkForcExecluded>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_WorkForcExecluded");

                entity.Property(e => e.AcceptAgeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptAgeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.EmbassyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PassPortExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.SeasonName2).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwWorkForcTemplates>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_WorkForcTemplates");

                entity.Property(e => e.AcceptAgeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptAgeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.EmbassyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PassPortExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.SeasonName2).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.WftempId).HasColumnName("WFTempId");
            });

            modelBuilder.Entity<VwWorkForcTestResults>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_WorkForcTestResults");

                entity.Property(e => e.AcceptAgeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptAgeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.CustomerDescA).HasMaxLength(100);

                entity.Property(e => e.CustomerDescE).HasMaxLength(100);

                entity.Property(e => e.EmbassyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PassPortExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.SeasonName2).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<VwsimpleAllTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VWSimpleAllTransactions");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AccountNameA).HasMaxLength(100);

                entity.Property(e => e.BalanceCurrencyAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceCurrencyAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterCredit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.BalanceLocalAfterDebit).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.CreditLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitCurrency).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.DebitLocal).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.HelpAccType).HasMaxLength(50);

                entity.Property(e => e.Idname)
                    .IsRequired()
                    .HasColumnName("IDname")
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.Remarks).HasMaxLength(303);

                entity.Property(e => e.RemarksA)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SourcTyp)
                    .IsRequired()
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.TableCode).HasMaxLength(100);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<WorForcFirms>(entity =>
            {
                entity.HasKey(e => e.WfcompId);

                entity.ToTable("WorForc_Firms");

                entity.Property(e => e.WfcompId).HasColumnName("WFCompId");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Address3).HasMaxLength(200);

                entity.Property(e => e.CompCode).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email2).HasMaxLength(50);

                entity.Property(e => e.Email3).HasMaxLength(50);

                entity.Property(e => e.Email4).HasMaxLength(50);

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.OwnerName).HasMaxLength(100);

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.TaxRefNo).HasMaxLength(100);

                entity.Property(e => e.Tel).HasMaxLength(20);

                entity.Property(e => e.Tel2).HasMaxLength(20);

                entity.Property(e => e.Tel3).HasMaxLength(20);

                entity.Property(e => e.Tel4).HasMaxLength(20);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcActionTypes>(entity =>
            {
                entity.HasKey(e => e.ActionTypeId);

                entity.ToTable("WorkForc_ActionTypes");

                entity.Property(e => e.ActionCode).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcBloodExeclude>(entity =>
            {
                entity.HasKey(e => e.BloodExecludId);

                entity.ToTable("WorkForc_BloodExeclude");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcBloodExecludeDetails>(entity =>
            {
                entity.HasKey(e => e.ExecludPassId);

                entity.ToTable("WorkForc_BloodExecludeDetails");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");

                entity.HasOne(d => d.BloodExeclud)
                    .WithMany(p => p.WorkForcBloodExecludeDetails)
                    .HasForeignKey(d => d.BloodExecludId)
                    .HasConstraintName("FK_WorkForc_BloodExecludeDetails_WorkForc_BloodExeclude");
            });

            modelBuilder.Entity<WorkForcFirstCustExeclude>(entity =>
            {
                entity.HasKey(e => e.ExecludId);

                entity.ToTable("WorkForc_FirstCustExeclude");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcFirstCustExecludeDetail>(entity =>
            {
                entity.HasKey(e => e.ExecludPassId);

                entity.ToTable("WorkForc_FirstCustExecludeDetail");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");

                entity.HasOne(d => d.Execlud)
                    .WithMany(p => p.WorkForcFirstCustExecludeDetail)
                    .HasForeignKey(d => d.ExecludId)
                    .HasConstraintName("FK_WorkForc_FirstCustExecludeDetail_WorkForc_FirstCustExeclude");
            });

            modelBuilder.Entity<WorkForcPassPorts>(entity =>
            {
                entity.HasKey(e => e.WfpassPortId);

                entity.ToTable("WorkForc_PassPorts");

                entity.HasIndex(e => e.Code)
                    .HasName("Code_UniqueCode")
                    .IsUnique();

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryEncCode).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EngazKey).HasMaxLength(100);

                entity.Property(e => e.FullName).HasMaxLength(200);

                entity.Property(e => e.FullNameen).HasMaxLength(200);

                entity.Property(e => e.IdexpiryDate)
                    .HasColumnName("IDExpiryDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdissueDate)
                    .HasColumnName("IDIssueDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idmage1)
                    .HasColumnName("IDmage1")
                    .HasMaxLength(300);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.MaritalStatus).HasComment("0 single,1 married,2 married and have kids");

                entity.Property(e => e.Name1).HasMaxLength(50);

                entity.Property(e => e.Name2).HasMaxLength(50);

                entity.Property(e => e.Name2en).HasMaxLength(50);

                entity.Property(e => e.Name3).HasMaxLength(50);

                entity.Property(e => e.Name3en).HasMaxLength(50);

                entity.Property(e => e.Name4).HasMaxLength(50);

                entity.Property(e => e.Name4en).HasMaxLength(50);

                entity.Property(e => e.Name5).HasMaxLength(50);

                entity.Property(e => e.Name5en).HasMaxLength(50);

                entity.Property(e => e.Name6).HasMaxLength(50);

                entity.Property(e => e.Name6en).HasMaxLength(50);

                entity.Property(e => e.Name7).HasMaxLength(50);

                entity.Property(e => e.Name7en).HasMaxLength(50);

                entity.Property(e => e.Nameen).HasMaxLength(50);

                entity.Property(e => e.PassOwnerId).HasMaxLength(50);

                entity.Property(e => e.PassPortImage).HasMaxLength(300);

                entity.Property(e => e.PassportExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassportIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassportIssuePlace).HasMaxLength(100);

                entity.Property(e => e.PassportNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone1).HasMaxLength(20);

                entity.Property(e => e.Phone2).HasMaxLength(20);

                entity.Property(e => e.Phone3).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SignOffDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.VisaNo).HasMaxLength(100);

                entity.Property(e => e.WfcompId).HasColumnName("WFCompId");
            });

            modelBuilder.Entity<WorkForcPassPortsArchives>(entity =>
            {
                entity.HasKey(e => e.WfpassPortArchId);

                entity.ToTable("WorkForc_PassPortsArchives");

                entity.Property(e => e.WfpassPortArchId).HasColumnName("WFPassPortArchId");

                entity.Property(e => e.Address1).HasMaxLength(200);

                entity.Property(e => e.Address2).HasMaxLength(200);

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");

                entity.Property(e => e.CityId).HasColumnName("CityID");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FullName).HasMaxLength(200);

                entity.Property(e => e.FullNameen).HasMaxLength(200);

                entity.Property(e => e.IdexpiryDate)
                    .HasColumnName("IDExpiryDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdissueDate)
                    .HasColumnName("IDIssueDate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Idmage1)
                    .HasColumnName("IDmage1")
                    .HasMaxLength(300);

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.MaritalStatus).HasComment("0 single,1 married,2 married and have kids");

                entity.Property(e => e.Name1).HasMaxLength(50);

                entity.Property(e => e.Name2).HasMaxLength(50);

                entity.Property(e => e.Name2en).HasMaxLength(50);

                entity.Property(e => e.Name3).HasMaxLength(50);

                entity.Property(e => e.Name3en).HasMaxLength(50);

                entity.Property(e => e.Name4).HasMaxLength(50);

                entity.Property(e => e.Name4en).HasMaxLength(50);

                entity.Property(e => e.Name5).HasMaxLength(50);

                entity.Property(e => e.Name5en).HasMaxLength(50);

                entity.Property(e => e.Name6).HasMaxLength(50);

                entity.Property(e => e.Name6en).HasMaxLength(50);

                entity.Property(e => e.Name7).HasMaxLength(50);

                entity.Property(e => e.Name7en).HasMaxLength(50);

                entity.Property(e => e.Nameen).HasMaxLength(50);

                entity.Property(e => e.PassOwnerId).HasMaxLength(50);

                entity.Property(e => e.PassPortImage).HasMaxLength(300);

                entity.Property(e => e.PassportExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassportIssueDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PassportIssuePlace).HasMaxLength(100);

                entity.Property(e => e.PassportNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone1).HasMaxLength(20);

                entity.Property(e => e.Phone2).HasMaxLength(20);

                entity.Property(e => e.Phone3).HasMaxLength(20);

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");
            });

            modelBuilder.Entity<WorkForcProblems>(entity =>
            {
                entity.HasKey(e => e.WorkForcProbId);

                entity.ToTable("WorkForc_Problems");

                entity.Property(e => e.WorkForcProbId).HasColumnName("WorkForc_ProbId");

                entity.Property(e => e.Complaint).IsRequired();

                entity.Property(e => e.ComplaintType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");
            });

            modelBuilder.Entity<WorkForcSeasons>(entity =>
            {
                entity.HasKey(e => e.SeasonId);

                entity.ToTable("WorkForc_Seasons");

                entity.Property(e => e.AcceptAgeFrom).HasColumnType("smalldatetime");

                entity.Property(e => e.AcceptAgeTo).HasColumnType("smalldatetime");

                entity.Property(e => e.CountryEnc).HasMaxLength(50);

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.EmbassyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PassPortExpiry).HasColumnType("smalldatetime");

                entity.Property(e => e.Remarks).HasMaxLength(500);

                entity.Property(e => e.SeasonCode).HasMaxLength(50);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcSecondCustExeclude>(entity =>
            {
                entity.HasKey(e => e.ScndExecludId);

                entity.ToTable("WorkForc_SecondCustExeclude");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcSecondCustExecludeDetail>(entity =>
            {
                entity.HasKey(e => e.ExecludPassId);

                entity.ToTable("WorkForc_SecondCustExecludeDetail");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");

                entity.HasOne(d => d.ScndExeclud)
                    .WithMany(p => p.WorkForcSecondCustExecludeDetail)
                    .HasForeignKey(d => d.ScndExecludId)
                    .HasConstraintName("FK_WorkForc_SecondCustExecludeDetail_WorkForc_SecondCustExeclude");
            });

            modelBuilder.Entity<WorkForcTempIds>(entity =>
            {
                entity.HasKey(e => e.WftempId);

                entity.ToTable("WorkForc_TempIds");

                entity.Property(e => e.WftempId).HasColumnName("WFtempId");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.Grade).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ImagePath).HasMaxLength(300);

                entity.Property(e => e.ImagePath3).HasMaxLength(300);

                entity.Property(e => e.Name1).HasMaxLength(100);

                entity.Property(e => e.Name2).HasMaxLength(100);

                entity.Property(e => e.PassPortNo).HasMaxLength(50);

                entity.Property(e => e.PersonId)
                    .HasColumnName("PersonID")
                    .HasMaxLength(50);

                entity.Property(e => e.PersonImage).HasColumnType("image");

                entity.Property(e => e.PersonImagePath).HasMaxLength(300);

                entity.Property(e => e.Remarks1).HasMaxLength(200);

                entity.Property(e => e.Remarks2).HasMaxLength(200);

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcTemplates>(entity =>
            {
                entity.HasKey(e => e.WftempId);

                entity.ToTable("WorkForc_Templates");

                entity.Property(e => e.WftempId).HasColumnName("WFTempId");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcTemplatesDetails>(entity =>
            {
                entity.HasKey(e => e.WftempDetailId);

                entity.ToTable("WorkForc_TemplatesDetails");

                entity.Property(e => e.WftempDetailId).HasColumnName("WFTempDetailId");

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");

                entity.Property(e => e.WftempId).HasColumnName("WFTempId");

                entity.HasOne(d => d.Wftemp)
                    .WithMany(p => p.WorkForcTemplatesDetails)
                    .HasForeignKey(d => d.WftempId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WorkForc_TemplatesDetails_WorkForc_Templates");
            });

            modelBuilder.Entity<WorkForcTestResults>(entity =>
            {
                entity.HasKey(e => e.TestResultId);

                entity.ToTable("WorkForc_TestResults");

                entity.Property(e => e.Aid).HasColumnName("AId");

                entity.Property(e => e.CloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Closed).HasComment("True  Closed ;  False  Not Closed");

                entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.CreatedBy).HasMaxLength(20);

                entity.Property(e => e.DeletedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy).HasMaxLength(20);

                entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPrinted).HasDefaultValueSql("((0))");

                entity.Property(e => e.ManualTrNo).HasMaxLength(40);

                entity.Property(e => e.PermPrintedAt).HasColumnType("smalldatetime");

                entity.Property(e => e.PostedDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Postedby).HasMaxLength(20);

                entity.Property(e => e.Remarks1).HasMaxLength(100);

                entity.Property(e => e.Remarks2).HasMaxLength(100);

                entity.Property(e => e.Remarks3).HasMaxLength(200);

                entity.Property(e => e.TermCostCenterValue).HasColumnType("numeric(38, 10)");

                entity.Property(e => e.TrDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UncloseDate).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateAt).HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateBy).HasMaxLength(20);
            });

            modelBuilder.Entity<WorkForcTestResultsDetails>(entity =>
            {
                entity.HasKey(e => e.TestResultDetailId);

                entity.ToTable("WorkForc_TestResultsDetails");

                entity.Property(e => e.Grad).HasColumnType("numeric(18, 5)");

                entity.Property(e => e.Remarks).HasMaxLength(200);

                entity.Property(e => e.WfpassPortId).HasColumnName("WFPassPortId");

                entity.Property(e => e.WftempId).HasColumnName("WFtempId");

                entity.HasOne(d => d.TestResult)
                    .WithMany(p => p.WorkForcTestResultsDetails)
                    .HasForeignKey(d => d.TestResultId)
                    .HasConstraintName("FK_WorkForc_TestResultsDetails_WorkForc_TestResults");
            });

            modelBuilder.Entity<YearMonthes>(entity =>
            {
                entity.HasKey(e => e.YearMonthId);

                entity.Property(e => e.CustomField).HasMaxLength(50);

                entity.Property(e => e.MontnName).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
